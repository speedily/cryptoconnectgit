import { Address, Hex, SimulateContractReturnType, WalletClient } from "viem";
import { LoggerT } from "../utils/index.js";
import { ConfiguredPublicClient, CrossChainAction } from "../types/index.js";
export type SimulateUpdateDepositTxParams = {
    walletClient: WalletClient;
    originChainClient: ConfiguredPublicClient;
    destinationChainClient: ConfiguredPublicClient;
    deposit: {
        depositId: bigint | number;
        originChainId: number;
        destinationChainId: number;
        originSpokePoolAddress: Address;
        destinationSpokePoolAddress: Address;
    };
    update: Partial<{
        crossChainMessage: {
            actions: CrossChainAction[];
            fallbackRecipient: Address;
        } | Hex;
        recipient: Address;
        outputAmount: bigint;
    }>;
    apiUrl?: string;
    logger?: LoggerT;
};
/**
 * This function simulates the update of a deposit on the origin chain. Can be used to
 * update:
 * - the recipient address
 * - the output amount, i.e. the fees
 * - the cross-chain message
 * Note that this requires a signature from the depositor.
 * @param params - See {@link SimulateUpdateDepositTxParams}.
 * @returns The result of the simulation.
 * @example
 * ```ts
 * const result = await simulateUpdateDepositTx({
 *   walletClient,
 * . originChainClient,
 *   destinationChainClient,
 *   deposit: {
 *     // deposit details
 *   },
 *   update: {
 *     recipient: "0xNEW_RECIPIENT_ADDRESS",
 *   },
 *  });
 * const txHash = await walletClient.writeContract({
 *   account,
 *   ...txRequest,
 * });
 * ```
 */
export declare function simulateUpdateDepositTx(params: SimulateUpdateDepositTxParams): Promise<SimulateContractReturnType>;
//# sourceMappingURL=simulateUpdateDepositTx.d.ts.map
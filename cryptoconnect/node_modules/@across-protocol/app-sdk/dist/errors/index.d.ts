import { Address, Hash, Hex } from "viem";
import { AcrossErrorCodeType } from "./acrossApi.js";
export type { AcrossErrorCodeType };
export declare class DepositRevert extends Error {
    constructor(message?: string);
}
export declare class HttpError extends Error {
    readonly url: string;
    readonly status: number;
    constructor(params: {
        status: number;
        url: string;
        name?: string;
        message?: string;
    }, opts?: ErrorOptions);
}
export declare class AcrossApiError extends HttpError {
    constructor(params: {
        name?: string;
        status: number;
        url: string;
        message?: string;
        code: AcrossErrorCodeType;
    }, opts?: ErrorOptions);
}
export declare class AcrossApiSimulationError extends AcrossApiError {
    readonly transaction: {
        from: Address;
        to: Address;
        data: Hex;
        value?: string;
    };
    constructor(params: {
        url: string;
        message?: string;
        transaction: {
            from: Address;
            to: Address;
            data: Hex;
            value?: string;
        };
    }, opts?: ErrorOptions);
}
export declare class SimulationError extends Error {
    readonly simulationId: string;
    readonly simulationUrl: string;
    constructor(params: {
        message?: string;
        simulationId: string;
        simulationUrl: string;
    }, opts?: ErrorOptions);
}
export declare class IndexerError extends Error {
    readonly url: string;
    constructor(url: string, message?: string, error?: string);
}
export declare class ConfigError extends Error {
    constructor(message?: string);
}
export declare class NoDepositLogError extends Error {
    constructor(txHash: Hash, chainId: number);
}
export declare class NoFillLogError extends Error {
    constructor(depositId: bigint, chainId: number, depositTxHash?: Hash);
}
//# sourceMappingURL=index.d.ts.map
export class DepositRevert extends Error {
    constructor(message) {
        super(message);
        this.name = "Deposit Reverted";
    }
}
export class HttpError extends Error {
    url;
    status;
    constructor(params, opts) {
        super(params.message, opts);
        this.name = params.name ?? "HttpError";
        this.url = params.url;
        this.status = params.status;
    }
}
export class AcrossApiError extends HttpError {
    constructor(params, opts) {
        super({
            ...params,
            name: params.name ?? "AcrossApiError",
        }, opts);
    }
}
export class AcrossApiSimulationError extends AcrossApiError {
    transaction;
    constructor(params, opts) {
        super({
            ...params,
            name: "AcrossApiSimulationError",
            status: 400,
            code: "SIMULATION_ERROR",
        }, opts);
        this.transaction = params.transaction;
    }
}
export class SimulationError extends Error {
    simulationId;
    simulationUrl;
    constructor(params, opts) {
        super(params.message, opts);
        this.name = "SimulationError";
        this.simulationId = params.simulationId;
        this.simulationUrl = params.simulationUrl;
    }
}
export class IndexerError extends Error {
    url;
    constructor(url, message, error) {
        super(message);
        this.name = error ?? "Indexer Error";
        this.url = url;
    }
}
export class ConfigError extends Error {
    constructor(message) {
        super(message);
        this.name = "Config Error";
    }
}
export class NoDepositLogError extends Error {
    constructor(txHash, chainId) {
        super(`Unable to parse depositV3 log for tx ${txHash} on chain ${chainId}`);
        this.name = "Deposit Log Not Found";
    }
}
export class NoFillLogError extends Error {
    constructor(depositId, chainId, depositTxHash) {
        super(`Unable to find fill log on chain ${chainId} for deposit id #${depositId.toString()} ${depositTxHash ? `with depositTxHash ${depositTxHash}` : "."}`);
        this.name = "Fill Log Not Found";
    }
}
//# sourceMappingURL=index.js.map
import { Address } from "viem";
import { CrossChainAction } from "../types/index.js";
export type BuildMessageParams = {
    fallbackRecipient: Address;
    actions: CrossChainAction[];
};
export declare function getMultiCallHandlerAddress(chainId: number): "0x924a9f036260DdD5808007E1AA95f08eD08aA569" | "0x863859ef502F0Ee9676626ED5B418037252eFeb2" | "0x1015c58894961F4F7Dd7D68ba033e28Ed3ee1cDB";
export declare function buildMulticallHandlerMessage(params: BuildMessageParams): `0x${string}`;
export declare const MulticallHandlerAbi: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "index";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly internalType: "struct MulticallHandler.Call[]";
        readonly name: "calls";
        readonly type: "tuple[]";
    }];
    readonly name: "CallReverted";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "index";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly internalType: "struct MulticallHandler.Call[]";
        readonly name: "calls";
        readonly type: "tuple[]";
    }];
    readonly name: "InvalidCall";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly indexed: false;
        readonly internalType: "struct MulticallHandler.Call[]";
        readonly name: "calls";
        readonly type: "tuple[]";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "fallbackRecipient";
        readonly type: "address";
    }];
    readonly name: "CallsFailed";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "DrainedTokens";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly internalType: "struct MulticallHandler.Call[]";
        readonly name: "calls";
        readonly type: "tuple[]";
    }];
    readonly name: "attemptCalls";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "address payable";
        readonly name: "destination";
        readonly type: "address";
    }];
    readonly name: "drainLeftoverTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "message";
        readonly type: "bytes";
    }];
    readonly name: "handleV3AcrossMessage";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
//# sourceMappingURL=multicallHandler.d.ts.map
export declare const LogLevels: {
    readonly DEBUG: 3;
    readonly INFO: 2;
    readonly WARN: 1;
    readonly ERROR: 0;
};
export type LogLevel = keyof typeof LogLevels;
export declare class DefaultLogger implements LoggerT {
    logLevel: LogLevel;
    readonly secondaryLabel = "@across-protocol/app-sdk";
    readonly logPrefix = ">";
    constructor(logLevel: LogLevel);
    createLogLevelLabel: (logLevel: LogLevel) => {
        label: string;
        prefix: string;
    };
    /**
     * Description - creates an indentation group for each call to `logger.[logLevel]()`
     */
    log(logLevel: LogLevel, ...data: unknown[]): void;
    debug(...data: unknown[]): void;
    info(...data: unknown[]): void;
    warn(...data: unknown[]): void;
    error(...data: unknown[]): void;
}
type LoggerArgs = Parameters<typeof console.log>;
export type LoggerT = {
    debug(...args: LoggerArgs): void;
    info(...args: LoggerArgs): void;
    warn(...args: LoggerArgs): void;
    error(...args: LoggerArgs): void;
};
export {};
//# sourceMappingURL=logger.d.ts.map
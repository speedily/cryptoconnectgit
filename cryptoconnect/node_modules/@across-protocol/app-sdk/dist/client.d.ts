import { Address, Chain, Hex } from "viem";
import { WaitForDepositTxParams, GetAvailableRoutesParams, GetAvailableRoutesReturnType, GetSuggestedFeesParams, GetSuggestedFeesReturnType, GetLimitsParams, GetLimitsReturnType, SimulateDepositTxParams, WaitForFillTxParams, GetQuoteParams, ExecuteQuoteParams, GetDepositParams, GetFillByDepositTxParams, SimulateUpdateDepositTxParams, SignUpdateDepositTypedDataParams } from "./actions/index.js";
import { LogLevel, LoggerT, GetSupportedChainsParams, TenderlySimulateTxParams, AcrossChain } from "./utils/index.js";
import { ConfiguredPublicClient, ConfiguredWalletClient } from "./types/index.js";
import { MakeOptional } from "./utils/index.js";
/** Options for {@link AcrossClient.create} */
export type AcrossClientOptions = {
    /**
     * An identifier representing the integrator.
     */
    integratorId?: Hex;
    /**
     * The chains to use for the Across API. Should be imported from `viem/chains`.
     */
    chains: Chain[];
    /**
     * A wallet client to use for the Across API.
     */
    walletClient?: ConfiguredWalletClient;
    /**
     * The RPC URLs to use for the Across API. Will fall back to the default public RPC URL
     * for the chain if not specified.
     */
    rpcUrls?: {
        [chainId: number]: string;
    };
    /**
     * The log level to use. Defaults to `"ERROR"`.
     */
    logLevel?: LogLevel;
    /**
     * Whether to use the testnet API. Defaults to `false`.
     */
    useTestnet?: boolean;
    /**
     * A custom logger to use for the Across API. Defaults to a console logger.
     */
    logger?: LoggerT;
    /**
     * The polling interval in milliseconds to use for the Across API.
     * Defaults to `3_000` milliseconds.
     */
    pollingInterval?: number;
    /**
     * Tenderly related options. Can be used for additional debugging support on Tenderly.
     * @see https://tenderly.co/transaction-simulator
     */
    tenderly?: {
        /**
         * Whether to automatically simulate transactions on Tenderly when an error occurs.
         * Defaults to `true` if credentials `tenderly.accessKey`, `tenderly.accountSlug`,
         * and `tenderly.projectSlug` are provided.
         */
        simOnError?: boolean;
        /**
         * The Tenderly API access key.
         * @see https://docs.tenderly.co/account/projects/how-to-generate-api-access-token
         */
        accessKey: string;
        /**
         * The Tenderly account slug.
         * @see https://docs.tenderly.co/account/projects/account-project-slug
         */
        accountSlug: string;
        /**
         * The Tenderly project slug.
         * @see https://docs.tenderly.co/account/projects/account-project-slug
         */
        projectSlug: string;
    };
};
/**
 * Entrypoint for the Across Integrator SDK
 */
export declare class AcrossClient {
    private static instance;
    private integratorId;
    private publicClients;
    private chainInfo?;
    private walletClient?;
    private apiUrl;
    private indexerUrl;
    logger: LoggerT;
    private tenderly?;
    get isTenderlyEnabled(): boolean;
    private constructor();
    /**
     * Create a new `AcrossClient` instance as a singleton.
     * @param options - See {@link AcrossClientOptions}.
     * @returns A new `AcrossClient` instance if it doesn't exist, otherwise the existing
     * instance.
     */
    static create(options: AcrossClientOptions): AcrossClient;
    /**
     * Get the existing `AcrossClient` singleton instance.
     * @returns The existing `AcrossClient` instance.
     * @throws If the instance is not initialized.
     */
    static getInstance(): AcrossClient;
    update(params: Pick<AcrossClientOptions, "walletClient">): void;
    /**
     * @internal
     */
    getPublicClient(chainId: number): ConfiguredPublicClient;
    getSpokePoolAddress(chainId: number): Promise<Address>;
    /**
     * @param chainId - number
     * @returns See {@link AcrossChain}.
     */
    getChainInfo(chainId: number): Promise<AcrossChain>;
    /**
     * Execute a quote by:
     * 1. Approving the SpokePool contract if necessary
     * 2. Depositing the input token on the origin chain
     * 3. Waiting for the deposit to be filled on the destination chain
     *
     * See {@link executeQuote} for more details.
     *
     * @example
     * ```ts
     * const quote = await client.getQuote({ route, inputAmount });
     * const { depositId } = await client.executeQuote({ deposit: quote.deposit });
     * ```
     *
     * @param params - See {@link ExecuteQuoteParams}.
     * @returns The deposit ID and receipts for the deposit and fill transactions.
     */
    executeQuote(params: MakeOptional<ExecuteQuoteParams, "logger" | "originClient" | "destinationClient" | "integratorId">): Promise<void>;
    /**
     * Get the available routes for a given set of parameters. See {@link getAvailableRoutes}.
     * @param params - See {@link GetAvailableRoutesParams}.
     * @returns See {@link GetAvailableRoutesReturnType}.
     */
    getAvailableRoutes(params: MakeOptional<GetAvailableRoutesParams, "apiUrl" | "logger">): Promise<GetAvailableRoutesReturnType>;
    /**
     * Get the suggested fees for a given route. See {@link getSuggestedFees}.
     * @param params - See {@link GetSuggestedFeesParams}.
     * @returns See {@link GetSuggestedFeesReturnType}.
     */
    getSuggestedFees(params: MakeOptional<GetSuggestedFeesParams, "apiUrl" | "logger">): Promise<GetSuggestedFeesReturnType>;
    /**
     * Get the deposit limits for a given route. See {@link getLimits}.
     * @param params - See {@link GetLimitsParams}.
     * @returns See {@link GetLimitsReturnType}.
     */
    getLimits(params: MakeOptional<GetLimitsParams, "apiUrl" | "logger">): Promise<GetLimitsReturnType>;
    /**
     * Get a quote for a given set of parameters. See {@link getQuote}.
     * @param params - See {@link GetQuoteParams}.
     * @returns See {@link Quote}.
     */
    getQuote(params: MakeOptional<GetQuoteParams, "logger" | "apiUrl">): Promise<import("./actions/getQuote.js").Quote>;
    simulateDepositTx(params: MakeOptional<SimulateDepositTxParams, "integratorId" | "publicClient" | "logger">): Promise<import("viem").SimulateContractReturnType>;
    /**
     * This function simulates the update of a deposit on the origin chain. Can be used to
     * update:
     * - the recipient address
     * - the output amount, i.e. the fees
     * - the cross-chain message
     *
     * Note that this requires a signature from the depositor.
     *
     * See {@link simulateUpdateDepositTx}.
     *
     * @param params - See {@link SimulateUpdateDepositTxParams}.
     * @returns The result of the simulation.
     * @example
     * ```ts
     * const result = await client.simulateUpdateDepositTx({
     *   deposit: {
     *     // deposit details
     *   },
     *   update: {
     *     recipient: "0xNEW_RECIPIENT_ADDRESS",
     *   },
     *  });
     * const txHash = await walletClient.writeContract({
     *   account,
     *   ...txRequest,
     * });
     * ```
     */
    simulateUpdateDepositTx(params: MakeOptional<SimulateUpdateDepositTxParams, "originChainClient" | "destinationChainClient" | "logger" | "apiUrl">): Promise<import("viem").SimulateContractReturnType>;
    signUpdateDepositTypedData(params: MakeOptional<SignUpdateDepositTypedDataParams, "walletClient">): Promise<`0x${string}`>;
    waitForDepositTx(params: MakeOptional<WaitForDepositTxParams, "publicClient">): Promise<import("./actions/waitForDepositTx.js").DepositStatus>;
    /**
     * Get a fill after a deposit has been made. See {@link getFillByDepositTx}.
     * @param params - See {@link GetFillByDepositTxParams}.
     * @returns See {@link FillStatus}.
     */
    getFillByDepositTx(params: MakeOptional<GetFillByDepositTxParams, "destinationChainClient" | "indexerUrl" | "logger">): Promise<import("./actions/getFillByDepositTx.js").FillStatus>;
    waitForFillTx(params: MakeOptional<WaitForFillTxParams, "destinationChainClient">): Promise<import("./actions/getFillByDepositTx.js").FillStatus>;
    /**
     * Get a deposit by its deposit tx hash or deposit id + spoke pool address. See {@link getDeposit}.
     * @param params - See {@link GetDepositParams}.
     * @returns See {@link Deposit}.
     */
    getDeposit(params: MakeOptional<Omit<GetDepositParams, "findBy">, "originChainClient" | "destinationChainClient" | "indexerUrl"> & {
        findBy: {
            originSpokePoolAddress?: Address;
            destinationSpokePoolAddress?: Address;
            originChainId: number;
            destinationChainId: number;
            depositId?: bigint;
            depositTxHash?: Hex;
        };
    }): Promise<import("./types/index.js").Deposit>;
    getSupportedChains(params: MakeOptional<GetSupportedChainsParams, "apiUrl" | "logger">): Promise<import("./utils/getSupportedChains.js").ChainsQueryResponse>;
    simulateTxOnTenderly(params: MakeOptional<TenderlySimulateTxParams, "enableShare" | "accessKey" | "accountSlug" | "projectSlug">): Promise<{
        simulationId: string;
        simulationUrl: string;
    }>;
}
/**
 * Get the existing `AcrossClient` singleton instance.
 * @returns The existing `AcrossClient` instance.
 * @throws If the instance is not initialized.
 * @public
 */
export declare function getAcrossClient(): AcrossClient;
/**
 * Create a singleton `AcrossClient` instance.
 * @param options - See {@link AcrossClientOptions}.
 * @returns A new `AcrossClient` instance.
 * @public
 */
export declare function createAcrossClient(options: AcrossClientOptions): AcrossClient;
//# sourceMappingURL=client.d.ts.map
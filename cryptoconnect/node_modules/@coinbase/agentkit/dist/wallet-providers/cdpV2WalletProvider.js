"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdpV2WalletProvider = void 0;
const cdpV2EvmWalletProvider_1 = require("./cdpV2EvmWalletProvider");
const cdpV2SolanaWalletProvider_1 = require("./cdpV2SolanaWalletProvider");
const network_1 = require("../network");
/**
 * Factory class for creating chain-specific CDP V2 wallet providers
 */
class CdpV2WalletProvider {
    /**
     * Creates and configures a new wallet provider instance based on the chain type.
     *
     * @param config - The configuration options for the CdpV2 wallet
     * @returns A configured WalletProvider instance for the specified chain
     *
     * @example
     * ```typescript
     * // For EVM server wallets (default)
     * const evmWallet = await CdpV2WalletProvider.configureWithWallet({
     *   apiKeyId: "your-api-key-id",
     *   apiKeySecret: "your-api-key-secret",
     *   walletSecret: "your-wallet-secret",
     *   networkId: "base-sepolia" // or any EVM network. Defaults to "base-sepolia"
     * });
     *
     * // For Solana server wallets
     * const solanaWallet = await CdpV2WalletProvider.configureWithWallet({
     *   apiKeyId: "your-api-key-id",
     *   apiKeySecret: "your-api-key-secret",
     *   walletSecret: "your-wallet-secret",
     *   networkId: "solana-devnet" // or "solana-mainnet"
     * });
     * ```
     */
    static async configureWithWallet(config) {
        const useSolana = config.networkId && network_1.SOLANA_NETWORK_IDS.includes(config.networkId);
        const walletProviderClass = useSolana ? cdpV2SolanaWalletProvider_1.CdpV2SolanaWalletProvider : cdpV2EvmWalletProvider_1.CdpV2EvmWalletProvider;
        return await walletProviderClass.configureWithWallet(config);
    }
}
exports.CdpV2WalletProvider = CdpV2WalletProvider;

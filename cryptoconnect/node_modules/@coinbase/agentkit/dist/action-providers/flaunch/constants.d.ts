import { Addresses } from "./types";
import { abi as ERC20_ABI } from "../erc20/constants";
export { ERC20_ABI };
export declare const FastFlaunchZapAddress: Addresses;
export declare const FlaunchPositionManagerAddress: Addresses;
export declare const FLETHAddress: Addresses;
export declare const FLETHHooksAddress: Addresses;
export declare const QuoterAddress: Addresses;
export declare const UniversalRouterAddress: Addresses;
export declare const Permit2Address: Addresses;
export declare const FAST_FLAUNCH_ZAP_ABI: {
    type: string;
    name: string;
    inputs: {
        name: string;
        type: string;
        internalType: string;
        components: {
            name: string;
            type: string;
            internalType: string;
        }[];
    }[];
    outputs: {
        name: string;
        type: string;
        internalType: string;
    }[];
    stateMutability: string;
}[];
export declare const POSITION_MANAGER_ABI: readonly [{
    readonly name: "PoolCreated";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "bytes32";
        readonly name: "_poolId";
        readonly indexed: true;
    }, {
        readonly type: "address";
        readonly name: "_memecoin";
    }, {
        readonly type: "address";
        readonly name: "_memecoinTreasury";
    }, {
        readonly type: "uint256";
        readonly name: "_tokenId";
    }, {
        readonly type: "bool";
        readonly name: "_currencyFlipped";
    }, {
        readonly type: "uint256";
        readonly name: "_flaunchFee";
    }, {
        readonly type: "tuple";
        readonly components: readonly [{
            readonly type: "string";
            readonly name: "name";
        }, {
            readonly type: "string";
            readonly name: "symbol";
        }, {
            readonly type: "string";
            readonly name: "tokenUri";
        }, {
            readonly type: "uint256";
            readonly name: "initialTokenFairLaunch";
        }, {
            readonly type: "uint256";
            readonly name: "premineAmount";
        }, {
            readonly type: "address";
            readonly name: "creator";
        }, {
            readonly type: "uint24";
            readonly name: "creatorFeeAllocation";
        }, {
            readonly type: "uint256";
            readonly name: "flaunchAt";
        }, {
            readonly type: "bytes";
            readonly name: "initialPriceParams";
        }, {
            readonly type: "bytes";
            readonly name: "feeCalculatorParams";
        }];
        readonly name: "_params";
    }];
}, {
    readonly name: "PoolSwap";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "bytes32";
        readonly name: "poolId";
        readonly indexed: true;
    }, {
        readonly name: "flAmount0";
        readonly type: "int256";
    }, {
        readonly name: "flAmount1";
        readonly type: "int256";
    }, {
        readonly name: "flFee0";
        readonly type: "int256";
    }, {
        readonly name: "flFee1";
        readonly type: "int256";
    }, {
        readonly name: "ispAmount0";
        readonly type: "int256";
    }, {
        readonly name: "ispAmount1";
        readonly type: "int256";
    }, {
        readonly name: "ispFee0";
        readonly type: "int256";
    }, {
        readonly name: "ispFee1";
        readonly type: "int256";
    }, {
        readonly name: "uniAmount0";
        readonly type: "int256";
    }, {
        readonly name: "uniAmount1";
        readonly type: "int256";
    }, {
        readonly name: "uniFee0";
        readonly type: "int256";
    }, {
        readonly name: "uniFee1";
        readonly type: "int256";
    }];
}];
export declare const QUOTER_ABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "contract IPoolManager";
        readonly name: "_poolManager";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [{
        readonly internalType: "PoolId";
        readonly name: "poolId";
        readonly type: "bytes32";
    }];
    readonly name: "NotEnoughLiquidity";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotPoolManager";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotSelf";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "QuoteSwap";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "UnexpectedCallSuccess";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "revertData";
        readonly type: "bytes";
    }];
    readonly name: "UnexpectedRevertBytes";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "Currency";
            readonly name: "exactCurrency";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "intermediateCurrency";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "hookData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PathKey[]";
            readonly name: "path";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "_quoteExactInput";
    readonly outputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "currency0";
                readonly type: "address";
            }, {
                readonly internalType: "Currency";
                readonly name: "currency1";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }];
            readonly internalType: "struct PoolKey";
            readonly name: "poolKey";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "zeroForOne";
            readonly type: "bool";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }, {
            readonly internalType: "bytes";
            readonly name: "hookData";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactSingleParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "_quoteExactInputSingle";
    readonly outputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "Currency";
            readonly name: "exactCurrency";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "intermediateCurrency";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "hookData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PathKey[]";
            readonly name: "path";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "_quoteExactOutput";
    readonly outputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "currency0";
                readonly type: "address";
            }, {
                readonly internalType: "Currency";
                readonly name: "currency1";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }];
            readonly internalType: "struct PoolKey";
            readonly name: "poolKey";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "zeroForOne";
            readonly type: "bool";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }, {
            readonly internalType: "bytes";
            readonly name: "hookData";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactSingleParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "_quoteExactOutputSingle";
    readonly outputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "poolManager";
    readonly outputs: readonly [{
        readonly internalType: "contract IPoolManager";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "Currency";
            readonly name: "exactCurrency";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "intermediateCurrency";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "hookData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PathKey[]";
            readonly name: "path";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "quoteExactInput";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "gasEstimate";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "currency0";
                readonly type: "address";
            }, {
                readonly internalType: "Currency";
                readonly name: "currency1";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }];
            readonly internalType: "struct PoolKey";
            readonly name: "poolKey";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "zeroForOne";
            readonly type: "bool";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }, {
            readonly internalType: "bytes";
            readonly name: "hookData";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactSingleParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "quoteExactInputSingle";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "gasEstimate";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "Currency";
            readonly name: "exactCurrency";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "intermediateCurrency";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "hookData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PathKey[]";
            readonly name: "path";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "quoteExactOutput";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "gasEstimate";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "Currency";
                readonly name: "currency0";
                readonly type: "address";
            }, {
                readonly internalType: "Currency";
                readonly name: "currency1";
                readonly type: "address";
            }, {
                readonly internalType: "uint24";
                readonly name: "fee";
                readonly type: "uint24";
            }, {
                readonly internalType: "int24";
                readonly name: "tickSpacing";
                readonly type: "int24";
            }, {
                readonly internalType: "contract IHooks";
                readonly name: "hooks";
                readonly type: "address";
            }];
            readonly internalType: "struct PoolKey";
            readonly name: "poolKey";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "zeroForOne";
            readonly type: "bool";
        }, {
            readonly internalType: "uint128";
            readonly name: "exactAmount";
            readonly type: "uint128";
        }, {
            readonly internalType: "bytes";
            readonly name: "hookData";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IV4Quoter.QuoteExactSingleParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "quoteExactOutputSingle";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "gasEstimate";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "data";
        readonly type: "bytes";
    }];
    readonly name: "unlockCallback";
    readonly outputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}];
export declare const IV4RouterAbiExactInput: readonly [{
    readonly type: "tuple";
    readonly components: readonly [{
        readonly type: "address";
        readonly name: "currencyIn";
    }, {
        readonly type: "tuple[]";
        readonly name: "path";
        readonly components: readonly [{
            readonly type: "address";
            readonly name: "intermediateCurrency";
        }, {
            readonly type: "uint24";
            readonly name: "fee";
        }, {
            readonly type: "int24";
            readonly name: "tickSpacing";
        }, {
            readonly type: "address";
            readonly name: "hooks";
        }, {
            readonly type: "bytes";
            readonly name: "hookData";
        }];
    }, {
        readonly type: "uint128";
        readonly name: "amountIn";
    }, {
        readonly type: "uint128";
        readonly name: "amountOutMinimum";
    }];
}];
export declare const IV4RouterAbiExactOutput: readonly [{
    readonly type: "tuple";
    readonly components: readonly [{
        readonly type: "address";
        readonly name: "currencyOut";
    }, {
        readonly type: "tuple[]";
        readonly name: "path";
        readonly components: readonly [{
            readonly type: "address";
            readonly name: "intermediateCurrency";
        }, {
            readonly type: "uint24";
            readonly name: "fee";
        }, {
            readonly type: "int24";
            readonly name: "tickSpacing";
        }, {
            readonly type: "address";
            readonly name: "hooks";
        }, {
            readonly type: "bytes";
            readonly name: "hookData";
        }];
    }, {
        readonly type: "uint128";
        readonly name: "amountOut";
    }, {
        readonly type: "uint128";
        readonly name: "amountInMaximum";
    }];
}];
export declare const V4Actions: {
    SWAP_EXACT_IN: string;
    SWAP_EXACT_OUT: string;
    SETTLE_ALL: string;
    TAKE_ALL: string;
};
export declare const URCommands: {
    V4_SWAP: string;
    SWEEP: string;
    PERMIT2_PERMIT: string;
};
export declare const UNIVERSAL_ROUTER_ABI: readonly [{
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "permit2";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "weth9";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "v2Factory";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "v3Factory";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "pairInitCodeHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "poolInitCodeHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "v4PoolManager";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "v3NFTPositionManager";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "v4PositionManager";
            readonly type: "address";
        }];
        readonly internalType: "struct RouterParameters";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "BalanceTooLow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ContractLocked";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "Currency";
        readonly name: "currency";
        readonly type: "address";
    }];
    readonly name: "DeltaNotNegative";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "Currency";
        readonly name: "currency";
        readonly type: "address";
    }];
    readonly name: "DeltaNotPositive";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ETHNotAccepted";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "commandIndex";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "message";
        readonly type: "bytes";
    }];
    readonly name: "ExecutionFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "FromAddressIsNotOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InputLengthMismatch";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InsufficientBalance";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InsufficientETH";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InsufficientToken";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "action";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidAction";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidBips";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "commandType";
        readonly type: "uint256";
    }];
    readonly name: "InvalidCommandType";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidEthSender";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidPath";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidReserves";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LengthMismatch";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tokenId";
        readonly type: "uint256";
    }];
    readonly name: "NotAuthorizedForToken";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotPoolManager";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "OnlyMintAllowed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SliceOutOfBounds";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "TransactionDeadlinePassed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "UnsafeCast";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "action";
        readonly type: "uint256";
    }];
    readonly name: "UnsupportedAction";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V2InvalidPath";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V2TooLittleReceived";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V2TooMuchRequested";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V3InvalidAmountOut";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V3InvalidCaller";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V3InvalidSwap";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V3TooLittleReceived";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V3TooMuchRequested";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "minAmountOutReceived";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountReceived";
        readonly type: "uint256";
    }];
    readonly name: "V4TooLittleReceived";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "maxAmountInRequested";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountRequested";
        readonly type: "uint256";
    }];
    readonly name: "V4TooMuchRequested";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "V3_POSITION_MANAGER";
    readonly outputs: readonly [{
        readonly internalType: "contract INonfungiblePositionManager";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "V4_POSITION_MANAGER";
    readonly outputs: readonly [{
        readonly internalType: "contract IPositionManager";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "commands";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes[]";
        readonly name: "inputs";
        readonly type: "bytes[]";
    }];
    readonly name: "execute";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "commands";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes[]";
        readonly name: "inputs";
        readonly type: "bytes[]";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "execute";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "msgSender";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "poolManager";
    readonly outputs: readonly [{
        readonly internalType: "contract IPoolManager";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "int256";
        readonly name: "amount0Delta";
        readonly type: "int256";
    }, {
        readonly internalType: "int256";
        readonly name: "amount1Delta";
        readonly type: "int256";
    }, {
        readonly internalType: "bytes";
        readonly name: "data";
        readonly type: "bytes";
    }];
    readonly name: "uniswapV3SwapCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "data";
        readonly type: "bytes";
    }];
    readonly name: "unlockCallback";
    readonly outputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
export declare const PERMIT2_ABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint160";
        readonly name: "amount";
        readonly type: "uint160";
    }, {
        readonly internalType: "uint48";
        readonly name: "expiration";
        readonly type: "uint48";
    }, {
        readonly internalType: "uint48";
        readonly name: "nonce";
        readonly type: "uint48";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];
export declare const PERMIT_DETAILS: {
    name: string;
    type: string;
}[];
export declare const PERMIT_TYPES: {
    PermitSingle: {
        name: string;
        type: string;
    }[];
    PermitDetails: {
        name: string;
        type: string;
    }[];
};

import { Error as OpenAPIError, ErrorType as OpenAPIErrorType } from "./generated/coinbaseDeveloperPlatformAPIs.schemas.js";
export declare const HttpErrorType: {
    readonly unexpected_error: "unexpected_error";
    readonly unauthorized: "unauthorized";
    readonly not_found: "not_found";
    readonly bad_gateway: "bad_gateway";
    readonly service_unavailable: "service_unavailable";
    readonly unknown: "unknown";
};
export type HttpErrorType = (typeof HttpErrorType)[keyof typeof HttpErrorType];
/**
 * Extended error codes that include both OpenAPI errors and network errors
 */
export type APIErrorType = OpenAPIErrorType | HttpErrorType;
/**
 * Extended API error that encompasses both OpenAPI errors and other API-related errors
 */
export declare class APIError extends Error {
    statusCode: number;
    errorType: APIErrorType;
    errorMessage: string;
    correlationId?: string;
    errorLink?: string;
    /**
     * Constructor for the APIError class
     *
     * @param statusCode - The HTTP status code
     * @param errorType - The type of error
     * @param errorMessage - The error message
     * @param correlationId - The correlation ID
     * @param errorLink - URL to documentation about this error
     * @param cause - The cause of the error
     */
    constructor(statusCode: number, errorType: APIErrorType, errorMessage: string, correlationId?: string, errorLink?: string, cause?: Error);
    /**
     * Convert the error to a JSON object, excluding undefined properties
     *
     * @returns The error as a JSON object
     */
    toJSON(): {
        errorLink?: string | undefined;
        correlationId?: string | undefined;
        name: string;
        statusCode: number;
        errorType: APIErrorType;
        errorMessage: string;
    };
}
/**
 * Error thrown when an Axios request is made but no response is received
 */
export declare class UnknownApiError extends APIError {
    /**
     * Constructor for the UnknownApiError class
     *
     * @param errorType - The type of error
     * @param errorMessage - The error message
     * @param cause - The cause of the error
     */
    constructor(errorType: APIErrorType, errorMessage: string, cause?: Error);
}
/**
 * Error thrown when an error is not known
 */
export declare class UnknownError extends Error {
    /**
     * Constructor for the UnknownError class
     *
     * @param message - The error message
     * @param cause - The cause of the error
     */
    constructor(message: string, cause?: Error);
}
/**
 * Type guard to check if an object is an OpenAPIError
 *
 * @param obj - The object to check
 * @returns True if the object is an OpenAPIError
 */
export declare function isOpenAPIError(obj: unknown): obj is OpenAPIError;
//# sourceMappingURL=errors.d.ts.map
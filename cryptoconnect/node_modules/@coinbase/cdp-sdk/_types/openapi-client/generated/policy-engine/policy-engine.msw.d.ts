import { http } from "msw";
import type { EthValueCriterion, EvmAddressCriterion, EvmMessageCriterion, EvmNetworkCriterion, ListPolicies200, Policy, SolAddressCriterion } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
export declare const getListPoliciesResponseEthValueCriterionMock: (overrideResponse?: Partial<EthValueCriterion>) => EthValueCriterion;
export declare const getListPoliciesResponseEvmAddressCriterionMock: (overrideResponse?: Partial<EvmAddressCriterion>) => EvmAddressCriterion;
export declare const getListPoliciesResponseEvmNetworkCriterionMock: (overrideResponse?: Partial<EvmNetworkCriterion>) => EvmNetworkCriterion;
export declare const getListPoliciesResponseEvmMessageCriterionMock: (overrideResponse?: Partial<EvmMessageCriterion>) => EvmMessageCriterion;
export declare const getListPoliciesResponseSolAddressCriterionMock: (overrideResponse?: Partial<SolAddressCriterion>) => SolAddressCriterion;
export declare const getListPoliciesResponseMock: () => ListPolicies200;
export declare const getCreatePolicyResponseEthValueCriterionMock: (overrideResponse?: Partial<EthValueCriterion>) => EthValueCriterion;
export declare const getCreatePolicyResponseEvmAddressCriterionMock: (overrideResponse?: Partial<EvmAddressCriterion>) => EvmAddressCriterion;
export declare const getCreatePolicyResponseEvmNetworkCriterionMock: (overrideResponse?: Partial<EvmNetworkCriterion>) => EvmNetworkCriterion;
export declare const getCreatePolicyResponseEvmMessageCriterionMock: (overrideResponse?: Partial<EvmMessageCriterion>) => EvmMessageCriterion;
export declare const getCreatePolicyResponseSolAddressCriterionMock: (overrideResponse?: Partial<SolAddressCriterion>) => SolAddressCriterion;
export declare const getCreatePolicyResponseMock: (overrideResponse?: Partial<Policy>) => Policy;
export declare const getGetPolicyByIdResponseEthValueCriterionMock: (overrideResponse?: Partial<EthValueCriterion>) => EthValueCriterion;
export declare const getGetPolicyByIdResponseEvmAddressCriterionMock: (overrideResponse?: Partial<EvmAddressCriterion>) => EvmAddressCriterion;
export declare const getGetPolicyByIdResponseEvmNetworkCriterionMock: (overrideResponse?: Partial<EvmNetworkCriterion>) => EvmNetworkCriterion;
export declare const getGetPolicyByIdResponseEvmMessageCriterionMock: (overrideResponse?: Partial<EvmMessageCriterion>) => EvmMessageCriterion;
export declare const getGetPolicyByIdResponseSolAddressCriterionMock: (overrideResponse?: Partial<SolAddressCriterion>) => SolAddressCriterion;
export declare const getGetPolicyByIdResponseMock: (overrideResponse?: Partial<Policy>) => Policy;
export declare const getUpdatePolicyResponseEthValueCriterionMock: (overrideResponse?: Partial<EthValueCriterion>) => EthValueCriterion;
export declare const getUpdatePolicyResponseEvmAddressCriterionMock: (overrideResponse?: Partial<EvmAddressCriterion>) => EvmAddressCriterion;
export declare const getUpdatePolicyResponseEvmNetworkCriterionMock: (overrideResponse?: Partial<EvmNetworkCriterion>) => EvmNetworkCriterion;
export declare const getUpdatePolicyResponseEvmMessageCriterionMock: (overrideResponse?: Partial<EvmMessageCriterion>) => EvmMessageCriterion;
export declare const getUpdatePolicyResponseSolAddressCriterionMock: (overrideResponse?: Partial<SolAddressCriterion>) => SolAddressCriterion;
export declare const getUpdatePolicyResponseMock: (overrideResponse?: Partial<Policy>) => Policy;
export declare const getListPoliciesMockHandler: (overrideResponse?: ListPolicies200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListPolicies200> | ListPolicies200)) => import("msw").HttpHandler;
export declare const getCreatePolicyMockHandler: (overrideResponse?: Policy | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Policy> | Policy)) => import("msw").HttpHandler;
export declare const getGetPolicyByIdMockHandler: (overrideResponse?: Policy | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Policy> | Policy)) => import("msw").HttpHandler;
export declare const getDeletePolicyMockHandler: (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void) | undefined) => import("msw").HttpHandler;
export declare const getUpdatePolicyMockHandler: (overrideResponse?: Policy | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Policy> | Policy)) => import("msw").HttpHandler;
export declare const getPolicyEngineMock: () => import("msw").HttpHandler[];
//# sourceMappingURL=policy-engine.msw.d.ts.map
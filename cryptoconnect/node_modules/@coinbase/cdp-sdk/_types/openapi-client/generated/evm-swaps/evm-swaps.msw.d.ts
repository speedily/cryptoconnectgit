import { http } from "msw";
import type { CreateSwapQuoteResponse, CreateSwapQuoteResponseWrapper, GetSwapPriceResponse, GetSwapPriceResponseWrapper, SwapUnavailableResponse } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
export declare const getGetEvmSwapPriceResponseGetSwapPriceResponseMock: (overrideResponse?: Partial<GetSwapPriceResponse>) => GetSwapPriceResponse;
export declare const getGetEvmSwapPriceResponseSwapUnavailableResponseMock: (overrideResponse?: Partial<SwapUnavailableResponse>) => SwapUnavailableResponse;
export declare const getGetEvmSwapPriceResponseMock: () => GetSwapPriceResponseWrapper;
export declare const getCreateEvmSwapQuoteResponseCreateSwapQuoteResponseMock: (overrideResponse?: Partial<CreateSwapQuoteResponse>) => CreateSwapQuoteResponse;
export declare const getCreateEvmSwapQuoteResponseSwapUnavailableResponseMock: (overrideResponse?: Partial<SwapUnavailableResponse>) => SwapUnavailableResponse;
export declare const getCreateEvmSwapQuoteResponseMock: () => CreateSwapQuoteResponseWrapper;
export declare const getGetEvmSwapPriceMockHandler: (overrideResponse?: GetSwapPriceResponseWrapper | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetSwapPriceResponseWrapper> | GetSwapPriceResponseWrapper)) => import("msw").HttpHandler;
export declare const getCreateEvmSwapQuoteMockHandler: (overrideResponse?: CreateSwapQuoteResponseWrapper | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateSwapQuoteResponseWrapper> | CreateSwapQuoteResponseWrapper)) => import("msw").HttpHandler;
export declare const getEvmSwapsMock: () => import("msw").HttpHandler[];
//# sourceMappingURL=evm-swaps.msw.d.ts.map
/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import type { CreateEvmSmartAccountBody, EvmSmartAccount, EvmUserOperation, ListEvmSmartAccounts200, ListEvmSmartAccountsParams, PrepareUserOperationBody, SendUserOperationBody } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
import { cdpApiClient } from "../../cdpApiClient.js";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
/**
 * Lists the Smart Accounts belonging to the developer's CDP Project.
The response is paginated, and by default, returns 20 accounts per page.
 * @summary List Smart Accounts
 */
export declare const listEvmSmartAccounts: (params?: ListEvmSmartAccountsParams, options?: SecondParameter<typeof cdpApiClient>) => Promise<ListEvmSmartAccounts200>;
/**
 * Creates a new Smart Account.
 * @summary Create a Smart Account
 */
export declare const createEvmSmartAccount: (createEvmSmartAccountBody: CreateEvmSmartAccountBody, options?: SecondParameter<typeof cdpApiClient>) => Promise<EvmSmartAccount>;
/**
 * Gets a Smart Account by its name.
 * @summary Get a Smart Account by name
 */
export declare const getEvmSmartAccountByName: (name: string, options?: SecondParameter<typeof cdpApiClient>) => Promise<EvmSmartAccount>;
/**
 * Gets a Smart Account by its address.
 * @summary Get a Smart Account by address
 */
export declare const getEvmSmartAccount: (address: string, options?: SecondParameter<typeof cdpApiClient>) => Promise<EvmSmartAccount>;
/**
 * Prepares a new user operation on a Smart Account for a specific network.
 * @summary Prepare a user operation
 */
export declare const prepareUserOperation: (address: string, prepareUserOperationBody: PrepareUserOperationBody, options?: SecondParameter<typeof cdpApiClient>) => Promise<EvmUserOperation>;
/**
 * Gets a user operation by its hash.
 * @summary Get a user operation
 */
export declare const getUserOperation: (address: string, userOpHash: string, options?: SecondParameter<typeof cdpApiClient>) => Promise<EvmUserOperation>;
/**
 * Sends a user operation with a signature.
The payload to sign must be the `userOpHash` field of the user operation. This hash should be signed directly (not using `personal_sign` or EIP-191 message hashing).
The signature must be 65 bytes in length, consisting of: - 32 bytes for the `r` value - 32 bytes for the `s` value - 1 byte for the `v` value (must be 27 or 28)
If using the CDP Paymaster, the user operation must be signed and sent within 2 minutes of being prepared.
 * @summary Send a user operation
 */
export declare const sendUserOperation: (address: string, userOpHash: string, sendUserOperationBody: SendUserOperationBody, options?: SecondParameter<typeof cdpApiClient>) => Promise<EvmUserOperation>;
export type ListEvmSmartAccountsResult = NonNullable<Awaited<ReturnType<typeof listEvmSmartAccounts>>>;
export type CreateEvmSmartAccountResult = NonNullable<Awaited<ReturnType<typeof createEvmSmartAccount>>>;
export type GetEvmSmartAccountByNameResult = NonNullable<Awaited<ReturnType<typeof getEvmSmartAccountByName>>>;
export type GetEvmSmartAccountResult = NonNullable<Awaited<ReturnType<typeof getEvmSmartAccount>>>;
export type PrepareUserOperationResult = NonNullable<Awaited<ReturnType<typeof prepareUserOperation>>>;
export type GetUserOperationResult = NonNullable<Awaited<ReturnType<typeof getUserOperation>>>;
export type SendUserOperationResult = NonNullable<Awaited<ReturnType<typeof sendUserOperation>>>;
export {};
//# sourceMappingURL=evm-smart-accounts.d.ts.map
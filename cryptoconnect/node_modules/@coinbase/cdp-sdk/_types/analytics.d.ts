/**
 * The data in an error event
 */
type ErrorEventData = {
    /**
     * The API method where the error occurred, e.g. createAccount, getAccount
     */
    method: string;
    /**
     * The error message
     */
    message: string;
    /**
     * The error stack trace
     */
    stack?: string;
    /**
     * The name of the event. This should match the name in AEC
     */
    name: "error";
};
type EventData = ErrorEventData;
export declare const Analytics: {
    identifier: string;
    wrapClassWithErrorTracking: typeof wrapClassWithErrorTracking;
    wrapObjectMethodsWithErrorTracking: typeof wrapObjectMethodsWithErrorTracking;
    sendEvent: typeof sendEvent;
};
/**
 * Sends an analytics event to the default endpoint
 *
 * @param event - The event data containing event-specific fields
 * @returns Promise that resolves when the event is sent
 */
declare function sendEvent(event: EventData): Promise<void>;
/**
 * Wraps all methods of a class with error tracking.
 *
 * @param ClassToWrap - The class whose prototype methods should be wrapped.
 */
declare function wrapClassWithErrorTracking(ClassToWrap: any): void;
/**
 * Wraps all methods of an object with error tracking.
 *
 * @param object - The object whose methods should be wrapped.
 */
declare function wrapObjectMethodsWithErrorTracking(object: any): void;
export {};
//# sourceMappingURL=analytics.d.ts.map
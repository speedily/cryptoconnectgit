/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
export const getListEvmSmartAccountsResponseMock = () => ({
    ...{
        accounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
            owners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
            name: faker.helpers.arrayElement([
                faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
                undefined,
            ]),
        })),
    },
    ...{ nextPageToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) },
});
export const getCreateEvmSmartAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetEvmSmartAccountByNameResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetEvmSmartAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    ...overrideResponse,
});
export const getPrepareUserOperationResponseMock = (overrideResponse = {}) => ({
    network: faker.helpers.arrayElement(["base-sepolia", "base"]),
    userOpHash: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker.string.alpha(20),
        data: faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "failed",
    ]),
    transactionHash: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetUserOperationResponseMock = (overrideResponse = {}) => ({
    network: faker.helpers.arrayElement(["base-sepolia", "base"]),
    userOpHash: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker.string.alpha(20),
        data: faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "failed",
    ]),
    transactionHash: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    ...overrideResponse,
});
export const getSendUserOperationResponseMock = (overrideResponse = {}) => ({
    network: faker.helpers.arrayElement(["base-sepolia", "base"]),
    userOpHash: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker.string.alpha(20),
        data: faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "failed",
    ]),
    transactionHash: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    ...overrideResponse,
});
export const getListEvmSmartAccountsMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/smart-accounts", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getListEvmSmartAccountsResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getCreateEvmSmartAccountMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/smart-accounts", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getCreateEvmSmartAccountResponseMock()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetEvmSmartAccountByNameMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/smart-accounts/by-name/:name", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetEvmSmartAccountByNameResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetEvmSmartAccountMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/smart-accounts/:address", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetEvmSmartAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getPrepareUserOperationMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/smart-accounts/:address/user-operations", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getPrepareUserOperationResponseMock()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetUserOperationMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/smart-accounts/:address/user-operations/:userOpHash", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetUserOperationResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSendUserOperationMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/smart-accounts/:address/user-operations/:userOpHash/send", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSendUserOperationResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getEvmSmartAccountsMock = () => [
    getListEvmSmartAccountsMockHandler(),
    getCreateEvmSmartAccountMockHandler(),
    getGetEvmSmartAccountByNameMockHandler(),
    getGetEvmSmartAccountMockHandler(),
    getPrepareUserOperationMockHandler(),
    getGetUserOperationMockHandler(),
    getSendUserOperationMockHandler(),
];
//# sourceMappingURL=evm-smart-accounts.msw.js.map
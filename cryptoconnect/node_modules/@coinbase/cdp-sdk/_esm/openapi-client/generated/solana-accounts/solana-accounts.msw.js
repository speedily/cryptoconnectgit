/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
export const getListSolanaAccountsResponseMock = () => ({
    ...{
        accounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            address: faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
            name: faker.helpers.arrayElement([
                faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
                undefined,
            ]),
            policies: faker.helpers.arrayElement([
                Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
                undefined,
            ]),
        })),
    },
    ...{ nextPageToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) },
});
export const getCreateSolanaAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetSolanaAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getUpdateSolanaAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetSolanaAccountByNameResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getExportSolanaAccountResponseMock = (overrideResponse = {}) => ({ encryptedPrivateKey: faker.string.alpha(20), ...overrideResponse });
export const getExportSolanaAccountByNameResponseMock = (overrideResponse = {}) => ({
    encryptedPrivateKey: faker.string.alpha(20),
    ...overrideResponse,
});
export const getSignSolanaTransactionResponseMock = (overrideResponse = {}) => ({ signedTransaction: faker.string.alpha(20), ...overrideResponse });
export const getSignSolanaMessageResponseMock = (overrideResponse = {}) => ({ signature: faker.string.alpha(20), ...overrideResponse });
export const getListSolanaAccountsMockHandler = (overrideResponse) => {
    return http.get("*/v2/solana/accounts", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getListSolanaAccountsResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getCreateSolanaAccountMockHandler = (overrideResponse) => {
    return http.post("*/v2/solana/accounts", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getCreateSolanaAccountResponseMock()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetSolanaAccountMockHandler = (overrideResponse) => {
    return http.get("*/v2/solana/accounts/:address", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetSolanaAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getUpdateSolanaAccountMockHandler = (overrideResponse) => {
    return http.put("*/v2/solana/accounts/:address", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getUpdateSolanaAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetSolanaAccountByNameMockHandler = (overrideResponse) => {
    return http.get("*/v2/solana/accounts/by-name/:name", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetSolanaAccountByNameResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getExportSolanaAccountMockHandler = (overrideResponse) => {
    return http.post("*/v2/solana/accounts/:address/export", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getExportSolanaAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getExportSolanaAccountByNameMockHandler = (overrideResponse) => {
    return http.post("*/v2/solana/accounts/export/by-name/:name", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getExportSolanaAccountByNameResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSignSolanaTransactionMockHandler = (overrideResponse) => {
    return http.post("*/v2/solana/accounts/:address/sign/transaction", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSignSolanaTransactionResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSignSolanaMessageMockHandler = (overrideResponse) => {
    return http.post("*/v2/solana/accounts/:address/sign/message", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSignSolanaMessageResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSolanaAccountsMock = () => [
    getListSolanaAccountsMockHandler(),
    getCreateSolanaAccountMockHandler(),
    getGetSolanaAccountMockHandler(),
    getUpdateSolanaAccountMockHandler(),
    getGetSolanaAccountByNameMockHandler(),
    getExportSolanaAccountMockHandler(),
    getExportSolanaAccountByNameMockHandler(),
    getSignSolanaTransactionMockHandler(),
    getSignSolanaMessageMockHandler(),
];
//# sourceMappingURL=solana-accounts.msw.js.map
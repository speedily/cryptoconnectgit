/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
export const getListEvmAccountsResponseMock = () => ({
    ...{
        accounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
            name: faker.helpers.arrayElement([
                faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
                undefined,
            ]),
            policies: faker.helpers.arrayElement([
                Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
                undefined,
            ]),
        })),
    },
    ...{ nextPageToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) },
});
export const getCreateEvmAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetEvmAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getUpdateEvmAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getGetEvmAccountByNameResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getSendEvmTransactionResponseMock = (overrideResponse = {}) => ({ transactionHash: faker.string.alpha(20), ...overrideResponse });
export const getSignEvmTransactionResponseMock = (overrideResponse = {}) => ({ signedTransaction: faker.string.alpha(20), ...overrideResponse });
export const getSignEvmHashResponseMock = (overrideResponse = {}) => ({ signature: faker.string.alpha(20), ...overrideResponse });
export const getSignEvmMessageResponseMock = (overrideResponse = {}) => ({ signature: faker.string.alpha(20), ...overrideResponse });
export const getSignEvmTypedDataResponseMock = (overrideResponse = {}) => ({ signature: faker.string.alpha(20), ...overrideResponse });
export const getImportEvmAccountResponseMock = (overrideResponse = {}) => ({
    address: faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    name: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    ...overrideResponse,
});
export const getExportEvmAccountResponseMock = (overrideResponse = {}) => ({ encryptedPrivateKey: faker.string.alpha(20), ...overrideResponse });
export const getExportEvmAccountByNameResponseMock = (overrideResponse = {}) => ({
    encryptedPrivateKey: faker.string.alpha(20),
    ...overrideResponse,
});
export const getListEvmAccountsMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/accounts", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getListEvmAccountsResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getCreateEvmAccountMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getCreateEvmAccountResponseMock()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetEvmAccountMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/accounts/:address", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetEvmAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getUpdateEvmAccountMockHandler = (overrideResponse) => {
    return http.put("*/v2/evm/accounts/:address", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getUpdateEvmAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getGetEvmAccountByNameMockHandler = (overrideResponse) => {
    return http.get("*/v2/evm/accounts/by-name/:name", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getGetEvmAccountByNameResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSendEvmTransactionMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/:address/send/transaction", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSendEvmTransactionResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSignEvmTransactionMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/:address/sign/transaction", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSignEvmTransactionResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSignEvmHashMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/:address/sign", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSignEvmHashResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSignEvmMessageMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/:address/sign/message", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSignEvmMessageResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSignEvmTypedDataMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/:address/sign/typed-data", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSignEvmTypedDataResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getImportEvmAccountMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/import", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getImportEvmAccountResponseMock()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
export const getExportEvmAccountMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/:address/export", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getExportEvmAccountResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getExportEvmAccountByNameMockHandler = (overrideResponse) => {
    return http.post("*/v2/evm/accounts/export/by-name/:name", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getExportEvmAccountByNameResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getEvmAccountsMock = () => [
    getListEvmAccountsMockHandler(),
    getCreateEvmAccountMockHandler(),
    getGetEvmAccountMockHandler(),
    getUpdateEvmAccountMockHandler(),
    getGetEvmAccountByNameMockHandler(),
    getSendEvmTransactionMockHandler(),
    getSignEvmTransactionMockHandler(),
    getSignEvmHashMockHandler(),
    getSignEvmMessageMockHandler(),
    getSignEvmTypedDataMockHandler(),
    getImportEvmAccountMockHandler(),
    getExportEvmAccountMockHandler(),
    getExportEvmAccountByNameMockHandler(),
];
//# sourceMappingURL=evm-accounts.msw.js.map
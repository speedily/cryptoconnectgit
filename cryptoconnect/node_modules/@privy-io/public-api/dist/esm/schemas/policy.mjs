import{z as e}from"zod";import{InvalidInputError as t,PrivyErrorCode as r}from"@privy-io/api-base";const a=e.enum(["ALLOW","DENY"]);let i=e.union([e.string(),e.number(),e.boolean(),e.null()]),n=e.lazy((()=>e.union([i,e.array(n),e.record(n)])));const o=e.object({field_source:e.enum(["ethereum_transaction","ethereum_calldata"]),field:e.union([e.literal("to"),e.literal("value"),e.string()]),operator:e.union([e.literal("eq"),e.literal("gt"),e.literal("gte"),e.literal("lt"),e.literal("lte"),e.literal("in")]),value:e.union([e.string(),e.array(e.string())]),abi:n.optional()}).strict(),l=e.object({name:e.string().max(50,"Rule name must be fewer than 50 characters"),conditions:e.array(o),action:a}).strict();let s=e.union([e.literal("eth_sendTransaction"),e.literal("eth_signTransaction")]),c=e.object({method:s,rules:e.array(l)}).strict();const m=e.object({version:e.literal("1.0"),name:e.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:e.literal("ethereum"),method_rules:e.array(c),default_action:a}).strict(),u=m.extend({id:e.string(),created_at:e.number()}),d=e.object({policy_id:e.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t(e.message,r.INVALID_DATA)})),b=e.object({name:e.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),method_rules:e.array(c).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})}));export{o as Condition,a as PolicyAction,d as PolicyIdFromPath,u as PolicyResponse,m as PolicyWithoutValidation,l as Rule,b as UpdatePolicyInput};

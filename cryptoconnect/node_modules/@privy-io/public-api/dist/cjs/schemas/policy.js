"use strict";var e=require("zod"),t=require("@privy-io/api-base");const r=e.z.enum(["ALLOW","DENY"]);let i=e.z.union([e.z.string(),e.z.number(),e.z.boolean(),e.z.null()]),a=e.z.lazy((()=>e.z.union([i,e.z.array(a),e.z.record(a)])));const o=e.z.object({field_source:e.z.enum(["ethereum_transaction","ethereum_calldata"]),field:e.z.union([e.z.literal("to"),e.z.literal("value"),e.z.string()]),operator:e.z.union([e.z.literal("eq"),e.z.literal("gt"),e.z.literal("gte"),e.z.literal("lt"),e.z.literal("lte"),e.z.literal("in")]),value:e.z.union([e.z.string(),e.z.array(e.z.string())]),abi:a.optional()}).strict(),n=e.z.object({name:e.z.string().max(50,"Rule name must be fewer than 50 characters"),conditions:e.z.array(o),action:r}).strict();let l=e.z.union([e.z.literal("eth_sendTransaction"),e.z.literal("eth_signTransaction")]),s=e.z.object({method:l,rules:e.z.array(n)}).strict();const z=e.z.object({version:e.z.literal("1.0"),name:e.z.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:e.z.literal("ethereum"),method_rules:e.z.array(s),default_action:r}).strict(),c=z.extend({id:e.z.string(),created_at:e.z.number()}),u=e.z.object({policy_id:e.z.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),d=e.z.object({name:e.z.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),method_rules:e.z.array(s).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})}));exports.Condition=o,exports.PolicyAction=r,exports.PolicyIdFromPath=u,exports.PolicyResponse=c,exports.PolicyWithoutValidation=z,exports.Rule=n,exports.UpdatePolicyInput=d;

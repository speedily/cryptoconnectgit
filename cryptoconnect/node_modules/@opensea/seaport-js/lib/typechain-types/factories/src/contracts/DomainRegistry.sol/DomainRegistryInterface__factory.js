"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainRegistryInterface__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "string",
                name: "domain",
                type: "string",
            },
        ],
        name: "DomainAlreadyRegistered",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "tag",
                type: "bytes4",
            },
            {
                internalType: "uint256",
                name: "maxIndex",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "suppliedIndex",
                type: "uint256",
            },
        ],
        name: "DomainIndexOutOfRange",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "string",
                name: "domain",
                type: "string",
            },
            {
                indexed: false,
                internalType: "bytes4",
                name: "tag",
                type: "bytes4",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "DomainRegistered",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "tag",
                type: "bytes4",
            },
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "getDomain",
        outputs: [
            {
                internalType: "string",
                name: "domain",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "tag",
                type: "bytes4",
            },
        ],
        name: "getDomains",
        outputs: [
            {
                internalType: "string[]",
                name: "domains",
                type: "string[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "tag",
                type: "bytes4",
            },
        ],
        name: "getNumberOfDomains",
        outputs: [
            {
                internalType: "uint256",
                name: "totalDomains",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "domain",
                type: "string",
            },
        ],
        name: "setDomain",
        outputs: [
            {
                internalType: "bytes4",
                name: "tag",
                type: "bytes4",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class DomainRegistryInterface__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.DomainRegistryInterface__factory = DomainRegistryInterface__factory;
DomainRegistryInterface__factory.abi = _abi;
//# sourceMappingURL=DomainRegistryInterface__factory.js.map
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "xmtp.mls.message_contents.content_types";
function createBaseWalletSendCalls() {
    return { version: "", chainId: "", from: "", calls: [], capabilities: {} };
}
export const WalletSendCalls = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.chainId !== "") {
            writer.uint32(18).string(message.chainId);
        }
        if (message.from !== "") {
            writer.uint32(26).string(message.from);
        }
        for (const v of message.calls) {
            Call.encode(v, writer.uint32(34).fork()).ldelim();
        }
        Object.entries(message.capabilities).forEach(([key, value]) => {
            WalletSendCalls_CapabilitiesEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletSendCalls();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.string();
                    break;
                case 2:
                    message.chainId = reader.string();
                    break;
                case 3:
                    message.from = reader.string();
                    break;
                case 4:
                    message.calls.push(Call.decode(reader, reader.uint32()));
                    break;
                case 5:
                    const entry5 = WalletSendCalls_CapabilitiesEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.capabilities[entry5.key] = entry5.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? String(object.version) : "",
            chainId: isSet(object.chainId) ? String(object.chainId) : "",
            from: isSet(object.from) ? String(object.from) : "",
            calls: Array.isArray(object === null || object === void 0 ? void 0 : object.calls)
                ? object.calls.map((e) => Call.fromJSON(e))
                : [],
            capabilities: isObject(object.capabilities)
                ? Object.entries(object.capabilities).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.version !== undefined && (obj.version = message.version);
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.from !== undefined && (obj.from = message.from);
        if (message.calls) {
            obj.calls = message.calls.map((e) => (e ? Call.toJSON(e) : undefined));
        }
        else {
            obj.calls = [];
        }
        obj.capabilities = {};
        if (message.capabilities) {
            Object.entries(message.capabilities).forEach(([k, v]) => {
                obj.capabilities[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseWalletSendCalls();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "";
        message.chainId = (_b = object.chainId) !== null && _b !== void 0 ? _b : "";
        message.from = (_c = object.from) !== null && _c !== void 0 ? _c : "";
        message.calls = ((_d = object.calls) === null || _d === void 0 ? void 0 : _d.map((e) => Call.fromPartial(e))) || [];
        message.capabilities = Object.entries((_e = object.capabilities) !== null && _e !== void 0 ? _e : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseWalletSendCalls_CapabilitiesEntry() {
    return { key: "", value: "" };
}
export const WalletSendCalls_CapabilitiesEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletSendCalls_CapabilitiesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWalletSendCalls_CapabilitiesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCall() {
    return { to: "", data: "", value: "", gas: "", metadata: {} };
}
export const Call = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.to !== "") {
            writer.uint32(10).string(message.to);
        }
        if (message.data !== "") {
            writer.uint32(18).string(message.data);
        }
        if (message.value !== "") {
            writer.uint32(26).string(message.value);
        }
        if (message.gas !== "") {
            writer.uint32(34).string(message.gas);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            Call_MetadataEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCall();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.to = reader.string();
                    break;
                case 2:
                    message.data = reader.string();
                    break;
                case 3:
                    message.value = reader.string();
                    break;
                case 4:
                    message.gas = reader.string();
                    break;
                case 5:
                    const entry5 = Call_MetadataEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.metadata[entry5.key] = entry5.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            to: isSet(object.to) ? String(object.to) : "",
            data: isSet(object.data) ? String(object.data) : "",
            value: isSet(object.value) ? String(object.value) : "",
            gas: isSet(object.gas) ? String(object.gas) : "",
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.to !== undefined && (obj.to = message.to);
        message.data !== undefined && (obj.data = message.data);
        message.value !== undefined && (obj.value = message.value);
        message.gas !== undefined && (obj.gas = message.gas);
        obj.metadata = {};
        if (message.metadata) {
            Object.entries(message.metadata).forEach(([k, v]) => {
                obj.metadata[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCall();
        message.to = (_a = object.to) !== null && _a !== void 0 ? _a : "";
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : "";
        message.value = (_c = object.value) !== null && _c !== void 0 ? _c : "";
        message.gas = (_d = object.gas) !== null && _d !== void 0 ? _d : "";
        message.metadata = Object.entries((_e = object.metadata) !== null && _e !== void 0 ? _e : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseCall_MetadataEntry() {
    return { key: "", value: "" };
}
export const Call_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCall_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCall_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=wallet_send_calls.pb.js.map
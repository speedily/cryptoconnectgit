/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "xmtp.device_sync.consent_backup";
/** Definitions for backups */
/** Consent record type */
export var ConsentTypeSave;
(function (ConsentTypeSave) {
    ConsentTypeSave[ConsentTypeSave["CONSENT_TYPE_SAVE_UNSPECIFIED"] = 0] = "CONSENT_TYPE_SAVE_UNSPECIFIED";
    ConsentTypeSave[ConsentTypeSave["CONSENT_TYPE_SAVE_CONVERSATION_ID"] = 1] = "CONSENT_TYPE_SAVE_CONVERSATION_ID";
    ConsentTypeSave[ConsentTypeSave["CONSENT_TYPE_SAVE_INBOX_ID"] = 2] = "CONSENT_TYPE_SAVE_INBOX_ID";
    /** @deprecated */
    ConsentTypeSave[ConsentTypeSave["CONSENT_TYPE_SAVE_ADDRESS"] = 3] = "CONSENT_TYPE_SAVE_ADDRESS";
    ConsentTypeSave[ConsentTypeSave["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConsentTypeSave || (ConsentTypeSave = {}));
export function consentTypeSaveFromJSON(object) {
    switch (object) {
        case 0:
        case "CONSENT_TYPE_SAVE_UNSPECIFIED":
            return ConsentTypeSave.CONSENT_TYPE_SAVE_UNSPECIFIED;
        case 1:
        case "CONSENT_TYPE_SAVE_CONVERSATION_ID":
            return ConsentTypeSave.CONSENT_TYPE_SAVE_CONVERSATION_ID;
        case 2:
        case "CONSENT_TYPE_SAVE_INBOX_ID":
            return ConsentTypeSave.CONSENT_TYPE_SAVE_INBOX_ID;
        case 3:
        case "CONSENT_TYPE_SAVE_ADDRESS":
            return ConsentTypeSave.CONSENT_TYPE_SAVE_ADDRESS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ConsentTypeSave.UNRECOGNIZED;
    }
}
export function consentTypeSaveToJSON(object) {
    switch (object) {
        case ConsentTypeSave.CONSENT_TYPE_SAVE_UNSPECIFIED:
            return "CONSENT_TYPE_SAVE_UNSPECIFIED";
        case ConsentTypeSave.CONSENT_TYPE_SAVE_CONVERSATION_ID:
            return "CONSENT_TYPE_SAVE_CONVERSATION_ID";
        case ConsentTypeSave.CONSENT_TYPE_SAVE_INBOX_ID:
            return "CONSENT_TYPE_SAVE_INBOX_ID";
        case ConsentTypeSave.CONSENT_TYPE_SAVE_ADDRESS:
            return "CONSENT_TYPE_SAVE_ADDRESS";
        case ConsentTypeSave.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
/** Consent record state */
export var ConsentStateSave;
(function (ConsentStateSave) {
    ConsentStateSave[ConsentStateSave["CONSENT_STATE_SAVE_UNSPECIFIED"] = 0] = "CONSENT_STATE_SAVE_UNSPECIFIED";
    ConsentStateSave[ConsentStateSave["CONSENT_STATE_SAVE_UNKNOWN"] = 1] = "CONSENT_STATE_SAVE_UNKNOWN";
    ConsentStateSave[ConsentStateSave["CONSENT_STATE_SAVE_ALLOWED"] = 2] = "CONSENT_STATE_SAVE_ALLOWED";
    ConsentStateSave[ConsentStateSave["CONSENT_STATE_SAVE_DENIED"] = 3] = "CONSENT_STATE_SAVE_DENIED";
    ConsentStateSave[ConsentStateSave["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConsentStateSave || (ConsentStateSave = {}));
export function consentStateSaveFromJSON(object) {
    switch (object) {
        case 0:
        case "CONSENT_STATE_SAVE_UNSPECIFIED":
            return ConsentStateSave.CONSENT_STATE_SAVE_UNSPECIFIED;
        case 1:
        case "CONSENT_STATE_SAVE_UNKNOWN":
            return ConsentStateSave.CONSENT_STATE_SAVE_UNKNOWN;
        case 2:
        case "CONSENT_STATE_SAVE_ALLOWED":
            return ConsentStateSave.CONSENT_STATE_SAVE_ALLOWED;
        case 3:
        case "CONSENT_STATE_SAVE_DENIED":
            return ConsentStateSave.CONSENT_STATE_SAVE_DENIED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ConsentStateSave.UNRECOGNIZED;
    }
}
export function consentStateSaveToJSON(object) {
    switch (object) {
        case ConsentStateSave.CONSENT_STATE_SAVE_UNSPECIFIED:
            return "CONSENT_STATE_SAVE_UNSPECIFIED";
        case ConsentStateSave.CONSENT_STATE_SAVE_UNKNOWN:
            return "CONSENT_STATE_SAVE_UNKNOWN";
        case ConsentStateSave.CONSENT_STATE_SAVE_ALLOWED:
            return "CONSENT_STATE_SAVE_ALLOWED";
        case ConsentStateSave.CONSENT_STATE_SAVE_DENIED:
            return "CONSENT_STATE_SAVE_DENIED";
        case ConsentStateSave.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseConsentSave() {
    return { entityType: 0, state: 0, entity: "", consentedAtNs: Long.ZERO };
}
export const ConsentSave = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.entityType !== 0) {
            writer.uint32(8).int32(message.entityType);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        if (message.entity !== "") {
            writer.uint32(26).string(message.entity);
        }
        if (!message.consentedAtNs.isZero()) {
            writer.uint32(32).int64(message.consentedAtNs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConsentSave();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.entityType = reader.int32();
                    break;
                case 2:
                    message.state = reader.int32();
                    break;
                case 3:
                    message.entity = reader.string();
                    break;
                case 4:
                    message.consentedAtNs = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            entityType: isSet(object.entityType)
                ? consentTypeSaveFromJSON(object.entityType)
                : 0,
            state: isSet(object.state) ? consentStateSaveFromJSON(object.state) : 0,
            entity: isSet(object.entity) ? String(object.entity) : "",
            consentedAtNs: isSet(object.consentedAtNs)
                ? Long.fromValue(object.consentedAtNs)
                : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.entityType !== undefined &&
            (obj.entityType = consentTypeSaveToJSON(message.entityType));
        message.state !== undefined &&
            (obj.state = consentStateSaveToJSON(message.state));
        message.entity !== undefined && (obj.entity = message.entity);
        message.consentedAtNs !== undefined &&
            (obj.consentedAtNs = (message.consentedAtNs || Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseConsentSave();
        message.entityType = (_a = object.entityType) !== null && _a !== void 0 ? _a : 0;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : 0;
        message.entity = (_c = object.entity) !== null && _c !== void 0 ? _c : "";
        message.consentedAtNs =
            object.consentedAtNs !== undefined && object.consentedAtNs !== null
                ? Long.fromValue(object.consentedAtNs)
                : Long.ZERO;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=consent_backup.pb.js.map
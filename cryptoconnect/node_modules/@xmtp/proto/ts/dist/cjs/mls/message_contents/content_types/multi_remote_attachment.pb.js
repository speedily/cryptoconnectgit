"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteAttachmentInfo = exports.MultiRemoteAttachment = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "xmtp.mls.message_contents.content_types";
function createBaseMultiRemoteAttachment() {
    return { attachments: [] };
}
exports.MultiRemoteAttachment = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.attachments) {
            exports.RemoteAttachmentInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiRemoteAttachment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.attachments.push(exports.RemoteAttachmentInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            attachments: Array.isArray(object === null || object === void 0 ? void 0 : object.attachments)
                ? object.attachments.map((e) => exports.RemoteAttachmentInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.attachments) {
            obj.attachments = message.attachments.map((e) => e ? exports.RemoteAttachmentInfo.toJSON(e) : undefined);
        }
        else {
            obj.attachments = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMultiRemoteAttachment();
        message.attachments =
            ((_a = object.attachments) === null || _a === void 0 ? void 0 : _a.map((e) => exports.RemoteAttachmentInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRemoteAttachmentInfo() {
    return {
        contentDigest: "",
        secret: new Uint8Array(),
        nonce: new Uint8Array(),
        salt: new Uint8Array(),
        scheme: "",
        url: "",
        contentLength: undefined,
        filename: undefined,
    };
}
exports.RemoteAttachmentInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contentDigest !== "") {
            writer.uint32(10).string(message.contentDigest);
        }
        if (message.secret.length !== 0) {
            writer.uint32(18).bytes(message.secret);
        }
        if (message.nonce.length !== 0) {
            writer.uint32(26).bytes(message.nonce);
        }
        if (message.salt.length !== 0) {
            writer.uint32(34).bytes(message.salt);
        }
        if (message.scheme !== "") {
            writer.uint32(42).string(message.scheme);
        }
        if (message.url !== "") {
            writer.uint32(50).string(message.url);
        }
        if (message.contentLength !== undefined) {
            writer.uint32(56).uint32(message.contentLength);
        }
        if (message.filename !== undefined) {
            writer.uint32(66).string(message.filename);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteAttachmentInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contentDigest = reader.string();
                    break;
                case 2:
                    message.secret = reader.bytes();
                    break;
                case 3:
                    message.nonce = reader.bytes();
                    break;
                case 4:
                    message.salt = reader.bytes();
                    break;
                case 5:
                    message.scheme = reader.string();
                    break;
                case 6:
                    message.url = reader.string();
                    break;
                case 7:
                    message.contentLength = reader.uint32();
                    break;
                case 8:
                    message.filename = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contentDigest: isSet(object.contentDigest)
                ? String(object.contentDigest)
                : "",
            secret: isSet(object.secret)
                ? bytesFromBase64(object.secret)
                : new Uint8Array(),
            nonce: isSet(object.nonce)
                ? bytesFromBase64(object.nonce)
                : new Uint8Array(),
            salt: isSet(object.salt)
                ? bytesFromBase64(object.salt)
                : new Uint8Array(),
            scheme: isSet(object.scheme) ? String(object.scheme) : "",
            url: isSet(object.url) ? String(object.url) : "",
            contentLength: isSet(object.contentLength)
                ? Number(object.contentLength)
                : undefined,
            filename: isSet(object.filename) ? String(object.filename) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.contentDigest !== undefined &&
            (obj.contentDigest = message.contentDigest);
        message.secret !== undefined &&
            (obj.secret = base64FromBytes(message.secret !== undefined ? message.secret : new Uint8Array()));
        message.nonce !== undefined &&
            (obj.nonce = base64FromBytes(message.nonce !== undefined ? message.nonce : new Uint8Array()));
        message.salt !== undefined &&
            (obj.salt = base64FromBytes(message.salt !== undefined ? message.salt : new Uint8Array()));
        message.scheme !== undefined && (obj.scheme = message.scheme);
        message.url !== undefined && (obj.url = message.url);
        message.contentLength !== undefined &&
            (obj.contentLength = Math.round(message.contentLength));
        message.filename !== undefined && (obj.filename = message.filename);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseRemoteAttachmentInfo();
        message.contentDigest = (_a = object.contentDigest) !== null && _a !== void 0 ? _a : "";
        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.nonce = (_c = object.nonce) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.salt = (_d = object.salt) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.scheme = (_e = object.scheme) !== null && _e !== void 0 ? _e : "";
        message.url = (_f = object.url) !== null && _f !== void 0 ? _f : "";
        message.contentLength = (_g = object.contentLength) !== null && _g !== void 0 ? _g : undefined;
        message.filename = (_h = object.filename) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=multi_remote_attachment.pb.js.map
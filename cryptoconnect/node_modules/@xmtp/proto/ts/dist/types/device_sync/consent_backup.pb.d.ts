import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.device_sync.consent_backup";
/** Definitions for backups */
/** Consent record type */
export declare enum ConsentTypeSave {
    CONSENT_TYPE_SAVE_UNSPECIFIED = 0,
    CONSENT_TYPE_SAVE_CONVERSATION_ID = 1,
    CONSENT_TYPE_SAVE_INBOX_ID = 2,
    /** @deprecated */
    CONSENT_TYPE_SAVE_ADDRESS = 3,
    UNRECOGNIZED = -1
}
export declare function consentTypeSaveFromJSON(object: any): ConsentTypeSave;
export declare function consentTypeSaveToJSON(object: ConsentTypeSave): string;
/** Consent record state */
export declare enum ConsentStateSave {
    CONSENT_STATE_SAVE_UNSPECIFIED = 0,
    CONSENT_STATE_SAVE_UNKNOWN = 1,
    CONSENT_STATE_SAVE_ALLOWED = 2,
    CONSENT_STATE_SAVE_DENIED = 3,
    UNRECOGNIZED = -1
}
export declare function consentStateSaveFromJSON(object: any): ConsentStateSave;
export declare function consentStateSaveToJSON(object: ConsentStateSave): string;
/** Proto representation of a consent record save */
export interface ConsentSave {
    entityType: ConsentTypeSave;
    state: ConsentStateSave;
    entity: string;
    consentedAtNs: Long;
}
export declare const ConsentSave: {
    encode(message: ConsentSave, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ConsentSave;
    fromJSON(object: any): ConsentSave;
    toJSON(message: ConsentSave): unknown;
    fromPartial<I extends {
        entityType?: ConsentTypeSave | undefined;
        state?: ConsentStateSave | undefined;
        entity?: string | undefined;
        consentedAtNs?: string | number | Long | undefined;
    } & {
        entityType?: ConsentTypeSave | undefined;
        state?: ConsentStateSave | undefined;
        entity?: string | undefined;
        consentedAtNs?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["consentedAtNs"], keyof Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof ConsentSave>]: never; }>(object: I): ConsentSave;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};

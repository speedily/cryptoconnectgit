import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.mls.message_contents";
/** Encryption algorithms for the Welcome Wrapper */
/** Describes the algorithm used to encrypt the Welcome Wrapper */
export declare enum WelcomeWrapperAlgorithm {
    WELCOME_WRAPPER_ALGORITHM_UNSPECIFIED = 0,
    WELCOME_WRAPPER_ALGORITHM_CURVE25519 = 1,
    WELCOME_WRAPPER_ALGORITHM_XWING_MLKEM_768_DRAFT_6 = 2,
    UNRECOGNIZED = -1
}
export declare function welcomeWrapperAlgorithmFromJSON(object: any): WelcomeWrapperAlgorithm;
export declare function welcomeWrapperAlgorithmToJSON(object: WelcomeWrapperAlgorithm): string;
/** The KeyPackageExtension that stores the PubKey and the WelcomeWrapperEncryption */
export interface WelcomeWrapperEncryption {
    pubKey: Uint8Array;
    algorithm: WelcomeWrapperAlgorithm;
}
export declare const WelcomeWrapperEncryption: {
    encode(message: WelcomeWrapperEncryption, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): WelcomeWrapperEncryption;
    fromJSON(object: any): WelcomeWrapperEncryption;
    toJSON(message: WelcomeWrapperEncryption): unknown;
    fromPartial<I extends {
        pubKey?: Uint8Array | undefined;
        algorithm?: WelcomeWrapperAlgorithm | undefined;
    } & {
        pubKey?: Uint8Array | undefined;
        algorithm?: WelcomeWrapperAlgorithm | undefined;
    } & { [K in Exclude<keyof I, keyof WelcomeWrapperEncryption>]: never; }>(object: I): WelcomeWrapperEncryption;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};

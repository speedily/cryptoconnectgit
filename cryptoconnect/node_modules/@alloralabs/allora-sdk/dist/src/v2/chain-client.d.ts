import { QueryServiceClientImpl as EmissionsQueryClient } from "./types/generated/emissions/v7/query";
import { QueryClientImpl as BankQueryClient } from "./types/generated/cosmos/bank/v1beta1/query";
import { QueryClientImpl as AuthQueryClient } from "./types/generated/cosmos/auth/v1beta1/query";
import { QueryClientImpl as AuthzQueryClient } from "./types/generated/cosmos/authz/v1beta1/query";
import { QueryClientImpl as CircuitQueryClient } from "./types/generated/cosmos/circuit/v1/query";
import { QueryClientImpl as ConsensusQueryClient } from "./types/generated/cosmos/consensus/v1/query";
import { QueryClientImpl as DistributionQueryClient } from "./types/generated/cosmos/distribution/v1beta1/query";
import { QueryClientImpl as EvidenceQueryClient } from "./types/generated/cosmos/evidence/v1beta1/query";
import { QueryClientImpl as FeeGrantQueryClient } from "./types/generated/cosmos/feegrant/v1beta1/query";
import { QueryClientImpl as GovQueryClient } from "./types/generated/cosmos/gov/v1/query";
import { QueryClientImpl as MintQueryClient } from "./types/generated/cosmos/mint/v1beta1/query";
import { QueryClientImpl as ParamsQueryClient } from "./types/generated/cosmos/params/v1beta1/query";
import { QueryClientImpl as SlashingQueryClient } from "./types/generated/cosmos/slashing/v1beta1/query";
import { QueryClientImpl as StakingQueryClient } from "./types/generated/cosmos/staking/v1beta1/query";
import { QueryClientImpl as UpgradeQueryClient } from "./types/generated/cosmos/upgrade/v1beta1/query";
import { MsgServiceClientImpl as EmissionsMsgClient } from "./types/generated/emissions/v7/tx";
import { MsgClientImpl as BankMsgClient } from "./types/generated/cosmos/bank/v1beta1/tx";
import { MsgClientImpl as AuthMsgClient } from "./types/generated/cosmos/auth/v1beta1/tx";
import { MsgClientImpl as AuthzMsgClient } from "./types/generated/cosmos/authz/v1beta1/tx";
import { MsgClientImpl as CircuitMsgClient } from "./types/generated/cosmos/circuit/v1/tx";
import { MsgClientImpl as ConsensusMsgClient } from "./types/generated/cosmos/consensus/v1/tx";
import { MsgClientImpl as DistributionMsgClient } from "./types/generated/cosmos/distribution/v1beta1/tx";
import { MsgClientImpl as EvidenceMsgClient } from "./types/generated/cosmos/evidence/v1beta1/tx";
import { MsgClientImpl as FeeGrantMsgClient } from "./types/generated/cosmos/feegrant/v1beta1/tx";
import { MsgClientImpl as GovMsgClient } from "./types/generated/cosmos/gov/v1/tx";
import { MsgClientImpl as MintMsgClient } from "./types/generated/cosmos/mint/v1beta1/tx";
import { MsgClientImpl as SlashingMsgClient } from "./types/generated/cosmos/slashing/v1beta1/tx";
import { MsgClientImpl as StakingMsgClient } from "./types/generated/cosmos/staking/v1beta1/tx";
import { MsgClientImpl as UpgradeMsgClient } from "./types/generated/cosmos/upgrade/v1beta1/tx";
import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
type QuerySubcommands = {
    emissions: EmissionsQueryClient;
    bank: BankQueryClient;
    auth: AuthQueryClient;
    authz: AuthzQueryClient;
    circuit: CircuitQueryClient;
    consensus: ConsensusQueryClient;
    distribution: DistributionQueryClient;
    evidence: EvidenceQueryClient;
    feegrant: FeeGrantQueryClient;
    gov: GovQueryClient;
    mint: MintQueryClient;
    params: ParamsQueryClient;
    slashing: SlashingQueryClient;
    staking: StakingQueryClient;
    upgrade: UpgradeQueryClient;
};
type TxSubcommands = {
    emissions: EmissionsMsgClient;
    bank: BankMsgClient;
    auth: AuthMsgClient;
    authz: AuthzMsgClient;
    circuit: CircuitMsgClient;
    consensus: ConsensusMsgClient;
    distribution: DistributionMsgClient;
    evidence: EvidenceMsgClient;
    feegrant: FeeGrantMsgClient;
    gov: GovMsgClient;
    mint: MintMsgClient;
    slashing: SlashingMsgClient;
    staking: StakingMsgClient;
    upgrade: UpgradeMsgClient;
};
export declare class AlloraChainClient {
    private rpcUrl;
    private signingClient;
    private signer;
    query: QuerySubcommands;
    tx: TxSubcommands;
    constructor(rpcUrl: string);
    static create(rpcUrl: string): Promise<AlloraChainClient>;
    private initialize;
    connectSigner(signer: DirectSecp256k1HdWallet): Promise<void>;
}
export {};
//# sourceMappingURL=chain-client.d.ts.map
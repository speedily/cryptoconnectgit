import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "../v1beta1/types";
export declare const protobufPackage = "mint.v2";
/** UpdateParams allows an update to the minting parameters of the module. */
export interface UpdateParamsRequest {
    sender: string;
    /**
     * params defines the x/mint parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params?: Params | undefined;
    /** allow updating params to also force a recalculation of the target emission */
    recalculateTargetEmission: boolean;
    /** blocksPerMonth is used/updateable by both the mint and emissions module. */
    blocksPerMonth: string;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface UpdateParamsResponse {
}
/**
 * Force a recalculation of the target emission right now.
 * This indirectly controls recalculating the inflation rate for the network
 * and the stakers APY %.
 */
export interface RecalculateTargetEmissionRequest {
    sender: string;
}
/** response from recalculating the target emission */
export interface RecalculateTargetEmissionResponse {
}
export declare const UpdateParamsRequest: MessageFns<UpdateParamsRequest>;
export declare const UpdateParamsResponse: MessageFns<UpdateParamsResponse>;
export declare const RecalculateTargetEmissionRequest: MessageFns<RecalculateTargetEmissionRequest>;
export declare const RecalculateTargetEmissionResponse: MessageFns<RecalculateTargetEmissionResponse>;
/** Msg defines the x/mint Msg service. */
export interface MsgService {
    /** update params. Only callable by someone on the emissions module whitelist */
    UpdateParams(request: UpdateParamsRequest): Promise<UpdateParamsResponse>;
    /**
     * force a target emission calculation right now. Otherwise waits until the
     * end of params.BlocksPerMonth
     */
    RecalculateTargetEmission(request: RecalculateTargetEmissionRequest): Promise<RecalculateTargetEmissionResponse>;
}
export declare const MsgServiceServiceName = "mint.v2.MsgService";
export declare class MsgServiceClientImpl implements MsgService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    UpdateParams(request: UpdateParamsRequest): Promise<UpdateParamsResponse>;
    RecalculateTargetEmission(request: RecalculateTargetEmissionRequest): Promise<RecalculateTargetEmissionResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=tx.d.ts.map
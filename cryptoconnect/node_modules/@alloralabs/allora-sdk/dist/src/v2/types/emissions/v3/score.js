"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v3/score.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scores = exports.Score = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "emissions.v3";
function createBaseScore() {
    return { topicId: "0", blockHeight: "0", address: "", score: "" };
}
exports.Score = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.address !== "") {
            writer.uint32(26).string(message.address);
        }
        if (message.score !== "") {
            writer.uint32(34).string(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.score = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            score: isSet(object.score) ? globalThis.String(object.score) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.score !== "") {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return exports.Score.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseScore();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.address = (_c = object.address) !== null && _c !== void 0 ? _c : "";
        message.score = (_d = object.score) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseScores() {
    return { scores: [] };
}
exports.Scores = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.scores) {
            exports.Score.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScores();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores.push(exports.Score.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => exports.Score.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.scores) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scores = message.scores.map((e) => exports.Score.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Scores.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseScores();
        message.scores = ((_a = object.scores) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Score.fromPartial(e))) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

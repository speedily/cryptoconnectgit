"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v1/node.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.OffchainNode = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "emissions.v1";
function createBaseOffchainNode() {
    return { libP2pKey: "", multiAddress: "", owner: "", nodeAddress: "", nodeId: "" };
}
exports.OffchainNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.libP2pKey !== "") {
            writer.uint32(10).string(message.libP2pKey);
        }
        if (message.multiAddress !== "") {
            writer.uint32(18).string(message.multiAddress);
        }
        if (message.owner !== "") {
            writer.uint32(26).string(message.owner);
        }
        if (message.nodeAddress !== "") {
            writer.uint32(34).string(message.nodeAddress);
        }
        if (message.nodeId !== "") {
            writer.uint32(42).string(message.nodeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOffchainNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.libP2pKey = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.multiAddress = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.nodeAddress = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.nodeId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            libP2pKey: isSet(object.libP2pKey) ? globalThis.String(object.libP2pKey) : "",
            multiAddress: isSet(object.multiAddress) ? globalThis.String(object.multiAddress) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            nodeAddress: isSet(object.nodeAddress) ? globalThis.String(object.nodeAddress) : "",
            nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.libP2pKey !== "") {
            obj.libP2pKey = message.libP2pKey;
        }
        if (message.multiAddress !== "") {
            obj.multiAddress = message.multiAddress;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.nodeAddress !== "") {
            obj.nodeAddress = message.nodeAddress;
        }
        if (message.nodeId !== "") {
            obj.nodeId = message.nodeId;
        }
        return obj;
    },
    create(base) {
        return exports.OffchainNode.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseOffchainNode();
        message.libP2pKey = (_a = object.libP2pKey) !== null && _a !== void 0 ? _a : "";
        message.multiAddress = (_b = object.multiAddress) !== null && _b !== void 0 ? _b : "";
        message.owner = (_c = object.owner) !== null && _c !== void 0 ? _c : "";
        message.nodeAddress = (_d = object.nodeAddress) !== null && _d !== void 0 ? _d : "";
        message.nodeId = (_e = object.nodeId) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v7/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddToGlobalWorkerWhitelistResponse = exports.AddToGlobalWorkerWhitelistRequest = exports.AddToTopicCreatorWhitelistResponse = exports.AddToTopicCreatorWhitelistRequest = exports.RemoveFromGlobalWhitelistResponse = exports.RemoveFromGlobalWhitelistRequest = exports.AddToGlobalWhitelistResponse = exports.AddToGlobalWhitelistRequest = exports.DisableTopicReputerWhitelistResponse = exports.DisableTopicReputerWhitelistRequest = exports.EnableTopicReputerWhitelistResponse = exports.EnableTopicReputerWhitelistRequest = exports.DisableTopicWorkerWhitelistResponse = exports.DisableTopicWorkerWhitelistRequest = exports.EnableTopicWorkerWhitelistResponse = exports.EnableTopicWorkerWhitelistRequest = exports.RemoveFromWhitelistAdminResponse = exports.RemoveFromWhitelistAdminRequest = exports.AddToWhitelistAdminResponse = exports.AddToWhitelistAdminRequest = exports.FundTopicResponse = exports.FundTopicRequest = exports.RewardDelegateStakeResponse = exports.RewardDelegateStakeRequest = exports.CancelRemoveDelegateStakeResponse = exports.CancelRemoveDelegateStakeRequest = exports.RemoveDelegateStakeResponse = exports.RemoveDelegateStakeRequest = exports.DelegateStakeResponse = exports.DelegateStakeRequest = exports.CancelRemoveStakeResponse = exports.CancelRemoveStakeRequest = exports.RemoveStakeResponse = exports.RemoveStakeRequest = exports.AddStakeResponse = exports.AddStakeRequest = exports.RemoveRegistrationResponse = exports.RemoveRegistrationRequest = exports.RegisterResponse = exports.RegisterRequest = exports.InsertWorkerPayloadResponse = exports.InsertWorkerPayloadRequest = exports.InsertReputerPayloadResponse = exports.InsertReputerPayloadRequest = exports.CreateNewTopicResponse = exports.CreateNewTopicRequest = exports.UpdateParamsResponse = exports.UpdateParamsRequest = exports.OptionalParams = exports.protobufPackage = void 0;
exports.MsgServiceClientImpl = exports.MsgServiceServiceName = exports.RemoveFromTopicReputerWhitelistResponse = exports.RemoveFromTopicReputerWhitelistRequest = exports.AddToTopicReputerWhitelistResponse = exports.AddToTopicReputerWhitelistRequest = exports.RemoveFromTopicWorkerWhitelistResponse = exports.RemoveFromTopicWorkerWhitelistRequest = exports.AddToTopicWorkerWhitelistResponse = exports.AddToTopicWorkerWhitelistRequest = exports.RemoveFromTopicCreatorWhitelistResponse = exports.RemoveFromTopicCreatorWhitelistRequest = exports.BulkRemoveFromTopicReputerWhitelistResponse = exports.BulkRemoveFromTopicReputerWhitelistRequest = exports.BulkAddToTopicReputerWhitelistResponse = exports.BulkAddToTopicReputerWhitelistRequest = exports.BulkRemoveFromTopicWorkerWhitelistResponse = exports.BulkRemoveFromTopicWorkerWhitelistRequest = exports.BulkAddToTopicWorkerWhitelistResponse = exports.BulkAddToTopicWorkerWhitelistRequest = exports.BulkRemoveFromGlobalReputerWhitelistResponse = exports.BulkRemoveFromGlobalReputerWhitelistRequest = exports.BulkAddToGlobalReputerWhitelistResponse = exports.BulkAddToGlobalReputerWhitelistRequest = exports.BulkRemoveFromGlobalWorkerWhitelistResponse = exports.BulkRemoveFromGlobalWorkerWhitelistRequest = exports.BulkAddToGlobalWorkerWhitelistResponse = exports.BulkAddToGlobalWorkerWhitelistRequest = exports.RemoveFromGlobalAdminWhitelistResponse = exports.RemoveFromGlobalAdminWhitelistRequest = exports.AddToGlobalAdminWhitelistResponse = exports.AddToGlobalAdminWhitelistRequest = exports.RemoveFromGlobalReputerWhitelistResponse = exports.RemoveFromGlobalReputerWhitelistRequest = exports.AddToGlobalReputerWhitelistResponse = exports.AddToGlobalReputerWhitelistRequest = exports.RemoveFromGlobalWorkerWhitelistResponse = exports.RemoveFromGlobalWorkerWhitelistRequest = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const reputer_1 = require("../v3/reputer");
const worker_1 = require("../v3/worker");
exports.protobufPackage = "emissions.v7";
function createBaseOptionalParams() {
    return {
        version: [],
        maxSerializedMsgLength: [],
        minTopicWeight: [],
        requiredMinimumStake: [],
        removeStakeDelayWindow: [],
        minEpochLength: [],
        betaEntropy: [],
        learningRate: [],
        maxGradientThreshold: [],
        minStakeFraction: [],
        maxUnfulfilledWorkerRequests: [],
        maxUnfulfilledReputerRequests: [],
        topicRewardStakeImportance: [],
        topicRewardFeeRevenueImportance: [],
        topicRewardAlpha: [],
        taskRewardAlpha: [],
        validatorsVsAlloraPercentReward: [],
        maxSamplesToScaleScores: [],
        maxTopInferersToReward: [],
        maxTopForecastersToReward: [],
        maxTopReputersToReward: [],
        createTopicFee: [],
        gradientDescentMaxIters: [],
        registrationFee: [],
        defaultPageLimit: [],
        maxPageLimit: [],
        minEpochLengthRecordLimit: [],
        blocksPerMonth: [],
        pRewardInference: [],
        pRewardForecast: [],
        pRewardReputer: [],
        cRewardInference: [],
        cRewardForecast: [],
        cNorm: [],
        epsilonReputer: [],
        halfMaxProcessStakeRemovalsEndBlock: [],
        dataSendingFee: [],
        epsilonSafeDiv: [],
        maxElementsPerForecast: [],
        maxActiveTopicsPerBlock: [],
        maxStringLength: [],
        initialRegretQuantile: [],
        pNormSafeDiv: [],
        globalWhitelistEnabled: [],
        topicCreatorWhitelistEnabled: [],
        minExperiencedWorkerRegrets: [],
        inferenceOutlierDetectionThreshold: [],
        inferenceOutlierDetectionAlpha: [],
        lambdaInitialScore: [],
        globalWorkerWhitelistEnabled: [],
        globalReputerWhitelistEnabled: [],
        globalAdminWhitelistAppended: [],
        maxWhitelistInputArrayLength: [],
    };
}
exports.OptionalParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.version) {
            writer.uint32(10).string(v);
        }
        writer.uint32(18).fork();
        for (const v of message.maxSerializedMsgLength) {
            writer.int64(v);
        }
        writer.join();
        for (const v of message.minTopicWeight) {
            writer.uint32(26).string(v);
        }
        for (const v of message.requiredMinimumStake) {
            writer.uint32(42).string(v);
        }
        writer.uint32(50).fork();
        for (const v of message.removeStakeDelayWindow) {
            writer.int64(v);
        }
        writer.join();
        writer.uint32(58).fork();
        for (const v of message.minEpochLength) {
            writer.int64(v);
        }
        writer.join();
        for (const v of message.betaEntropy) {
            writer.uint32(66).string(v);
        }
        for (const v of message.learningRate) {
            writer.uint32(74).string(v);
        }
        for (const v of message.maxGradientThreshold) {
            writer.uint32(82).string(v);
        }
        for (const v of message.minStakeFraction) {
            writer.uint32(90).string(v);
        }
        writer.uint32(106).fork();
        for (const v of message.maxUnfulfilledWorkerRequests) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(114).fork();
        for (const v of message.maxUnfulfilledReputerRequests) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.topicRewardStakeImportance) {
            writer.uint32(122).string(v);
        }
        for (const v of message.topicRewardFeeRevenueImportance) {
            writer.uint32(130).string(v);
        }
        for (const v of message.topicRewardAlpha) {
            writer.uint32(138).string(v);
        }
        for (const v of message.taskRewardAlpha) {
            writer.uint32(146).string(v);
        }
        for (const v of message.validatorsVsAlloraPercentReward) {
            writer.uint32(154).string(v);
        }
        writer.uint32(162).fork();
        for (const v of message.maxSamplesToScaleScores) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(170).fork();
        for (const v of message.maxTopInferersToReward) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(178).fork();
        for (const v of message.maxTopForecastersToReward) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(186).fork();
        for (const v of message.maxTopReputersToReward) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.createTopicFee) {
            writer.uint32(194).string(v);
        }
        writer.uint32(202).fork();
        for (const v of message.gradientDescentMaxIters) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.registrationFee) {
            writer.uint32(226).string(v);
        }
        writer.uint32(234).fork();
        for (const v of message.defaultPageLimit) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(242).fork();
        for (const v of message.maxPageLimit) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(250).fork();
        for (const v of message.minEpochLengthRecordLimit) {
            writer.int64(v);
        }
        writer.join();
        writer.uint32(258).fork();
        for (const v of message.blocksPerMonth) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.pRewardInference) {
            writer.uint32(266).string(v);
        }
        for (const v of message.pRewardForecast) {
            writer.uint32(274).string(v);
        }
        for (const v of message.pRewardReputer) {
            writer.uint32(282).string(v);
        }
        for (const v of message.cRewardInference) {
            writer.uint32(290).string(v);
        }
        for (const v of message.cRewardForecast) {
            writer.uint32(298).string(v);
        }
        for (const v of message.cNorm) {
            writer.uint32(306).string(v);
        }
        for (const v of message.epsilonReputer) {
            writer.uint32(322).string(v);
        }
        writer.uint32(338).fork();
        for (const v of message.halfMaxProcessStakeRemovalsEndBlock) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.dataSendingFee) {
            writer.uint32(346).string(v);
        }
        for (const v of message.epsilonSafeDiv) {
            writer.uint32(354).string(v);
        }
        writer.uint32(362).fork();
        for (const v of message.maxElementsPerForecast) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(370).fork();
        for (const v of message.maxActiveTopicsPerBlock) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(378).fork();
        for (const v of message.maxStringLength) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.initialRegretQuantile) {
            writer.uint32(386).string(v);
        }
        for (const v of message.pNormSafeDiv) {
            writer.uint32(394).string(v);
        }
        writer.uint32(402).fork();
        for (const v of message.globalWhitelistEnabled) {
            writer.bool(v);
        }
        writer.join();
        writer.uint32(410).fork();
        for (const v of message.topicCreatorWhitelistEnabled) {
            writer.bool(v);
        }
        writer.join();
        writer.uint32(418).fork();
        for (const v of message.minExperiencedWorkerRegrets) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.inferenceOutlierDetectionThreshold) {
            writer.uint32(426).string(v);
        }
        for (const v of message.inferenceOutlierDetectionAlpha) {
            writer.uint32(434).string(v);
        }
        for (const v of message.lambdaInitialScore) {
            writer.uint32(442).string(v);
        }
        writer.uint32(450).fork();
        for (const v of message.globalWorkerWhitelistEnabled) {
            writer.bool(v);
        }
        writer.join();
        writer.uint32(458).fork();
        for (const v of message.globalReputerWhitelistEnabled) {
            writer.bool(v);
        }
        writer.join();
        writer.uint32(466).fork();
        for (const v of message.globalAdminWhitelistAppended) {
            writer.bool(v);
        }
        writer.join();
        writer.uint32(474).fork();
        for (const v of message.maxWhitelistInputArrayLength) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptionalParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.maxSerializedMsgLength.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxSerializedMsgLength.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.minTopicWeight.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.requiredMinimumStake.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag === 48) {
                        message.removeStakeDelayWindow.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.removeStakeDelayWindow.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 7: {
                    if (tag === 56) {
                        message.minEpochLength.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.minEpochLength.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.betaEntropy.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.learningRate.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.maxGradientThreshold.push(reader.string());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.minStakeFraction.push(reader.string());
                    continue;
                }
                case 13: {
                    if (tag === 104) {
                        message.maxUnfulfilledWorkerRequests.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 106) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxUnfulfilledWorkerRequests.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 14: {
                    if (tag === 112) {
                        message.maxUnfulfilledReputerRequests.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 114) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxUnfulfilledReputerRequests.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.topicRewardStakeImportance.push(reader.string());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.topicRewardFeeRevenueImportance.push(reader.string());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.topicRewardAlpha.push(reader.string());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.taskRewardAlpha.push(reader.string());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.validatorsVsAlloraPercentReward.push(reader.string());
                    continue;
                }
                case 20: {
                    if (tag === 160) {
                        message.maxSamplesToScaleScores.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 162) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxSamplesToScaleScores.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 21: {
                    if (tag === 168) {
                        message.maxTopInferersToReward.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 170) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxTopInferersToReward.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 22: {
                    if (tag === 176) {
                        message.maxTopForecastersToReward.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 178) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxTopForecastersToReward.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 23: {
                    if (tag === 184) {
                        message.maxTopReputersToReward.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 186) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxTopReputersToReward.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.createTopicFee.push(reader.string());
                    continue;
                }
                case 25: {
                    if (tag === 200) {
                        message.gradientDescentMaxIters.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 202) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.gradientDescentMaxIters.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.registrationFee.push(reader.string());
                    continue;
                }
                case 29: {
                    if (tag === 232) {
                        message.defaultPageLimit.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 234) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.defaultPageLimit.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 30: {
                    if (tag === 240) {
                        message.maxPageLimit.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 242) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxPageLimit.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 31: {
                    if (tag === 248) {
                        message.minEpochLengthRecordLimit.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 250) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.minEpochLengthRecordLimit.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 32: {
                    if (tag === 256) {
                        message.blocksPerMonth.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 258) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.blocksPerMonth.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.pRewardInference.push(reader.string());
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.pRewardForecast.push(reader.string());
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.pRewardReputer.push(reader.string());
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.cRewardInference.push(reader.string());
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.cRewardForecast.push(reader.string());
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.cNorm.push(reader.string());
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.epsilonReputer.push(reader.string());
                    continue;
                }
                case 42: {
                    if (tag === 336) {
                        message.halfMaxProcessStakeRemovalsEndBlock.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 338) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.halfMaxProcessStakeRemovalsEndBlock.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.dataSendingFee.push(reader.string());
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.epsilonSafeDiv.push(reader.string());
                    continue;
                }
                case 45: {
                    if (tag === 360) {
                        message.maxElementsPerForecast.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 362) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxElementsPerForecast.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 46: {
                    if (tag === 368) {
                        message.maxActiveTopicsPerBlock.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 370) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxActiveTopicsPerBlock.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 47: {
                    if (tag === 376) {
                        message.maxStringLength.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 378) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxStringLength.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 48: {
                    if (tag !== 386) {
                        break;
                    }
                    message.initialRegretQuantile.push(reader.string());
                    continue;
                }
                case 49: {
                    if (tag !== 394) {
                        break;
                    }
                    message.pNormSafeDiv.push(reader.string());
                    continue;
                }
                case 50: {
                    if (tag === 400) {
                        message.globalWhitelistEnabled.push(reader.bool());
                        continue;
                    }
                    if (tag === 402) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalWhitelistEnabled.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
                case 51: {
                    if (tag === 408) {
                        message.topicCreatorWhitelistEnabled.push(reader.bool());
                        continue;
                    }
                    if (tag === 410) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.topicCreatorWhitelistEnabled.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
                case 52: {
                    if (tag === 416) {
                        message.minExperiencedWorkerRegrets.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 418) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.minExperiencedWorkerRegrets.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 53: {
                    if (tag !== 426) {
                        break;
                    }
                    message.inferenceOutlierDetectionThreshold.push(reader.string());
                    continue;
                }
                case 54: {
                    if (tag !== 434) {
                        break;
                    }
                    message.inferenceOutlierDetectionAlpha.push(reader.string());
                    continue;
                }
                case 55: {
                    if (tag !== 442) {
                        break;
                    }
                    message.lambdaInitialScore.push(reader.string());
                    continue;
                }
                case 56: {
                    if (tag === 448) {
                        message.globalWorkerWhitelistEnabled.push(reader.bool());
                        continue;
                    }
                    if (tag === 450) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalWorkerWhitelistEnabled.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
                case 57: {
                    if (tag === 456) {
                        message.globalReputerWhitelistEnabled.push(reader.bool());
                        continue;
                    }
                    if (tag === 458) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalReputerWhitelistEnabled.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
                case 58: {
                    if (tag === 464) {
                        message.globalAdminWhitelistAppended.push(reader.bool());
                        continue;
                    }
                    if (tag === 466) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalAdminWhitelistAppended.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
                case 59: {
                    if (tag === 472) {
                        message.maxWhitelistInputArrayLength.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 474) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.maxWhitelistInputArrayLength.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.version) ? object.version.map((e) => globalThis.String(e)) : [],
            maxSerializedMsgLength: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxSerializedMsgLength)
                ? object.maxSerializedMsgLength.map((e) => globalThis.String(e))
                : [],
            minTopicWeight: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minTopicWeight)
                ? object.minTopicWeight.map((e) => globalThis.String(e))
                : [],
            requiredMinimumStake: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.requiredMinimumStake)
                ? object.requiredMinimumStake.map((e) => globalThis.String(e))
                : [],
            removeStakeDelayWindow: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.removeStakeDelayWindow)
                ? object.removeStakeDelayWindow.map((e) => globalThis.String(e))
                : [],
            minEpochLength: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minEpochLength)
                ? object.minEpochLength.map((e) => globalThis.String(e))
                : [],
            betaEntropy: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.betaEntropy)
                ? object.betaEntropy.map((e) => globalThis.String(e))
                : [],
            learningRate: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.learningRate)
                ? object.learningRate.map((e) => globalThis.String(e))
                : [],
            maxGradientThreshold: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxGradientThreshold)
                ? object.maxGradientThreshold.map((e) => globalThis.String(e))
                : [],
            minStakeFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minStakeFraction)
                ? object.minStakeFraction.map((e) => globalThis.String(e))
                : [],
            maxUnfulfilledWorkerRequests: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxUnfulfilledWorkerRequests)
                ? object.maxUnfulfilledWorkerRequests.map((e) => globalThis.String(e))
                : [],
            maxUnfulfilledReputerRequests: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxUnfulfilledReputerRequests)
                ? object.maxUnfulfilledReputerRequests.map((e) => globalThis.String(e))
                : [],
            topicRewardStakeImportance: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicRewardStakeImportance)
                ? object.topicRewardStakeImportance.map((e) => globalThis.String(e))
                : [],
            topicRewardFeeRevenueImportance: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicRewardFeeRevenueImportance)
                ? object.topicRewardFeeRevenueImportance.map((e) => globalThis.String(e))
                : [],
            topicRewardAlpha: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicRewardAlpha)
                ? object.topicRewardAlpha.map((e) => globalThis.String(e))
                : [],
            taskRewardAlpha: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.taskRewardAlpha)
                ? object.taskRewardAlpha.map((e) => globalThis.String(e))
                : [],
            validatorsVsAlloraPercentReward: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.validatorsVsAlloraPercentReward)
                ? object.validatorsVsAlloraPercentReward.map((e) => globalThis.String(e))
                : [],
            maxSamplesToScaleScores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxSamplesToScaleScores)
                ? object.maxSamplesToScaleScores.map((e) => globalThis.String(e))
                : [],
            maxTopInferersToReward: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxTopInferersToReward)
                ? object.maxTopInferersToReward.map((e) => globalThis.String(e))
                : [],
            maxTopForecastersToReward: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxTopForecastersToReward)
                ? object.maxTopForecastersToReward.map((e) => globalThis.String(e))
                : [],
            maxTopReputersToReward: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxTopReputersToReward)
                ? object.maxTopReputersToReward.map((e) => globalThis.String(e))
                : [],
            createTopicFee: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.createTopicFee)
                ? object.createTopicFee.map((e) => globalThis.String(e))
                : [],
            gradientDescentMaxIters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.gradientDescentMaxIters)
                ? object.gradientDescentMaxIters.map((e) => globalThis.String(e))
                : [],
            registrationFee: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.registrationFee)
                ? object.registrationFee.map((e) => globalThis.String(e))
                : [],
            defaultPageLimit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.defaultPageLimit)
                ? object.defaultPageLimit.map((e) => globalThis.String(e))
                : [],
            maxPageLimit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxPageLimit)
                ? object.maxPageLimit.map((e) => globalThis.String(e))
                : [],
            minEpochLengthRecordLimit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minEpochLengthRecordLimit)
                ? object.minEpochLengthRecordLimit.map((e) => globalThis.String(e))
                : [],
            blocksPerMonth: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blocksPerMonth)
                ? object.blocksPerMonth.map((e) => globalThis.String(e))
                : [],
            pRewardInference: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pRewardInference)
                ? object.pRewardInference.map((e) => globalThis.String(e))
                : [],
            pRewardForecast: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pRewardForecast)
                ? object.pRewardForecast.map((e) => globalThis.String(e))
                : [],
            pRewardReputer: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pRewardReputer)
                ? object.pRewardReputer.map((e) => globalThis.String(e))
                : [],
            cRewardInference: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.cRewardInference)
                ? object.cRewardInference.map((e) => globalThis.String(e))
                : [],
            cRewardForecast: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.cRewardForecast)
                ? object.cRewardForecast.map((e) => globalThis.String(e))
                : [],
            cNorm: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.cNorm) ? object.cNorm.map((e) => globalThis.String(e)) : [],
            epsilonReputer: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.epsilonReputer)
                ? object.epsilonReputer.map((e) => globalThis.String(e))
                : [],
            halfMaxProcessStakeRemovalsEndBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.halfMaxProcessStakeRemovalsEndBlock)
                ? object.halfMaxProcessStakeRemovalsEndBlock.map((e) => globalThis.String(e))
                : [],
            dataSendingFee: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.dataSendingFee)
                ? object.dataSendingFee.map((e) => globalThis.String(e))
                : [],
            epsilonSafeDiv: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.epsilonSafeDiv)
                ? object.epsilonSafeDiv.map((e) => globalThis.String(e))
                : [],
            maxElementsPerForecast: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxElementsPerForecast)
                ? object.maxElementsPerForecast.map((e) => globalThis.String(e))
                : [],
            maxActiveTopicsPerBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxActiveTopicsPerBlock)
                ? object.maxActiveTopicsPerBlock.map((e) => globalThis.String(e))
                : [],
            maxStringLength: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxStringLength)
                ? object.maxStringLength.map((e) => globalThis.String(e))
                : [],
            initialRegretQuantile: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.initialRegretQuantile)
                ? object.initialRegretQuantile.map((e) => globalThis.String(e))
                : [],
            pNormSafeDiv: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pNormSafeDiv)
                ? object.pNormSafeDiv.map((e) => globalThis.String(e))
                : [],
            globalWhitelistEnabled: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalWhitelistEnabled)
                ? object.globalWhitelistEnabled.map((e) => globalThis.Boolean(e))
                : [],
            topicCreatorWhitelistEnabled: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicCreatorWhitelistEnabled)
                ? object.topicCreatorWhitelistEnabled.map((e) => globalThis.Boolean(e))
                : [],
            minExperiencedWorkerRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minExperiencedWorkerRegrets)
                ? object.minExperiencedWorkerRegrets.map((e) => globalThis.String(e))
                : [],
            inferenceOutlierDetectionThreshold: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inferenceOutlierDetectionThreshold)
                ? object.inferenceOutlierDetectionThreshold.map((e) => globalThis.String(e))
                : [],
            inferenceOutlierDetectionAlpha: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inferenceOutlierDetectionAlpha)
                ? object.inferenceOutlierDetectionAlpha.map((e) => globalThis.String(e))
                : [],
            lambdaInitialScore: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lambdaInitialScore)
                ? object.lambdaInitialScore.map((e) => globalThis.String(e))
                : [],
            globalWorkerWhitelistEnabled: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalWorkerWhitelistEnabled)
                ? object.globalWorkerWhitelistEnabled.map((e) => globalThis.Boolean(e))
                : [],
            globalReputerWhitelistEnabled: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalReputerWhitelistEnabled)
                ? object.globalReputerWhitelistEnabled.map((e) => globalThis.Boolean(e))
                : [],
            globalAdminWhitelistAppended: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalAdminWhitelistAppended)
                ? object.globalAdminWhitelistAppended.map((e) => globalThis.Boolean(e))
                : [],
            maxWhitelistInputArrayLength: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.maxWhitelistInputArrayLength)
                ? object.maxWhitelistInputArrayLength.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28;
        const obj = {};
        if ((_a = message.version) === null || _a === void 0 ? void 0 : _a.length) {
            obj.version = message.version;
        }
        if ((_b = message.maxSerializedMsgLength) === null || _b === void 0 ? void 0 : _b.length) {
            obj.maxSerializedMsgLength = message.maxSerializedMsgLength;
        }
        if ((_c = message.minTopicWeight) === null || _c === void 0 ? void 0 : _c.length) {
            obj.minTopicWeight = message.minTopicWeight;
        }
        if ((_d = message.requiredMinimumStake) === null || _d === void 0 ? void 0 : _d.length) {
            obj.requiredMinimumStake = message.requiredMinimumStake;
        }
        if ((_e = message.removeStakeDelayWindow) === null || _e === void 0 ? void 0 : _e.length) {
            obj.removeStakeDelayWindow = message.removeStakeDelayWindow;
        }
        if ((_f = message.minEpochLength) === null || _f === void 0 ? void 0 : _f.length) {
            obj.minEpochLength = message.minEpochLength;
        }
        if ((_g = message.betaEntropy) === null || _g === void 0 ? void 0 : _g.length) {
            obj.betaEntropy = message.betaEntropy;
        }
        if ((_h = message.learningRate) === null || _h === void 0 ? void 0 : _h.length) {
            obj.learningRate = message.learningRate;
        }
        if ((_j = message.maxGradientThreshold) === null || _j === void 0 ? void 0 : _j.length) {
            obj.maxGradientThreshold = message.maxGradientThreshold;
        }
        if ((_k = message.minStakeFraction) === null || _k === void 0 ? void 0 : _k.length) {
            obj.minStakeFraction = message.minStakeFraction;
        }
        if ((_l = message.maxUnfulfilledWorkerRequests) === null || _l === void 0 ? void 0 : _l.length) {
            obj.maxUnfulfilledWorkerRequests = message.maxUnfulfilledWorkerRequests;
        }
        if ((_m = message.maxUnfulfilledReputerRequests) === null || _m === void 0 ? void 0 : _m.length) {
            obj.maxUnfulfilledReputerRequests = message.maxUnfulfilledReputerRequests;
        }
        if ((_o = message.topicRewardStakeImportance) === null || _o === void 0 ? void 0 : _o.length) {
            obj.topicRewardStakeImportance = message.topicRewardStakeImportance;
        }
        if ((_p = message.topicRewardFeeRevenueImportance) === null || _p === void 0 ? void 0 : _p.length) {
            obj.topicRewardFeeRevenueImportance = message.topicRewardFeeRevenueImportance;
        }
        if ((_q = message.topicRewardAlpha) === null || _q === void 0 ? void 0 : _q.length) {
            obj.topicRewardAlpha = message.topicRewardAlpha;
        }
        if ((_r = message.taskRewardAlpha) === null || _r === void 0 ? void 0 : _r.length) {
            obj.taskRewardAlpha = message.taskRewardAlpha;
        }
        if ((_s = message.validatorsVsAlloraPercentReward) === null || _s === void 0 ? void 0 : _s.length) {
            obj.validatorsVsAlloraPercentReward = message.validatorsVsAlloraPercentReward;
        }
        if ((_t = message.maxSamplesToScaleScores) === null || _t === void 0 ? void 0 : _t.length) {
            obj.maxSamplesToScaleScores = message.maxSamplesToScaleScores;
        }
        if ((_u = message.maxTopInferersToReward) === null || _u === void 0 ? void 0 : _u.length) {
            obj.maxTopInferersToReward = message.maxTopInferersToReward;
        }
        if ((_v = message.maxTopForecastersToReward) === null || _v === void 0 ? void 0 : _v.length) {
            obj.maxTopForecastersToReward = message.maxTopForecastersToReward;
        }
        if ((_w = message.maxTopReputersToReward) === null || _w === void 0 ? void 0 : _w.length) {
            obj.maxTopReputersToReward = message.maxTopReputersToReward;
        }
        if ((_x = message.createTopicFee) === null || _x === void 0 ? void 0 : _x.length) {
            obj.createTopicFee = message.createTopicFee;
        }
        if ((_y = message.gradientDescentMaxIters) === null || _y === void 0 ? void 0 : _y.length) {
            obj.gradientDescentMaxIters = message.gradientDescentMaxIters;
        }
        if ((_z = message.registrationFee) === null || _z === void 0 ? void 0 : _z.length) {
            obj.registrationFee = message.registrationFee;
        }
        if ((_0 = message.defaultPageLimit) === null || _0 === void 0 ? void 0 : _0.length) {
            obj.defaultPageLimit = message.defaultPageLimit;
        }
        if ((_1 = message.maxPageLimit) === null || _1 === void 0 ? void 0 : _1.length) {
            obj.maxPageLimit = message.maxPageLimit;
        }
        if ((_2 = message.minEpochLengthRecordLimit) === null || _2 === void 0 ? void 0 : _2.length) {
            obj.minEpochLengthRecordLimit = message.minEpochLengthRecordLimit;
        }
        if ((_3 = message.blocksPerMonth) === null || _3 === void 0 ? void 0 : _3.length) {
            obj.blocksPerMonth = message.blocksPerMonth;
        }
        if ((_4 = message.pRewardInference) === null || _4 === void 0 ? void 0 : _4.length) {
            obj.pRewardInference = message.pRewardInference;
        }
        if ((_5 = message.pRewardForecast) === null || _5 === void 0 ? void 0 : _5.length) {
            obj.pRewardForecast = message.pRewardForecast;
        }
        if ((_6 = message.pRewardReputer) === null || _6 === void 0 ? void 0 : _6.length) {
            obj.pRewardReputer = message.pRewardReputer;
        }
        if ((_7 = message.cRewardInference) === null || _7 === void 0 ? void 0 : _7.length) {
            obj.cRewardInference = message.cRewardInference;
        }
        if ((_8 = message.cRewardForecast) === null || _8 === void 0 ? void 0 : _8.length) {
            obj.cRewardForecast = message.cRewardForecast;
        }
        if ((_9 = message.cNorm) === null || _9 === void 0 ? void 0 : _9.length) {
            obj.cNorm = message.cNorm;
        }
        if ((_10 = message.epsilonReputer) === null || _10 === void 0 ? void 0 : _10.length) {
            obj.epsilonReputer = message.epsilonReputer;
        }
        if ((_11 = message.halfMaxProcessStakeRemovalsEndBlock) === null || _11 === void 0 ? void 0 : _11.length) {
            obj.halfMaxProcessStakeRemovalsEndBlock = message.halfMaxProcessStakeRemovalsEndBlock;
        }
        if ((_12 = message.dataSendingFee) === null || _12 === void 0 ? void 0 : _12.length) {
            obj.dataSendingFee = message.dataSendingFee;
        }
        if ((_13 = message.epsilonSafeDiv) === null || _13 === void 0 ? void 0 : _13.length) {
            obj.epsilonSafeDiv = message.epsilonSafeDiv;
        }
        if ((_14 = message.maxElementsPerForecast) === null || _14 === void 0 ? void 0 : _14.length) {
            obj.maxElementsPerForecast = message.maxElementsPerForecast;
        }
        if ((_15 = message.maxActiveTopicsPerBlock) === null || _15 === void 0 ? void 0 : _15.length) {
            obj.maxActiveTopicsPerBlock = message.maxActiveTopicsPerBlock;
        }
        if ((_16 = message.maxStringLength) === null || _16 === void 0 ? void 0 : _16.length) {
            obj.maxStringLength = message.maxStringLength;
        }
        if ((_17 = message.initialRegretQuantile) === null || _17 === void 0 ? void 0 : _17.length) {
            obj.initialRegretQuantile = message.initialRegretQuantile;
        }
        if ((_18 = message.pNormSafeDiv) === null || _18 === void 0 ? void 0 : _18.length) {
            obj.pNormSafeDiv = message.pNormSafeDiv;
        }
        if ((_19 = message.globalWhitelistEnabled) === null || _19 === void 0 ? void 0 : _19.length) {
            obj.globalWhitelistEnabled = message.globalWhitelistEnabled;
        }
        if ((_20 = message.topicCreatorWhitelistEnabled) === null || _20 === void 0 ? void 0 : _20.length) {
            obj.topicCreatorWhitelistEnabled = message.topicCreatorWhitelistEnabled;
        }
        if ((_21 = message.minExperiencedWorkerRegrets) === null || _21 === void 0 ? void 0 : _21.length) {
            obj.minExperiencedWorkerRegrets = message.minExperiencedWorkerRegrets;
        }
        if ((_22 = message.inferenceOutlierDetectionThreshold) === null || _22 === void 0 ? void 0 : _22.length) {
            obj.inferenceOutlierDetectionThreshold = message.inferenceOutlierDetectionThreshold;
        }
        if ((_23 = message.inferenceOutlierDetectionAlpha) === null || _23 === void 0 ? void 0 : _23.length) {
            obj.inferenceOutlierDetectionAlpha = message.inferenceOutlierDetectionAlpha;
        }
        if ((_24 = message.lambdaInitialScore) === null || _24 === void 0 ? void 0 : _24.length) {
            obj.lambdaInitialScore = message.lambdaInitialScore;
        }
        if ((_25 = message.globalWorkerWhitelistEnabled) === null || _25 === void 0 ? void 0 : _25.length) {
            obj.globalWorkerWhitelistEnabled = message.globalWorkerWhitelistEnabled;
        }
        if ((_26 = message.globalReputerWhitelistEnabled) === null || _26 === void 0 ? void 0 : _26.length) {
            obj.globalReputerWhitelistEnabled = message.globalReputerWhitelistEnabled;
        }
        if ((_27 = message.globalAdminWhitelistAppended) === null || _27 === void 0 ? void 0 : _27.length) {
            obj.globalAdminWhitelistAppended = message.globalAdminWhitelistAppended;
        }
        if ((_28 = message.maxWhitelistInputArrayLength) === null || _28 === void 0 ? void 0 : _28.length) {
            obj.maxWhitelistInputArrayLength = message.maxWhitelistInputArrayLength;
        }
        return obj;
    },
    create(base) {
        return exports.OptionalParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28;
        const message = createBaseOptionalParams();
        message.version = ((_a = object.version) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.maxSerializedMsgLength = ((_b = object.maxSerializedMsgLength) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.minTopicWeight = ((_c = object.minTopicWeight) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.requiredMinimumStake = ((_d = object.requiredMinimumStake) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.removeStakeDelayWindow = ((_e = object.removeStakeDelayWindow) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.minEpochLength = ((_f = object.minEpochLength) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.betaEntropy = ((_g = object.betaEntropy) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.learningRate = ((_h = object.learningRate) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.maxGradientThreshold = ((_j = object.maxGradientThreshold) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.minStakeFraction = ((_k = object.minStakeFraction) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.maxUnfulfilledWorkerRequests = ((_l = object.maxUnfulfilledWorkerRequests) === null || _l === void 0 ? void 0 : _l.map((e) => e)) || [];
        message.maxUnfulfilledReputerRequests = ((_m = object.maxUnfulfilledReputerRequests) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.topicRewardStakeImportance = ((_o = object.topicRewardStakeImportance) === null || _o === void 0 ? void 0 : _o.map((e) => e)) || [];
        message.topicRewardFeeRevenueImportance = ((_p = object.topicRewardFeeRevenueImportance) === null || _p === void 0 ? void 0 : _p.map((e) => e)) || [];
        message.topicRewardAlpha = ((_q = object.topicRewardAlpha) === null || _q === void 0 ? void 0 : _q.map((e) => e)) || [];
        message.taskRewardAlpha = ((_r = object.taskRewardAlpha) === null || _r === void 0 ? void 0 : _r.map((e) => e)) || [];
        message.validatorsVsAlloraPercentReward = ((_s = object.validatorsVsAlloraPercentReward) === null || _s === void 0 ? void 0 : _s.map((e) => e)) || [];
        message.maxSamplesToScaleScores = ((_t = object.maxSamplesToScaleScores) === null || _t === void 0 ? void 0 : _t.map((e) => e)) || [];
        message.maxTopInferersToReward = ((_u = object.maxTopInferersToReward) === null || _u === void 0 ? void 0 : _u.map((e) => e)) || [];
        message.maxTopForecastersToReward = ((_v = object.maxTopForecastersToReward) === null || _v === void 0 ? void 0 : _v.map((e) => e)) || [];
        message.maxTopReputersToReward = ((_w = object.maxTopReputersToReward) === null || _w === void 0 ? void 0 : _w.map((e) => e)) || [];
        message.createTopicFee = ((_x = object.createTopicFee) === null || _x === void 0 ? void 0 : _x.map((e) => e)) || [];
        message.gradientDescentMaxIters = ((_y = object.gradientDescentMaxIters) === null || _y === void 0 ? void 0 : _y.map((e) => e)) || [];
        message.registrationFee = ((_z = object.registrationFee) === null || _z === void 0 ? void 0 : _z.map((e) => e)) || [];
        message.defaultPageLimit = ((_0 = object.defaultPageLimit) === null || _0 === void 0 ? void 0 : _0.map((e) => e)) || [];
        message.maxPageLimit = ((_1 = object.maxPageLimit) === null || _1 === void 0 ? void 0 : _1.map((e) => e)) || [];
        message.minEpochLengthRecordLimit = ((_2 = object.minEpochLengthRecordLimit) === null || _2 === void 0 ? void 0 : _2.map((e) => e)) || [];
        message.blocksPerMonth = ((_3 = object.blocksPerMonth) === null || _3 === void 0 ? void 0 : _3.map((e) => e)) || [];
        message.pRewardInference = ((_4 = object.pRewardInference) === null || _4 === void 0 ? void 0 : _4.map((e) => e)) || [];
        message.pRewardForecast = ((_5 = object.pRewardForecast) === null || _5 === void 0 ? void 0 : _5.map((e) => e)) || [];
        message.pRewardReputer = ((_6 = object.pRewardReputer) === null || _6 === void 0 ? void 0 : _6.map((e) => e)) || [];
        message.cRewardInference = ((_7 = object.cRewardInference) === null || _7 === void 0 ? void 0 : _7.map((e) => e)) || [];
        message.cRewardForecast = ((_8 = object.cRewardForecast) === null || _8 === void 0 ? void 0 : _8.map((e) => e)) || [];
        message.cNorm = ((_9 = object.cNorm) === null || _9 === void 0 ? void 0 : _9.map((e) => e)) || [];
        message.epsilonReputer = ((_10 = object.epsilonReputer) === null || _10 === void 0 ? void 0 : _10.map((e) => e)) || [];
        message.halfMaxProcessStakeRemovalsEndBlock = ((_11 = object.halfMaxProcessStakeRemovalsEndBlock) === null || _11 === void 0 ? void 0 : _11.map((e) => e)) || [];
        message.dataSendingFee = ((_12 = object.dataSendingFee) === null || _12 === void 0 ? void 0 : _12.map((e) => e)) || [];
        message.epsilonSafeDiv = ((_13 = object.epsilonSafeDiv) === null || _13 === void 0 ? void 0 : _13.map((e) => e)) || [];
        message.maxElementsPerForecast = ((_14 = object.maxElementsPerForecast) === null || _14 === void 0 ? void 0 : _14.map((e) => e)) || [];
        message.maxActiveTopicsPerBlock = ((_15 = object.maxActiveTopicsPerBlock) === null || _15 === void 0 ? void 0 : _15.map((e) => e)) || [];
        message.maxStringLength = ((_16 = object.maxStringLength) === null || _16 === void 0 ? void 0 : _16.map((e) => e)) || [];
        message.initialRegretQuantile = ((_17 = object.initialRegretQuantile) === null || _17 === void 0 ? void 0 : _17.map((e) => e)) || [];
        message.pNormSafeDiv = ((_18 = object.pNormSafeDiv) === null || _18 === void 0 ? void 0 : _18.map((e) => e)) || [];
        message.globalWhitelistEnabled = ((_19 = object.globalWhitelistEnabled) === null || _19 === void 0 ? void 0 : _19.map((e) => e)) || [];
        message.topicCreatorWhitelistEnabled = ((_20 = object.topicCreatorWhitelistEnabled) === null || _20 === void 0 ? void 0 : _20.map((e) => e)) || [];
        message.minExperiencedWorkerRegrets = ((_21 = object.minExperiencedWorkerRegrets) === null || _21 === void 0 ? void 0 : _21.map((e) => e)) || [];
        message.inferenceOutlierDetectionThreshold = ((_22 = object.inferenceOutlierDetectionThreshold) === null || _22 === void 0 ? void 0 : _22.map((e) => e)) || [];
        message.inferenceOutlierDetectionAlpha = ((_23 = object.inferenceOutlierDetectionAlpha) === null || _23 === void 0 ? void 0 : _23.map((e) => e)) || [];
        message.lambdaInitialScore = ((_24 = object.lambdaInitialScore) === null || _24 === void 0 ? void 0 : _24.map((e) => e)) || [];
        message.globalWorkerWhitelistEnabled = ((_25 = object.globalWorkerWhitelistEnabled) === null || _25 === void 0 ? void 0 : _25.map((e) => e)) || [];
        message.globalReputerWhitelistEnabled = ((_26 = object.globalReputerWhitelistEnabled) === null || _26 === void 0 ? void 0 : _26.map((e) => e)) || [];
        message.globalAdminWhitelistAppended = ((_27 = object.globalAdminWhitelistAppended) === null || _27 === void 0 ? void 0 : _27.map((e) => e)) || [];
        message.maxWhitelistInputArrayLength = ((_28 = object.maxWhitelistInputArrayLength) === null || _28 === void 0 ? void 0 : _28.map((e) => e)) || [];
        return message;
    },
};
function createBaseUpdateParamsRequest() {
    return { sender: "", params: undefined };
}
exports.UpdateParamsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.params !== undefined) {
            exports.OptionalParams.encode(message.params, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = exports.OptionalParams.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            params: isSet(object.params) ? exports.OptionalParams.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.params !== undefined) {
            obj.params = exports.OptionalParams.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUpdateParamsRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? exports.OptionalParams.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseUpdateParamsResponse() {
    return {};
}
exports.UpdateParamsResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.UpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseUpdateParamsResponse();
        return message;
    },
};
function createBaseCreateNewTopicRequest() {
    return {
        creator: "",
        metadata: "",
        lossMethod: "",
        epochLength: "0",
        groundTruthLag: "0",
        pNorm: "",
        alphaRegret: "",
        allowNegative: false,
        epsilon: "",
        workerSubmissionWindow: "0",
        meritSortitionAlpha: "",
        activeInfererQuantile: "",
        activeForecasterQuantile: "",
        activeReputerQuantile: "",
        enableWorkerWhitelist: false,
        enableReputerWhitelist: false,
    };
}
exports.CreateNewTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.metadata !== "") {
            writer.uint32(18).string(message.metadata);
        }
        if (message.lossMethod !== "") {
            writer.uint32(34).string(message.lossMethod);
        }
        if (message.epochLength !== "0") {
            writer.uint32(56).int64(message.epochLength);
        }
        if (message.groundTruthLag !== "0") {
            writer.uint32(64).int64(message.groundTruthLag);
        }
        if (message.pNorm !== "") {
            writer.uint32(82).string(message.pNorm);
        }
        if (message.alphaRegret !== "") {
            writer.uint32(90).string(message.alphaRegret);
        }
        if (message.allowNegative !== false) {
            writer.uint32(96).bool(message.allowNegative);
        }
        if (message.epsilon !== "") {
            writer.uint32(106).string(message.epsilon);
        }
        if (message.workerSubmissionWindow !== "0") {
            writer.uint32(112).int64(message.workerSubmissionWindow);
        }
        if (message.meritSortitionAlpha !== "") {
            writer.uint32(122).string(message.meritSortitionAlpha);
        }
        if (message.activeInfererQuantile !== "") {
            writer.uint32(130).string(message.activeInfererQuantile);
        }
        if (message.activeForecasterQuantile !== "") {
            writer.uint32(138).string(message.activeForecasterQuantile);
        }
        if (message.activeReputerQuantile !== "") {
            writer.uint32(146).string(message.activeReputerQuantile);
        }
        if (message.enableWorkerWhitelist !== false) {
            writer.uint32(152).bool(message.enableWorkerWhitelist);
        }
        if (message.enableReputerWhitelist !== false) {
            writer.uint32(160).bool(message.enableReputerWhitelist);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateNewTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.lossMethod = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.epochLength = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.groundTruthLag = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.pNorm = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.alphaRegret = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.allowNegative = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.epsilon = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.workerSubmissionWindow = reader.int64().toString();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.meritSortitionAlpha = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.activeInfererQuantile = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.activeForecasterQuantile = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.activeReputerQuantile = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.enableWorkerWhitelist = reader.bool();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.enableReputerWhitelist = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            lossMethod: isSet(object.lossMethod) ? globalThis.String(object.lossMethod) : "",
            epochLength: isSet(object.epochLength) ? globalThis.String(object.epochLength) : "0",
            groundTruthLag: isSet(object.groundTruthLag) ? globalThis.String(object.groundTruthLag) : "0",
            pNorm: isSet(object.pNorm) ? globalThis.String(object.pNorm) : "",
            alphaRegret: isSet(object.alphaRegret) ? globalThis.String(object.alphaRegret) : "",
            allowNegative: isSet(object.allowNegative) ? globalThis.Boolean(object.allowNegative) : false,
            epsilon: isSet(object.epsilon) ? globalThis.String(object.epsilon) : "",
            workerSubmissionWindow: isSet(object.workerSubmissionWindow)
                ? globalThis.String(object.workerSubmissionWindow)
                : "0",
            meritSortitionAlpha: isSet(object.meritSortitionAlpha) ? globalThis.String(object.meritSortitionAlpha) : "",
            activeInfererQuantile: isSet(object.activeInfererQuantile) ? globalThis.String(object.activeInfererQuantile) : "",
            activeForecasterQuantile: isSet(object.activeForecasterQuantile)
                ? globalThis.String(object.activeForecasterQuantile)
                : "",
            activeReputerQuantile: isSet(object.activeReputerQuantile) ? globalThis.String(object.activeReputerQuantile) : "",
            enableWorkerWhitelist: isSet(object.enableWorkerWhitelist)
                ? globalThis.Boolean(object.enableWorkerWhitelist)
                : false,
            enableReputerWhitelist: isSet(object.enableReputerWhitelist)
                ? globalThis.Boolean(object.enableReputerWhitelist)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.lossMethod !== "") {
            obj.lossMethod = message.lossMethod;
        }
        if (message.epochLength !== "0") {
            obj.epochLength = message.epochLength;
        }
        if (message.groundTruthLag !== "0") {
            obj.groundTruthLag = message.groundTruthLag;
        }
        if (message.pNorm !== "") {
            obj.pNorm = message.pNorm;
        }
        if (message.alphaRegret !== "") {
            obj.alphaRegret = message.alphaRegret;
        }
        if (message.allowNegative !== false) {
            obj.allowNegative = message.allowNegative;
        }
        if (message.epsilon !== "") {
            obj.epsilon = message.epsilon;
        }
        if (message.workerSubmissionWindow !== "0") {
            obj.workerSubmissionWindow = message.workerSubmissionWindow;
        }
        if (message.meritSortitionAlpha !== "") {
            obj.meritSortitionAlpha = message.meritSortitionAlpha;
        }
        if (message.activeInfererQuantile !== "") {
            obj.activeInfererQuantile = message.activeInfererQuantile;
        }
        if (message.activeForecasterQuantile !== "") {
            obj.activeForecasterQuantile = message.activeForecasterQuantile;
        }
        if (message.activeReputerQuantile !== "") {
            obj.activeReputerQuantile = message.activeReputerQuantile;
        }
        if (message.enableWorkerWhitelist !== false) {
            obj.enableWorkerWhitelist = message.enableWorkerWhitelist;
        }
        if (message.enableReputerWhitelist !== false) {
            obj.enableReputerWhitelist = message.enableReputerWhitelist;
        }
        return obj;
    },
    create(base) {
        return exports.CreateNewTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseCreateNewTopicRequest();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : "";
        message.lossMethod = (_c = object.lossMethod) !== null && _c !== void 0 ? _c : "";
        message.epochLength = (_d = object.epochLength) !== null && _d !== void 0 ? _d : "0";
        message.groundTruthLag = (_e = object.groundTruthLag) !== null && _e !== void 0 ? _e : "0";
        message.pNorm = (_f = object.pNorm) !== null && _f !== void 0 ? _f : "";
        message.alphaRegret = (_g = object.alphaRegret) !== null && _g !== void 0 ? _g : "";
        message.allowNegative = (_h = object.allowNegative) !== null && _h !== void 0 ? _h : false;
        message.epsilon = (_j = object.epsilon) !== null && _j !== void 0 ? _j : "";
        message.workerSubmissionWindow = (_k = object.workerSubmissionWindow) !== null && _k !== void 0 ? _k : "0";
        message.meritSortitionAlpha = (_l = object.meritSortitionAlpha) !== null && _l !== void 0 ? _l : "";
        message.activeInfererQuantile = (_m = object.activeInfererQuantile) !== null && _m !== void 0 ? _m : "";
        message.activeForecasterQuantile = (_o = object.activeForecasterQuantile) !== null && _o !== void 0 ? _o : "";
        message.activeReputerQuantile = (_p = object.activeReputerQuantile) !== null && _p !== void 0 ? _p : "";
        message.enableWorkerWhitelist = (_q = object.enableWorkerWhitelist) !== null && _q !== void 0 ? _q : false;
        message.enableReputerWhitelist = (_r = object.enableReputerWhitelist) !== null && _r !== void 0 ? _r : false;
        return message;
    },
};
function createBaseCreateNewTopicResponse() {
    return { topicId: "0" };
}
exports.CreateNewTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateNewTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.CreateNewTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCreateNewTopicResponse();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseInsertReputerPayloadRequest() {
    return { sender: "", reputerValueBundle: undefined };
}
exports.InsertReputerPayloadRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.reputerValueBundle !== undefined) {
            reputer_1.ReputerValueBundle.encode(message.reputerValueBundle, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsertReputerPayloadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputerValueBundle = reputer_1.ReputerValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            reputerValueBundle: isSet(object.reputerValueBundle)
                ? reputer_1.ReputerValueBundle.fromJSON(object.reputerValueBundle)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.reputerValueBundle !== undefined) {
            obj.reputerValueBundle = reputer_1.ReputerValueBundle.toJSON(message.reputerValueBundle);
        }
        return obj;
    },
    create(base) {
        return exports.InsertReputerPayloadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInsertReputerPayloadRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.reputerValueBundle = (object.reputerValueBundle !== undefined && object.reputerValueBundle !== null)
            ? reputer_1.ReputerValueBundle.fromPartial(object.reputerValueBundle)
            : undefined;
        return message;
    },
};
function createBaseInsertReputerPayloadResponse() {
    return {};
}
exports.InsertReputerPayloadResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsertReputerPayloadResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.InsertReputerPayloadResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseInsertReputerPayloadResponse();
        return message;
    },
};
function createBaseInsertWorkerPayloadRequest() {
    return { sender: "", workerDataBundle: undefined };
}
exports.InsertWorkerPayloadRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.workerDataBundle !== undefined) {
            worker_1.WorkerDataBundle.encode(message.workerDataBundle, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsertWorkerPayloadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.workerDataBundle = worker_1.WorkerDataBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            workerDataBundle: isSet(object.workerDataBundle) ? worker_1.WorkerDataBundle.fromJSON(object.workerDataBundle) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.workerDataBundle !== undefined) {
            obj.workerDataBundle = worker_1.WorkerDataBundle.toJSON(message.workerDataBundle);
        }
        return obj;
    },
    create(base) {
        return exports.InsertWorkerPayloadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInsertWorkerPayloadRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.workerDataBundle = (object.workerDataBundle !== undefined && object.workerDataBundle !== null)
            ? worker_1.WorkerDataBundle.fromPartial(object.workerDataBundle)
            : undefined;
        return message;
    },
};
function createBaseInsertWorkerPayloadResponse() {
    return {};
}
exports.InsertWorkerPayloadResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsertWorkerPayloadResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.InsertWorkerPayloadResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseInsertWorkerPayloadResponse();
        return message;
    },
};
function createBaseRegisterRequest() {
    return { sender: "", topicId: "0", owner: "", isReputer: false };
}
exports.RegisterRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(32).uint64(message.topicId);
        }
        if (message.owner !== "") {
            writer.uint32(42).string(message.owner);
        }
        if (message.isReputer !== false) {
            writer.uint32(48).bool(message.isReputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isReputer = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            isReputer: isSet(object.isReputer) ? globalThis.Boolean(object.isReputer) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.isReputer !== false) {
            obj.isReputer = message.isReputer;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRegisterRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.owner = (_c = object.owner) !== null && _c !== void 0 ? _c : "";
        message.isReputer = (_d = object.isReputer) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseRegisterResponse() {
    return { success: false, message: "" };
}
exports.RegisterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRegisterResponse();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveRegistrationRequest() {
    return { sender: "", topicId: "0", isReputer: false };
}
exports.RemoveRegistrationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.isReputer !== false) {
            writer.uint32(24).bool(message.isReputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveRegistrationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isReputer = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            isReputer: isSet(object.isReputer) ? globalThis.Boolean(object.isReputer) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.isReputer !== false) {
            obj.isReputer = message.isReputer;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveRegistrationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRemoveRegistrationRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.isReputer = (_c = object.isReputer) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBaseRemoveRegistrationResponse() {
    return { success: false, message: "" };
}
exports.RemoveRegistrationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveRegistrationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveRegistrationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveRegistrationResponse();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddStakeRequest() {
    return { sender: "", topicId: "0", amount: "" };
}
exports.AddStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.AddStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAddStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseAddStakeResponse() {
    return {};
}
exports.AddStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddStakeResponse();
        return message;
    },
};
function createBaseRemoveStakeRequest() {
    return { sender: "", topicId: "0", amount: "" };
}
exports.RemoveStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRemoveStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseRemoveStakeResponse() {
    return {};
}
exports.RemoveStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveStakeResponse();
        return message;
    },
};
function createBaseCancelRemoveStakeRequest() {
    return { sender: "", topicId: "0" };
}
exports.CancelRemoveStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelRemoveStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.CancelRemoveStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCancelRemoveStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseCancelRemoveStakeResponse() {
    return {};
}
exports.CancelRemoveStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelRemoveStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CancelRemoveStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseCancelRemoveStakeResponse();
        return message;
    },
};
function createBaseDelegateStakeRequest() {
    return { sender: "", topicId: "0", reputer: "", amount: "" };
}
exports.DelegateStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.amount !== "") {
            writer.uint32(34).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegateStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.DelegateStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseDelegateStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDelegateStakeResponse() {
    return {};
}
exports.DelegateStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegateStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DelegateStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseDelegateStakeResponse();
        return message;
    },
};
function createBaseRemoveDelegateStakeRequest() {
    return { sender: "", reputer: "", topicId: "0", amount: "" };
}
exports.RemoveDelegateStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        if (message.amount !== "") {
            writer.uint32(34).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveDelegateStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveDelegateStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRemoveDelegateStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseRemoveDelegateStakeResponse() {
    return {};
}
exports.RemoveDelegateStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveDelegateStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveDelegateStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveDelegateStakeResponse();
        return message;
    },
};
function createBaseCancelRemoveDelegateStakeRequest() {
    return { sender: "", topicId: "0", delegator: "", reputer: "" };
}
exports.CancelRemoveDelegateStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(26).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(34).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelRemoveDelegateStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.CancelRemoveDelegateStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCancelRemoveDelegateStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.delegator = (_c = object.delegator) !== null && _c !== void 0 ? _c : "";
        message.reputer = (_d = object.reputer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseCancelRemoveDelegateStakeResponse() {
    return {};
}
exports.CancelRemoveDelegateStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelRemoveDelegateStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CancelRemoveDelegateStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseCancelRemoveDelegateStakeResponse();
        return message;
    },
};
function createBaseRewardDelegateStakeRequest() {
    return { sender: "", topicId: "0", reputer: "" };
}
exports.RewardDelegateStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardDelegateStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.RewardDelegateStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRewardDelegateStakeRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseRewardDelegateStakeResponse() {
    return {};
}
exports.RewardDelegateStakeResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardDelegateStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RewardDelegateStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRewardDelegateStakeResponse();
        return message;
    },
};
function createBaseFundTopicRequest() {
    return { sender: "", topicId: "0", amount: "" };
}
exports.FundTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFundTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.FundTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFundTopicRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseFundTopicResponse() {
    return {};
}
exports.FundTopicResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFundTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.FundTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseFundTopicResponse();
        return message;
    },
};
function createBaseAddToWhitelistAdminRequest() {
    return { sender: "", address: "" };
}
exports.AddToWhitelistAdminRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToWhitelistAdminRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AddToWhitelistAdminRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddToWhitelistAdminRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddToWhitelistAdminResponse() {
    return {};
}
exports.AddToWhitelistAdminResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToWhitelistAdminResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToWhitelistAdminResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToWhitelistAdminResponse();
        return message;
    },
};
function createBaseRemoveFromWhitelistAdminRequest() {
    return { sender: "", address: "" };
}
exports.RemoveFromWhitelistAdminRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromWhitelistAdminRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromWhitelistAdminRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFromWhitelistAdminRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFromWhitelistAdminResponse() {
    return {};
}
exports.RemoveFromWhitelistAdminResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromWhitelistAdminResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromWhitelistAdminResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromWhitelistAdminResponse();
        return message;
    },
};
function createBaseEnableTopicWorkerWhitelistRequest() {
    return { sender: "", topicId: "0" };
}
exports.EnableTopicWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableTopicWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.EnableTopicWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEnableTopicWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseEnableTopicWorkerWhitelistResponse() {
    return {};
}
exports.EnableTopicWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableTopicWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.EnableTopicWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseEnableTopicWorkerWhitelistResponse();
        return message;
    },
};
function createBaseDisableTopicWorkerWhitelistRequest() {
    return { sender: "", topicId: "0" };
}
exports.DisableTopicWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableTopicWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.DisableTopicWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDisableTopicWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseDisableTopicWorkerWhitelistResponse() {
    return {};
}
exports.DisableTopicWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableTopicWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DisableTopicWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseDisableTopicWorkerWhitelistResponse();
        return message;
    },
};
function createBaseEnableTopicReputerWhitelistRequest() {
    return { sender: "", topicId: "0" };
}
exports.EnableTopicReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableTopicReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.EnableTopicReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEnableTopicReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseEnableTopicReputerWhitelistResponse() {
    return {};
}
exports.EnableTopicReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableTopicReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.EnableTopicReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseEnableTopicReputerWhitelistResponse();
        return message;
    },
};
function createBaseDisableTopicReputerWhitelistRequest() {
    return { sender: "", topicId: "0" };
}
exports.DisableTopicReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableTopicReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.DisableTopicReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDisableTopicReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseDisableTopicReputerWhitelistResponse() {
    return {};
}
exports.DisableTopicReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableTopicReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DisableTopicReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseDisableTopicReputerWhitelistResponse();
        return message;
    },
};
function createBaseAddToGlobalWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.AddToGlobalWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AddToGlobalWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddToGlobalWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddToGlobalWhitelistResponse() {
    return {};
}
exports.AddToGlobalWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToGlobalWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToGlobalWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromGlobalWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.RemoveFromGlobalWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFromGlobalWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFromGlobalWhitelistResponse() {
    return {};
}
exports.RemoveFromGlobalWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromGlobalWhitelistResponse();
        return message;
    },
};
function createBaseAddToTopicCreatorWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.AddToTopicCreatorWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToTopicCreatorWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AddToTopicCreatorWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddToTopicCreatorWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddToTopicCreatorWhitelistResponse() {
    return {};
}
exports.AddToTopicCreatorWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToTopicCreatorWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToTopicCreatorWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToTopicCreatorWhitelistResponse();
        return message;
    },
};
function createBaseAddToGlobalWorkerWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.AddToGlobalWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AddToGlobalWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddToGlobalWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddToGlobalWorkerWhitelistResponse() {
    return {};
}
exports.AddToGlobalWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToGlobalWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToGlobalWorkerWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromGlobalWorkerWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.RemoveFromGlobalWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFromGlobalWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFromGlobalWorkerWhitelistResponse() {
    return {};
}
exports.RemoveFromGlobalWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromGlobalWorkerWhitelistResponse();
        return message;
    },
};
function createBaseAddToGlobalReputerWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.AddToGlobalReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AddToGlobalReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddToGlobalReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddToGlobalReputerWhitelistResponse() {
    return {};
}
exports.AddToGlobalReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToGlobalReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToGlobalReputerWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromGlobalReputerWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.RemoveFromGlobalReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFromGlobalReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFromGlobalReputerWhitelistResponse() {
    return {};
}
exports.RemoveFromGlobalReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromGlobalReputerWhitelistResponse();
        return message;
    },
};
function createBaseAddToGlobalAdminWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.AddToGlobalAdminWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalAdminWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AddToGlobalAdminWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddToGlobalAdminWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddToGlobalAdminWhitelistResponse() {
    return {};
}
exports.AddToGlobalAdminWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToGlobalAdminWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToGlobalAdminWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToGlobalAdminWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromGlobalAdminWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.RemoveFromGlobalAdminWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalAdminWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalAdminWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFromGlobalAdminWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFromGlobalAdminWhitelistResponse() {
    return {};
}
exports.RemoveFromGlobalAdminWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromGlobalAdminWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromGlobalAdminWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromGlobalAdminWhitelistResponse();
        return message;
    },
};
function createBaseBulkAddToGlobalWorkerWhitelistRequest() {
    return { sender: "", addresses: [] };
}
exports.BulkAddToGlobalWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToGlobalWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        return obj;
    },
    create(base) {
        return exports.BulkAddToGlobalWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBulkAddToGlobalWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseBulkAddToGlobalWorkerWhitelistResponse() {
    return {};
}
exports.BulkAddToGlobalWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToGlobalWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkAddToGlobalWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkAddToGlobalWorkerWhitelistResponse();
        return message;
    },
};
function createBaseBulkRemoveFromGlobalWorkerWhitelistRequest() {
    return { sender: "", addresses: [] };
}
exports.BulkRemoveFromGlobalWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromGlobalWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromGlobalWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBulkRemoveFromGlobalWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseBulkRemoveFromGlobalWorkerWhitelistResponse() {
    return {};
}
exports.BulkRemoveFromGlobalWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromGlobalWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromGlobalWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkRemoveFromGlobalWorkerWhitelistResponse();
        return message;
    },
};
function createBaseBulkAddToGlobalReputerWhitelistRequest() {
    return { sender: "", addresses: [] };
}
exports.BulkAddToGlobalReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToGlobalReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        return obj;
    },
    create(base) {
        return exports.BulkAddToGlobalReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBulkAddToGlobalReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseBulkAddToGlobalReputerWhitelistResponse() {
    return {};
}
exports.BulkAddToGlobalReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToGlobalReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkAddToGlobalReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkAddToGlobalReputerWhitelistResponse();
        return message;
    },
};
function createBaseBulkRemoveFromGlobalReputerWhitelistRequest() {
    return { sender: "", addresses: [] };
}
exports.BulkRemoveFromGlobalReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromGlobalReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromGlobalReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBulkRemoveFromGlobalReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseBulkRemoveFromGlobalReputerWhitelistResponse() {
    return {};
}
exports.BulkRemoveFromGlobalReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromGlobalReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromGlobalReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkRemoveFromGlobalReputerWhitelistResponse();
        return message;
    },
};
function createBaseBulkAddToTopicWorkerWhitelistRequest() {
    return { sender: "", addresses: [], topicId: "0" };
}
exports.BulkAddToTopicWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToTopicWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.BulkAddToTopicWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBulkAddToTopicWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseBulkAddToTopicWorkerWhitelistResponse() {
    return {};
}
exports.BulkAddToTopicWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToTopicWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkAddToTopicWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkAddToTopicWorkerWhitelistResponse();
        return message;
    },
};
function createBaseBulkRemoveFromTopicWorkerWhitelistRequest() {
    return { sender: "", addresses: [], topicId: "0" };
}
exports.BulkRemoveFromTopicWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromTopicWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromTopicWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBulkRemoveFromTopicWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseBulkRemoveFromTopicWorkerWhitelistResponse() {
    return {};
}
exports.BulkRemoveFromTopicWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromTopicWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromTopicWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkRemoveFromTopicWorkerWhitelistResponse();
        return message;
    },
};
function createBaseBulkAddToTopicReputerWhitelistRequest() {
    return { sender: "", addresses: [], topicId: "0" };
}
exports.BulkAddToTopicReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToTopicReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.BulkAddToTopicReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBulkAddToTopicReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseBulkAddToTopicReputerWhitelistResponse() {
    return {};
}
exports.BulkAddToTopicReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkAddToTopicReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkAddToTopicReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkAddToTopicReputerWhitelistResponse();
        return message;
    },
};
function createBaseBulkRemoveFromTopicReputerWhitelistRequest() {
    return { sender: "", addresses: [], topicId: "0" };
}
exports.BulkRemoveFromTopicReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromTopicReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromTopicReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBulkRemoveFromTopicReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseBulkRemoveFromTopicReputerWhitelistResponse() {
    return {};
}
exports.BulkRemoveFromTopicReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveFromTopicReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.BulkRemoveFromTopicReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseBulkRemoveFromTopicReputerWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromTopicCreatorWhitelistRequest() {
    return { sender: "", address: "" };
}
exports.RemoveFromTopicCreatorWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromTopicCreatorWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromTopicCreatorWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFromTopicCreatorWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFromTopicCreatorWhitelistResponse() {
    return {};
}
exports.RemoveFromTopicCreatorWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromTopicCreatorWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromTopicCreatorWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromTopicCreatorWhitelistResponse();
        return message;
    },
};
function createBaseAddToTopicWorkerWhitelistRequest() {
    return { sender: "", address: "", topicId: "0" };
}
exports.AddToTopicWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToTopicWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.AddToTopicWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAddToTopicWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseAddToTopicWorkerWhitelistResponse() {
    return {};
}
exports.AddToTopicWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToTopicWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToTopicWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToTopicWorkerWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromTopicWorkerWhitelistRequest() {
    return { sender: "", address: "", topicId: "0" };
}
exports.RemoveFromTopicWorkerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromTopicWorkerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromTopicWorkerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRemoveFromTopicWorkerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseRemoveFromTopicWorkerWhitelistResponse() {
    return {};
}
exports.RemoveFromTopicWorkerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromTopicWorkerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromTopicWorkerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromTopicWorkerWhitelistResponse();
        return message;
    },
};
function createBaseAddToTopicReputerWhitelistRequest() {
    return { sender: "", address: "", topicId: "0" };
}
exports.AddToTopicReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToTopicReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.AddToTopicReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAddToTopicReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseAddToTopicReputerWhitelistResponse() {
    return {};
}
exports.AddToTopicReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToTopicReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AddToTopicReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAddToTopicReputerWhitelistResponse();
        return message;
    },
};
function createBaseRemoveFromTopicReputerWhitelistRequest() {
    return { sender: "", address: "", topicId: "0" };
}
exports.RemoveFromTopicReputerWhitelistRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromTopicReputerWhitelistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromTopicReputerWhitelistRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRemoveFromTopicReputerWhitelistRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseRemoveFromTopicReputerWhitelistResponse() {
    return {};
}
exports.RemoveFromTopicReputerWhitelistResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromTopicReputerWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFromTopicReputerWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFromTopicReputerWhitelistResponse();
        return message;
    },
};
exports.MsgServiceServiceName = "emissions.v7.MsgService";
class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceServiceName;
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.CreateNewTopic = this.CreateNewTopic.bind(this);
        this.Register = this.Register.bind(this);
        this.RemoveRegistration = this.RemoveRegistration.bind(this);
        this.AddStake = this.AddStake.bind(this);
        this.RemoveStake = this.RemoveStake.bind(this);
        this.CancelRemoveStake = this.CancelRemoveStake.bind(this);
        this.DelegateStake = this.DelegateStake.bind(this);
        this.RewardDelegateStake = this.RewardDelegateStake.bind(this);
        this.RemoveDelegateStake = this.RemoveDelegateStake.bind(this);
        this.CancelRemoveDelegateStake = this.CancelRemoveDelegateStake.bind(this);
        this.FundTopic = this.FundTopic.bind(this);
        this.AddToWhitelistAdmin = this.AddToWhitelistAdmin.bind(this);
        this.RemoveFromWhitelistAdmin = this.RemoveFromWhitelistAdmin.bind(this);
        this.InsertWorkerPayload = this.InsertWorkerPayload.bind(this);
        this.InsertReputerPayload = this.InsertReputerPayload.bind(this);
        this.AddToGlobalWhitelist = this.AddToGlobalWhitelist.bind(this);
        this.RemoveFromGlobalWhitelist = this.RemoveFromGlobalWhitelist.bind(this);
        this.AddToGlobalWorkerWhitelist = this.AddToGlobalWorkerWhitelist.bind(this);
        this.RemoveFromGlobalWorkerWhitelist = this.RemoveFromGlobalWorkerWhitelist.bind(this);
        this.AddToGlobalReputerWhitelist = this.AddToGlobalReputerWhitelist.bind(this);
        this.RemoveFromGlobalReputerWhitelist = this.RemoveFromGlobalReputerWhitelist.bind(this);
        this.AddToGlobalAdminWhitelist = this.AddToGlobalAdminWhitelist.bind(this);
        this.RemoveFromGlobalAdminWhitelist = this.RemoveFromGlobalAdminWhitelist.bind(this);
        this.BulkAddToGlobalWorkerWhitelist = this.BulkAddToGlobalWorkerWhitelist.bind(this);
        this.BulkRemoveFromGlobalWorkerWhitelist = this.BulkRemoveFromGlobalWorkerWhitelist.bind(this);
        this.BulkAddToGlobalReputerWhitelist = this.BulkAddToGlobalReputerWhitelist.bind(this);
        this.BulkRemoveFromGlobalReputerWhitelist = this.BulkRemoveFromGlobalReputerWhitelist.bind(this);
        this.BulkAddToTopicWorkerWhitelist = this.BulkAddToTopicWorkerWhitelist.bind(this);
        this.BulkRemoveFromTopicWorkerWhitelist = this.BulkRemoveFromTopicWorkerWhitelist.bind(this);
        this.BulkAddToTopicReputerWhitelist = this.BulkAddToTopicReputerWhitelist.bind(this);
        this.BulkRemoveFromTopicReputerWhitelist = this.BulkRemoveFromTopicReputerWhitelist.bind(this);
        this.EnableTopicWorkerWhitelist = this.EnableTopicWorkerWhitelist.bind(this);
        this.DisableTopicWorkerWhitelist = this.DisableTopicWorkerWhitelist.bind(this);
        this.EnableTopicReputerWhitelist = this.EnableTopicReputerWhitelist.bind(this);
        this.DisableTopicReputerWhitelist = this.DisableTopicReputerWhitelist.bind(this);
        this.AddToTopicCreatorWhitelist = this.AddToTopicCreatorWhitelist.bind(this);
        this.RemoveFromTopicCreatorWhitelist = this.RemoveFromTopicCreatorWhitelist.bind(this);
        this.AddToTopicWorkerWhitelist = this.AddToTopicWorkerWhitelist.bind(this);
        this.RemoveFromTopicWorkerWhitelist = this.RemoveFromTopicWorkerWhitelist.bind(this);
        this.AddToTopicReputerWhitelist = this.AddToTopicReputerWhitelist.bind(this);
        this.RemoveFromTopicReputerWhitelist = this.RemoveFromTopicReputerWhitelist.bind(this);
    }
    UpdateParams(request) {
        const data = exports.UpdateParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then((data) => exports.UpdateParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    CreateNewTopic(request) {
        const data = exports.CreateNewTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateNewTopic", data);
        return promise.then((data) => exports.CreateNewTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    Register(request) {
        const data = exports.RegisterRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Register", data);
        return promise.then((data) => exports.RegisterResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveRegistration(request) {
        const data = exports.RemoveRegistrationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveRegistration", data);
        return promise.then((data) => exports.RemoveRegistrationResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddStake(request) {
        const data = exports.AddStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddStake", data);
        return promise.then((data) => exports.AddStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveStake(request) {
        const data = exports.RemoveStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveStake", data);
        return promise.then((data) => exports.RemoveStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    CancelRemoveStake(request) {
        const data = exports.CancelRemoveStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CancelRemoveStake", data);
        return promise.then((data) => exports.CancelRemoveStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    DelegateStake(request) {
        const data = exports.DelegateStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DelegateStake", data);
        return promise.then((data) => exports.DelegateStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    RewardDelegateStake(request) {
        const data = exports.RewardDelegateStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RewardDelegateStake", data);
        return promise.then((data) => exports.RewardDelegateStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveDelegateStake(request) {
        const data = exports.RemoveDelegateStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveDelegateStake", data);
        return promise.then((data) => exports.RemoveDelegateStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    CancelRemoveDelegateStake(request) {
        const data = exports.CancelRemoveDelegateStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CancelRemoveDelegateStake", data);
        return promise.then((data) => exports.CancelRemoveDelegateStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    FundTopic(request) {
        const data = exports.FundTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FundTopic", data);
        return promise.then((data) => exports.FundTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToWhitelistAdmin(request) {
        const data = exports.AddToWhitelistAdminRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToWhitelistAdmin", data);
        return promise.then((data) => exports.AddToWhitelistAdminResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromWhitelistAdmin(request) {
        const data = exports.RemoveFromWhitelistAdminRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromWhitelistAdmin", data);
        return promise.then((data) => exports.RemoveFromWhitelistAdminResponse.decode(new wire_1.BinaryReader(data)));
    }
    InsertWorkerPayload(request) {
        const data = exports.InsertWorkerPayloadRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "InsertWorkerPayload", data);
        return promise.then((data) => exports.InsertWorkerPayloadResponse.decode(new wire_1.BinaryReader(data)));
    }
    InsertReputerPayload(request) {
        const data = exports.InsertReputerPayloadRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "InsertReputerPayload", data);
        return promise.then((data) => exports.InsertReputerPayloadResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToGlobalWhitelist(request) {
        const data = exports.AddToGlobalWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToGlobalWhitelist", data);
        return promise.then((data) => exports.AddToGlobalWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromGlobalWhitelist(request) {
        const data = exports.RemoveFromGlobalWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromGlobalWhitelist", data);
        return promise.then((data) => exports.RemoveFromGlobalWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToGlobalWorkerWhitelist(request) {
        const data = exports.AddToGlobalWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToGlobalWorkerWhitelist", data);
        return promise.then((data) => exports.AddToGlobalWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromGlobalWorkerWhitelist(request) {
        const data = exports.RemoveFromGlobalWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromGlobalWorkerWhitelist", data);
        return promise.then((data) => exports.RemoveFromGlobalWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToGlobalReputerWhitelist(request) {
        const data = exports.AddToGlobalReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToGlobalReputerWhitelist", data);
        return promise.then((data) => exports.AddToGlobalReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromGlobalReputerWhitelist(request) {
        const data = exports.RemoveFromGlobalReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromGlobalReputerWhitelist", data);
        return promise.then((data) => exports.RemoveFromGlobalReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToGlobalAdminWhitelist(request) {
        const data = exports.AddToGlobalAdminWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToGlobalAdminWhitelist", data);
        return promise.then((data) => exports.AddToGlobalAdminWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromGlobalAdminWhitelist(request) {
        const data = exports.RemoveFromGlobalAdminWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromGlobalAdminWhitelist", data);
        return promise.then((data) => exports.RemoveFromGlobalAdminWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkAddToGlobalWorkerWhitelist(request) {
        const data = exports.BulkAddToGlobalWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkAddToGlobalWorkerWhitelist", data);
        return promise.then((data) => exports.BulkAddToGlobalWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkRemoveFromGlobalWorkerWhitelist(request) {
        const data = exports.BulkRemoveFromGlobalWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkRemoveFromGlobalWorkerWhitelist", data);
        return promise.then((data) => exports.BulkRemoveFromGlobalWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkAddToGlobalReputerWhitelist(request) {
        const data = exports.BulkAddToGlobalReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkAddToGlobalReputerWhitelist", data);
        return promise.then((data) => exports.BulkAddToGlobalReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkRemoveFromGlobalReputerWhitelist(request) {
        const data = exports.BulkRemoveFromGlobalReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkRemoveFromGlobalReputerWhitelist", data);
        return promise.then((data) => exports.BulkRemoveFromGlobalReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkAddToTopicWorkerWhitelist(request) {
        const data = exports.BulkAddToTopicWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkAddToTopicWorkerWhitelist", data);
        return promise.then((data) => exports.BulkAddToTopicWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkRemoveFromTopicWorkerWhitelist(request) {
        const data = exports.BulkRemoveFromTopicWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkRemoveFromTopicWorkerWhitelist", data);
        return promise.then((data) => exports.BulkRemoveFromTopicWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkAddToTopicReputerWhitelist(request) {
        const data = exports.BulkAddToTopicReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkAddToTopicReputerWhitelist", data);
        return promise.then((data) => exports.BulkAddToTopicReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    BulkRemoveFromTopicReputerWhitelist(request) {
        const data = exports.BulkRemoveFromTopicReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkRemoveFromTopicReputerWhitelist", data);
        return promise.then((data) => exports.BulkRemoveFromTopicReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    EnableTopicWorkerWhitelist(request) {
        const data = exports.EnableTopicWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EnableTopicWorkerWhitelist", data);
        return promise.then((data) => exports.EnableTopicWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    DisableTopicWorkerWhitelist(request) {
        const data = exports.DisableTopicWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DisableTopicWorkerWhitelist", data);
        return promise.then((data) => exports.DisableTopicWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    EnableTopicReputerWhitelist(request) {
        const data = exports.EnableTopicReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EnableTopicReputerWhitelist", data);
        return promise.then((data) => exports.EnableTopicReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    DisableTopicReputerWhitelist(request) {
        const data = exports.DisableTopicReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DisableTopicReputerWhitelist", data);
        return promise.then((data) => exports.DisableTopicReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToTopicCreatorWhitelist(request) {
        const data = exports.AddToTopicCreatorWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToTopicCreatorWhitelist", data);
        return promise.then((data) => exports.AddToTopicCreatorWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromTopicCreatorWhitelist(request) {
        const data = exports.RemoveFromTopicCreatorWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromTopicCreatorWhitelist", data);
        return promise.then((data) => exports.RemoveFromTopicCreatorWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToTopicWorkerWhitelist(request) {
        const data = exports.AddToTopicWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToTopicWorkerWhitelist", data);
        return promise.then((data) => exports.AddToTopicWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromTopicWorkerWhitelist(request) {
        const data = exports.RemoveFromTopicWorkerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromTopicWorkerWhitelist", data);
        return promise.then((data) => exports.RemoveFromTopicWorkerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToTopicReputerWhitelist(request) {
        const data = exports.AddToTopicReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToTopicReputerWhitelist", data);
        return promise.then((data) => exports.AddToTopicReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromTopicReputerWhitelist(request) {
        const data = exports.RemoveFromTopicReputerWhitelistRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromTopicReputerWhitelist", data);
        return promise.then((data) => exports.RemoveFromTopicReputerWhitelistResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgServiceClientImpl = MsgServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v5/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetWorkerNodeInfoRequest = exports.GetWorkerLatestInferenceByTopicIdResponse = exports.GetWorkerLatestInferenceByTopicIdRequest = exports.GetForecastsAtBlockResponse = exports.GetForecastsAtBlockRequest = exports.GetLatestTopicInferencesResponse = exports.GetLatestTopicInferencesRequest = exports.GetInferencesAtBlockResponse = exports.GetInferencesAtBlockRequest = exports.GetActiveTopicsResponse = exports.GetActiveTopicsRequest = exports.GetTopicResponse = exports.GetTopicRequest = exports.GetNextTopicIdResponse = exports.GetNextTopicIdRequest = exports.GetNetworkLossBundleAtBlockResponse = exports.GetNetworkLossBundleAtBlockRequest = exports.GetTopicStakeResponse = exports.GetTopicStakeRequest = exports.GetStakeFromDelegatorInTopicResponse = exports.GetStakeFromDelegatorInTopicRequest = exports.GetStakeFromDelegatorInTopicInReputerResponse = exports.GetStakeFromDelegatorInTopicInReputerRequest = exports.GetDelegateStakeInTopicInReputerResponse = exports.GetDelegateStakeInTopicInReputerRequest = exports.GetStakeFromReputerInTopicInSelfResponse = exports.GetStakeFromReputerInTopicInSelfRequest = exports.GetMultiReputerStakeInTopicResponse = exports.GetMultiReputerStakeInTopicRequest = exports.GetReputerStakeInTopicResponse = exports.GetReputerStakeInTopicRequest = exports.GetTotalStakeResponse = exports.GetTotalStakeRequest = exports.GetParamsResponse = exports.GetParamsRequest = exports.GetOneOutForecasterForecasterNetworkRegretResponse = exports.GetOneOutForecasterForecasterNetworkRegretRequest = exports.GetOneOutForecasterInfererNetworkRegretResponse = exports.GetOneOutForecasterInfererNetworkRegretRequest = exports.GetOneOutInfererForecasterNetworkRegretResponse = exports.GetOneOutInfererForecasterNetworkRegretRequest = exports.GetOneOutInfererInfererNetworkRegretResponse = exports.GetOneOutInfererInfererNetworkRegretRequest = exports.GetNaiveInfererNetworkRegretResponse = exports.GetNaiveInfererNetworkRegretRequest = exports.GetCountForecasterInclusionsInTopicResponse = exports.GetCountForecasterInclusionsInTopicRequest = exports.GetCountInfererInclusionsInTopicResponse = exports.GetCountInfererInclusionsInTopicRequest = exports.protobufPackage = void 0;
exports.GetDelegateStakeUponReputerRequest = exports.GetDelegateStakePlacementResponse = exports.GetDelegateStakePlacementRequest = exports.GetStakeReputerAuthorityResponse = exports.GetStakeReputerAuthorityRequest = exports.GetReputerLossBundlesAtBlockResponse = exports.GetReputerLossBundlesAtBlockRequest = exports.GetTopicRewardNonceResponse = exports.GetTopicRewardNonceRequest = exports.GetTopicLastReputerCommitInfoResponse = exports.GetTopicLastReputerCommitInfoRequest = exports.GetTopicLastWorkerCommitInfoResponse = exports.GetTopicLastWorkerCommitInfoRequest = exports.GetDelegateStakeRemovalInfoResponse = exports.GetDelegateStakeRemovalInfoRequest = exports.GetStakeRemovalInfoResponse = exports.GetStakeRemovalInfoRequest = exports.GetDelegateStakeRemovalsUpUntilBlockResponse = exports.GetDelegateStakeRemovalsUpUntilBlockRequest = exports.GetStakeRemovalsUpUntilBlockResponse = exports.GetStakeRemovalsUpUntilBlockRequest = exports.IsWhitelistAdminResponse = exports.IsWhitelistAdminRequest = exports.IsReputerRegisteredInTopicIdResponse = exports.IsReputerRegisteredInTopicIdRequest = exports.IsWorkerRegisteredInTopicIdResponse = exports.IsWorkerRegisteredInTopicIdRequest = exports.GetLatestAvailableNetworkInferencesResponse = exports.GetLatestNetworkInferencesResponse = exports.GetNetworkInferencesAtBlockResponse = exports.IsReputerNonceUnfulfilledResponse = exports.IsReputerNonceUnfulfilledRequest = exports.GetOneInForecasterNetworkRegretResponse = exports.GetOneInForecasterNetworkRegretRequest = exports.GetForecasterNetworkRegretResponse = exports.GetForecasterNetworkRegretRequest = exports.GetInfererNetworkRegretResponse = exports.GetInfererNetworkRegretRequest = exports.GetUnfulfilledWorkerNoncesResponse = exports.GetUnfulfilledWorkerNoncesRequest = exports.GetUnfulfilledReputerNoncesResponse = exports.GetUnfulfilledReputerNoncesRequest = exports.IsWorkerNonceUnfulfilledResponse = exports.IsWorkerNonceUnfulfilledRequest = exports.GetLatestAvailableNetworkInferencesRequest = exports.GetLatestNetworkInferencesRequest = exports.GetNetworkInferencesAtBlockRequest = exports.GetReputerNodeInfoResponse = exports.GetReputerNodeInfoRequest = exports.GetWorkerNodeInfoResponse = void 0;
exports.GetPreviousInferenceRewardFractionRequest = exports.GetPreviousReputerRewardFractionResponse = exports.GetPreviousReputerRewardFractionRequest = exports.GetListeningCoefficientResponse = exports.GetListeningCoefficientRequest = exports.GetCurrentLowestReputerScoreResponse = exports.GetCurrentLowestReputerScoreRequest = exports.GetReputersScoresAtBlockResponse = exports.GetReputersScoresAtBlockRequest = exports.GetCurrentLowestForecasterScoreResponse = exports.GetCurrentLowestForecasterScoreRequest = exports.GetWorkerForecastScoresAtBlockResponse = exports.GetWorkerForecastScoresAtBlockRequest = exports.GetForecastScoresUntilBlockResponse = exports.GetForecastScoresUntilBlockRequest = exports.GetCurrentLowestInfererScoreResponse = exports.GetCurrentLowestInfererScoreRequest = exports.GetWorkerInferenceScoresAtBlockResponse = exports.GetWorkerInferenceScoresAtBlockRequest = exports.GetPreviousTopicQuantileReputerScoreEmaResponse = exports.GetPreviousTopicQuantileReputerScoreEmaRequest = exports.GetPreviousTopicQuantileInfererScoreEmaResponse = exports.GetPreviousTopicQuantileInfererScoreEmaRequest = exports.GetPreviousTopicQuantileForecasterScoreEmaResponse = exports.GetPreviousTopicQuantileForecasterScoreEmaRequest = exports.GetInferenceScoresUntilBlockResponse = exports.GetInferenceScoresUntilBlockRequest = exports.GetReputerScoreEmaResponse = exports.GetReputerScoreEmaRequest = exports.GetForecasterScoreEmaResponse = exports.GetForecasterScoreEmaRequest = exports.GetInfererScoreEmaResponse = exports.GetInfererScoreEmaRequest = exports.GetTopicFeeRevenueResponse = exports.GetTopicFeeRevenueRequest = exports.IsTopicActiveResponse = exports.IsTopicActiveRequest = exports.TopicExistsResponse = exports.TopicExistsRequest = exports.GetTotalSumPreviousTopicWeightsResponse = exports.GetTotalSumPreviousTopicWeightsRequest = exports.GetPreviousTopicWeightResponse = exports.GetPreviousTopicWeightRequest = exports.GetDelegateStakeRemovalResponse = exports.GetDelegateStakeRemovalRequest = exports.GetStakeRemovalForReputerAndTopicIdResponse = exports.GetStakeRemovalForReputerAndTopicIdRequest = exports.GetDelegateRewardPerShareResponse = exports.GetDelegateRewardPerShareRequest = exports.GetDelegateStakeUponReputerResponse = void 0;
exports.QueryServiceClientImpl = exports.QueryServiceServiceName = exports.GetActiveInferersForTopicResponse = exports.GetActiveInferersForTopicRequest = exports.GetActiveForecastersForTopicResponse = exports.GetActiveForecastersForTopicRequest = exports.GetActiveReputersForTopicResponse = exports.GetActiveReputersForTopicRequest = exports.GetNextChurningBlockByTopicIdResponse = exports.GetNextChurningBlockByTopicIdRequest = exports.GetActiveTopicsAtBlockResponse = exports.GetActiveTopicsAtBlockRequest = exports.GetTotalRewardToDistributeResponse = exports.GetTotalRewardToDistributeRequest = exports.GetPreviousPercentageRewardToStakedReputersResponse = exports.GetPreviousPercentageRewardToStakedReputersRequest = exports.GetPreviousForecastRewardFractionResponse = exports.GetPreviousForecastRewardFractionRequest = exports.GetPreviousInferenceRewardFractionResponse = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const inference_1 = require("../v3/inference");
const node_1 = require("../v3/node");
const nonce_1 = require("../v3/nonce");
const reputer_1 = require("../v3/reputer");
const score_1 = require("../v3/score");
const stake_1 = require("../v3/stake");
const topic_1 = require("../v3/topic");
const types_1 = require("../v3/types");
const worker_1 = require("../v3/worker");
const params_1 = require("./params");
exports.protobufPackage = "emissions.v5";
function createBaseGetCountInfererInclusionsInTopicRequest() {
    return { topicId: "0", inferer: "" };
}
exports.GetCountInfererInclusionsInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.inferer !== "") {
            writer.uint32(18).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCountInfererInclusionsInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.GetCountInfererInclusionsInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetCountInfererInclusionsInTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.inferer = (_b = object.inferer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetCountInfererInclusionsInTopicResponse() {
    return { count: "0" };
}
exports.GetCountInfererInclusionsInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.count !== "0") {
            writer.uint32(8).uint64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCountInfererInclusionsInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.count = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { count: isSet(object.count) ? globalThis.String(object.count) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.count !== "0") {
            obj.count = message.count;
        }
        return obj;
    },
    create(base) {
        return exports.GetCountInfererInclusionsInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCountInfererInclusionsInTopicResponse();
        message.count = (_a = object.count) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetCountForecasterInclusionsInTopicRequest() {
    return { topicId: "0", forecaster: "" };
}
exports.GetCountForecasterInclusionsInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.forecaster !== "") {
            writer.uint32(18).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCountForecasterInclusionsInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.GetCountForecasterInclusionsInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetCountForecasterInclusionsInTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.forecaster = (_b = object.forecaster) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetCountForecasterInclusionsInTopicResponse() {
    return { count: "0" };
}
exports.GetCountForecasterInclusionsInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.count !== "0") {
            writer.uint32(8).uint64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCountForecasterInclusionsInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.count = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { count: isSet(object.count) ? globalThis.String(object.count) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.count !== "0") {
            obj.count = message.count;
        }
        return obj;
    },
    create(base) {
        return exports.GetCountForecasterInclusionsInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCountForecasterInclusionsInTopicResponse();
        message.count = (_a = object.count) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetNaiveInfererNetworkRegretRequest() {
    return { topicId: "0", inferer: "" };
}
exports.GetNaiveInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.inferer !== "") {
            writer.uint32(18).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNaiveInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.GetNaiveInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetNaiveInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.inferer = (_b = object.inferer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetNaiveInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetNaiveInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNaiveInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetNaiveInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetNaiveInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetOneOutInfererInfererNetworkRegretRequest() {
    return { topicId: "0", oneOutInferer: "", inferer: "" };
}
exports.GetOneOutInfererInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutInferer !== "") {
            writer.uint32(18).string(message.oneOutInferer);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutInfererInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutInferer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutInferer: isSet(object.oneOutInferer) ? globalThis.String(object.oneOutInferer) : "",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutInferer !== "") {
            obj.oneOutInferer = message.oneOutInferer;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutInfererInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetOneOutInfererInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutInferer = (_b = object.oneOutInferer) !== null && _b !== void 0 ? _b : "";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetOneOutInfererInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetOneOutInfererInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutInfererInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutInfererInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOneOutInfererInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetOneOutInfererForecasterNetworkRegretRequest() {
    return { topicId: "0", oneOutInferer: "", forecaster: "" };
}
exports.GetOneOutInfererForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutInferer !== "") {
            writer.uint32(18).string(message.oneOutInferer);
        }
        if (message.forecaster !== "") {
            writer.uint32(26).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutInfererForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutInferer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutInferer: isSet(object.oneOutInferer) ? globalThis.String(object.oneOutInferer) : "",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutInferer !== "") {
            obj.oneOutInferer = message.oneOutInferer;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutInfererForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetOneOutInfererForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutInferer = (_b = object.oneOutInferer) !== null && _b !== void 0 ? _b : "";
        message.forecaster = (_c = object.forecaster) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetOneOutInfererForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetOneOutInfererForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutInfererForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutInfererForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOneOutInfererForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetOneOutForecasterInfererNetworkRegretRequest() {
    return { topicId: "0", oneOutForecaster: "", inferer: "" };
}
exports.GetOneOutForecasterInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutForecaster !== "") {
            writer.uint32(18).string(message.oneOutForecaster);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutForecasterInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutForecaster = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutForecaster: isSet(object.oneOutForecaster) ? globalThis.String(object.oneOutForecaster) : "",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutForecaster !== "") {
            obj.oneOutForecaster = message.oneOutForecaster;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutForecasterInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetOneOutForecasterInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutForecaster = (_b = object.oneOutForecaster) !== null && _b !== void 0 ? _b : "";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetOneOutForecasterInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetOneOutForecasterInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutForecasterInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutForecasterInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOneOutForecasterInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetOneOutForecasterForecasterNetworkRegretRequest() {
    return { topicId: "0", oneOutForecaster: "", forecaster: "" };
}
exports.GetOneOutForecasterForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutForecaster !== "") {
            writer.uint32(18).string(message.oneOutForecaster);
        }
        if (message.forecaster !== "") {
            writer.uint32(26).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutForecasterForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutForecaster = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutForecaster: isSet(object.oneOutForecaster) ? globalThis.String(object.oneOutForecaster) : "",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutForecaster !== "") {
            obj.oneOutForecaster = message.oneOutForecaster;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutForecasterForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetOneOutForecasterForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutForecaster = (_b = object.oneOutForecaster) !== null && _b !== void 0 ? _b : "";
        message.forecaster = (_c = object.forecaster) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetOneOutForecasterForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetOneOutForecasterForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneOutForecasterForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetOneOutForecasterForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOneOutForecasterForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetParamsRequest() {
    return {};
}
exports.GetParamsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetParamsRequest();
        return message;
    },
};
function createBaseGetParamsResponse() {
    return { params: undefined };
}
exports.GetParamsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.GetParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseGetTotalStakeRequest() {
    return {};
}
exports.GetTotalStakeRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTotalStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetTotalStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetTotalStakeRequest();
        return message;
    },
};
function createBaseGetTotalStakeResponse() {
    return { amount: "" };
}
exports.GetTotalStakeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTotalStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetTotalStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTotalStakeResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetReputerStakeInTopicRequest() {
    return { address: "", topicId: "0" };
}
exports.GetReputerStakeInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerStakeInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerStakeInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetReputerStakeInTopicRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetReputerStakeInTopicResponse() {
    return { amount: "" };
}
exports.GetReputerStakeInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerStakeInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerStakeInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetReputerStakeInTopicResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetMultiReputerStakeInTopicRequest() {
    return { addresses: [], topicId: "0" };
}
exports.GetMultiReputerStakeInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.addresses) {
            writer.uint32(10).string(v);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMultiReputerStakeInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetMultiReputerStakeInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetMultiReputerStakeInTopicRequest();
        message.addresses = ((_a = object.addresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetMultiReputerStakeInTopicResponse() {
    return { amounts: [] };
}
exports.GetMultiReputerStakeInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.amounts) {
            stake_1.StakeInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMultiReputerStakeInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amounts.push(stake_1.StakeInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amounts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.amounts) ? object.amounts.map((e) => stake_1.StakeInfo.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.amounts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.amounts = message.amounts.map((e) => stake_1.StakeInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetMultiReputerStakeInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetMultiReputerStakeInTopicResponse();
        message.amounts = ((_a = object.amounts) === null || _a === void 0 ? void 0 : _a.map((e) => stake_1.StakeInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetStakeFromReputerInTopicInSelfRequest() {
    return { reputerAddress: "", topicId: "0" };
}
exports.GetStakeFromReputerInTopicInSelfRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputerAddress !== "") {
            writer.uint32(10).string(message.reputerAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeFromReputerInTopicInSelfRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputerAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputerAddress !== "") {
            obj.reputerAddress = message.reputerAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeFromReputerInTopicInSelfRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetStakeFromReputerInTopicInSelfRequest();
        message.reputerAddress = (_a = object.reputerAddress) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetStakeFromReputerInTopicInSelfResponse() {
    return { amount: "" };
}
exports.GetStakeFromReputerInTopicInSelfResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeFromReputerInTopicInSelfResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeFromReputerInTopicInSelfResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetStakeFromReputerInTopicInSelfResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDelegateStakeInTopicInReputerRequest() {
    return { reputerAddress: "", topicId: "0" };
}
exports.GetDelegateStakeInTopicInReputerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputerAddress !== "") {
            writer.uint32(10).string(message.reputerAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeInTopicInReputerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputerAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputerAddress !== "") {
            obj.reputerAddress = message.reputerAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeInTopicInReputerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetDelegateStakeInTopicInReputerRequest();
        message.reputerAddress = (_a = object.reputerAddress) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetDelegateStakeInTopicInReputerResponse() {
    return { amount: "" };
}
exports.GetDelegateStakeInTopicInReputerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeInTopicInReputerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeInTopicInReputerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDelegateStakeInTopicInReputerResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetStakeFromDelegatorInTopicInReputerRequest() {
    return { delegatorAddress: "", reputerAddress: "", topicId: "0" };
}
exports.GetStakeFromDelegatorInTopicInReputerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.reputerAddress !== "") {
            writer.uint32(18).string(message.reputerAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeFromDelegatorInTopicInReputerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegatorAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputerAddress = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
            reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegatorAddress !== "") {
            obj.delegatorAddress = message.delegatorAddress;
        }
        if (message.reputerAddress !== "") {
            obj.reputerAddress = message.reputerAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeFromDelegatorInTopicInReputerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetStakeFromDelegatorInTopicInReputerRequest();
        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : "";
        message.reputerAddress = (_b = object.reputerAddress) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseGetStakeFromDelegatorInTopicInReputerResponse() {
    return { amount: "" };
}
exports.GetStakeFromDelegatorInTopicInReputerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeFromDelegatorInTopicInReputerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeFromDelegatorInTopicInReputerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetStakeFromDelegatorInTopicInReputerResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetStakeFromDelegatorInTopicRequest() {
    return { delegatorAddress: "", topicId: "0" };
}
exports.GetStakeFromDelegatorInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeFromDelegatorInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegatorAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegatorAddress !== "") {
            obj.delegatorAddress = message.delegatorAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeFromDelegatorInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetStakeFromDelegatorInTopicRequest();
        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetStakeFromDelegatorInTopicResponse() {
    return { amount: "" };
}
exports.GetStakeFromDelegatorInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeFromDelegatorInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeFromDelegatorInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetStakeFromDelegatorInTopicResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetTopicStakeRequest() {
    return { topicId: "0" };
}
exports.GetTopicStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicStakeRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicStakeResponse() {
    return { amount: "" };
}
exports.GetTopicStakeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicStakeResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetNetworkLossBundleAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetNetworkLossBundleAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNetworkLossBundleAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetNetworkLossBundleAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetNetworkLossBundleAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetNetworkLossBundleAtBlockResponse() {
    return { lossBundle: undefined };
}
exports.GetNetworkLossBundleAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lossBundle !== undefined) {
            reputer_1.ValueBundle.encode(message.lossBundle, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNetworkLossBundleAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lossBundle = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lossBundle: isSet(object.lossBundle) ? reputer_1.ValueBundle.fromJSON(object.lossBundle) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lossBundle !== undefined) {
            obj.lossBundle = reputer_1.ValueBundle.toJSON(message.lossBundle);
        }
        return obj;
    },
    create(base) {
        return exports.GetNetworkLossBundleAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetNetworkLossBundleAtBlockResponse();
        message.lossBundle = (object.lossBundle !== undefined && object.lossBundle !== null)
            ? reputer_1.ValueBundle.fromPartial(object.lossBundle)
            : undefined;
        return message;
    },
};
function createBaseGetNextTopicIdRequest() {
    return {};
}
exports.GetNextTopicIdRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNextTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetNextTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetNextTopicIdRequest();
        return message;
    },
};
function createBaseGetNextTopicIdResponse() {
    return { nextTopicId: "0" };
}
exports.GetNextTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nextTopicId !== "0") {
            writer.uint32(8).uint64(message.nextTopicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNextTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.nextTopicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nextTopicId: isSet(object.nextTopicId) ? globalThis.String(object.nextTopicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.nextTopicId !== "0") {
            obj.nextTopicId = message.nextTopicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetNextTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetNextTopicIdResponse();
        message.nextTopicId = (_a = object.nextTopicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicRequest() {
    return { topicId: "0" };
}
exports.GetTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicResponse() {
    return { topic: undefined, weight: "", effectiveRevenue: "" };
}
exports.GetTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topic !== undefined) {
            topic_1.Topic.encode(message.topic, writer.uint32(10).fork()).join();
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        if (message.effectiveRevenue !== "") {
            writer.uint32(26).string(message.effectiveRevenue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topic = topic_1.Topic.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.effectiveRevenue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topic: isSet(object.topic) ? topic_1.Topic.fromJSON(object.topic) : undefined,
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
            effectiveRevenue: isSet(object.effectiveRevenue) ? globalThis.String(object.effectiveRevenue) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topic !== undefined) {
            obj.topic = topic_1.Topic.toJSON(message.topic);
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        if (message.effectiveRevenue !== "") {
            obj.effectiveRevenue = message.effectiveRevenue;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetTopicResponse();
        message.topic = (object.topic !== undefined && object.topic !== null) ? topic_1.Topic.fromPartial(object.topic) : undefined;
        message.weight = (_a = object.weight) !== null && _a !== void 0 ? _a : "";
        message.effectiveRevenue = (_b = object.effectiveRevenue) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetActiveTopicsRequest() {
    return { pagination: undefined };
}
exports.GetActiveTopicsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            types_1.SimpleCursorPaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveTopicsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = types_1.SimpleCursorPaginationRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? types_1.SimpleCursorPaginationRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = types_1.SimpleCursorPaginationRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveTopicsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveTopicsRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? types_1.SimpleCursorPaginationRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseGetActiveTopicsResponse() {
    return { topics: [], pagination: undefined };
}
exports.GetActiveTopicsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.topics) {
            topic_1.Topic.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            types_1.SimpleCursorPaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveTopicsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topics.push(topic_1.Topic.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = types_1.SimpleCursorPaginationResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => topic_1.Topic.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? types_1.SimpleCursorPaginationResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => topic_1.Topic.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = types_1.SimpleCursorPaginationResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveTopicsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveTopicsResponse();
        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => topic_1.Topic.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? types_1.SimpleCursorPaginationResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseGetInferencesAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetInferencesAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInferencesAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetInferencesAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetInferencesAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetInferencesAtBlockResponse() {
    return { inferences: undefined };
}
exports.GetInferencesAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferences !== undefined) {
            worker_1.Inferences.encode(message.inferences, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInferencesAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferences = worker_1.Inferences.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { inferences: isSet(object.inferences) ? worker_1.Inferences.fromJSON(object.inferences) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferences !== undefined) {
            obj.inferences = worker_1.Inferences.toJSON(message.inferences);
        }
        return obj;
    },
    create(base) {
        return exports.GetInferencesAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetInferencesAtBlockResponse();
        message.inferences = (object.inferences !== undefined && object.inferences !== null)
            ? worker_1.Inferences.fromPartial(object.inferences)
            : undefined;
        return message;
    },
};
function createBaseGetLatestTopicInferencesRequest() {
    return { topicId: "0" };
}
exports.GetLatestTopicInferencesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLatestTopicInferencesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetLatestTopicInferencesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetLatestTopicInferencesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetLatestTopicInferencesResponse() {
    return { inferences: undefined, blockHeight: "0" };
}
exports.GetLatestTopicInferencesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferences !== undefined) {
            worker_1.Inferences.encode(message.inferences, writer.uint32(10).fork()).join();
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLatestTopicInferencesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferences = worker_1.Inferences.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferences: isSet(object.inferences) ? worker_1.Inferences.fromJSON(object.inferences) : undefined,
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferences !== undefined) {
            obj.inferences = worker_1.Inferences.toJSON(message.inferences);
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetLatestTopicInferencesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetLatestTopicInferencesResponse();
        message.inferences = (object.inferences !== undefined && object.inferences !== null)
            ? worker_1.Inferences.fromPartial(object.inferences)
            : undefined;
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetForecastsAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetForecastsAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecastsAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetForecastsAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetForecastsAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetForecastsAtBlockResponse() {
    return { forecasts: undefined };
}
exports.GetForecastsAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.forecasts !== undefined) {
            worker_1.Forecasts.encode(message.forecasts, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecastsAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.forecasts = worker_1.Forecasts.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { forecasts: isSet(object.forecasts) ? worker_1.Forecasts.fromJSON(object.forecasts) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.forecasts !== undefined) {
            obj.forecasts = worker_1.Forecasts.toJSON(message.forecasts);
        }
        return obj;
    },
    create(base) {
        return exports.GetForecastsAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetForecastsAtBlockResponse();
        message.forecasts = (object.forecasts !== undefined && object.forecasts !== null)
            ? worker_1.Forecasts.fromPartial(object.forecasts)
            : undefined;
        return message;
    },
};
function createBaseGetWorkerLatestInferenceByTopicIdRequest() {
    return { topicId: "0", workerAddress: "" };
}
exports.GetWorkerLatestInferenceByTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.workerAddress !== "") {
            writer.uint32(18).string(message.workerAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerLatestInferenceByTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.workerAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            workerAddress: isSet(object.workerAddress) ? globalThis.String(object.workerAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.workerAddress !== "") {
            obj.workerAddress = message.workerAddress;
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerLatestInferenceByTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetWorkerLatestInferenceByTopicIdRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.workerAddress = (_b = object.workerAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetWorkerLatestInferenceByTopicIdResponse() {
    return { latestInference: undefined };
}
exports.GetWorkerLatestInferenceByTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.latestInference !== undefined) {
            worker_1.Inference.encode(message.latestInference, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerLatestInferenceByTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.latestInference = worker_1.Inference.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { latestInference: isSet(object.latestInference) ? worker_1.Inference.fromJSON(object.latestInference) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.latestInference !== undefined) {
            obj.latestInference = worker_1.Inference.toJSON(message.latestInference);
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerLatestInferenceByTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetWorkerLatestInferenceByTopicIdResponse();
        message.latestInference = (object.latestInference !== undefined && object.latestInference !== null)
            ? worker_1.Inference.fromPartial(object.latestInference)
            : undefined;
        return message;
    },
};
function createBaseGetWorkerNodeInfoRequest() {
    return { address: "" };
}
exports.GetWorkerNodeInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerNodeInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerNodeInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetWorkerNodeInfoRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetWorkerNodeInfoResponse() {
    return { nodeInfo: undefined };
}
exports.GetWorkerNodeInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nodeInfo !== undefined) {
            node_1.OffchainNode.encode(message.nodeInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerNodeInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nodeInfo = node_1.OffchainNode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nodeInfo: isSet(object.nodeInfo) ? node_1.OffchainNode.fromJSON(object.nodeInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeInfo !== undefined) {
            obj.nodeInfo = node_1.OffchainNode.toJSON(message.nodeInfo);
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerNodeInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetWorkerNodeInfoResponse();
        message.nodeInfo = (object.nodeInfo !== undefined && object.nodeInfo !== null)
            ? node_1.OffchainNode.fromPartial(object.nodeInfo)
            : undefined;
        return message;
    },
};
function createBaseGetReputerNodeInfoRequest() {
    return { address: "" };
}
exports.GetReputerNodeInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerNodeInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerNodeInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetReputerNodeInfoRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetReputerNodeInfoResponse() {
    return { nodeInfo: undefined };
}
exports.GetReputerNodeInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nodeInfo !== undefined) {
            node_1.OffchainNode.encode(message.nodeInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerNodeInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nodeInfo = node_1.OffchainNode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nodeInfo: isSet(object.nodeInfo) ? node_1.OffchainNode.fromJSON(object.nodeInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeInfo !== undefined) {
            obj.nodeInfo = node_1.OffchainNode.toJSON(message.nodeInfo);
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerNodeInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetReputerNodeInfoResponse();
        message.nodeInfo = (object.nodeInfo !== undefined && object.nodeInfo !== null)
            ? node_1.OffchainNode.fromPartial(object.nodeInfo)
            : undefined;
        return message;
    },
};
function createBaseGetNetworkInferencesAtBlockRequest() {
    return { topicId: "0", blockHeightLastInference: "0" };
}
exports.GetNetworkInferencesAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeightLastInference !== "0") {
            writer.uint32(16).int64(message.blockHeightLastInference);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNetworkInferencesAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeightLastInference = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeightLastInference: isSet(object.blockHeightLastInference)
                ? globalThis.String(object.blockHeightLastInference)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeightLastInference !== "0") {
            obj.blockHeightLastInference = message.blockHeightLastInference;
        }
        return obj;
    },
    create(base) {
        return exports.GetNetworkInferencesAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetNetworkInferencesAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeightLastInference = (_b = object.blockHeightLastInference) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetLatestNetworkInferencesRequest() {
    return { topicId: "0" };
}
exports.GetLatestNetworkInferencesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLatestNetworkInferencesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetLatestNetworkInferencesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetLatestNetworkInferencesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetLatestAvailableNetworkInferencesRequest() {
    return { topicId: "0" };
}
exports.GetLatestAvailableNetworkInferencesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLatestAvailableNetworkInferencesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetLatestAvailableNetworkInferencesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetLatestAvailableNetworkInferencesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseIsWorkerNonceUnfulfilledRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.IsWorkerNonceUnfulfilledRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsWorkerNonceUnfulfilledRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.IsWorkerNonceUnfulfilledRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseIsWorkerNonceUnfulfilledRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseIsWorkerNonceUnfulfilledResponse() {
    return { isWorkerNonceUnfulfilled: false };
}
exports.IsWorkerNonceUnfulfilledResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isWorkerNonceUnfulfilled !== false) {
            writer.uint32(8).bool(message.isWorkerNonceUnfulfilled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsWorkerNonceUnfulfilledResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isWorkerNonceUnfulfilled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isWorkerNonceUnfulfilled: isSet(object.isWorkerNonceUnfulfilled)
                ? globalThis.Boolean(object.isWorkerNonceUnfulfilled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isWorkerNonceUnfulfilled !== false) {
            obj.isWorkerNonceUnfulfilled = message.isWorkerNonceUnfulfilled;
        }
        return obj;
    },
    create(base) {
        return exports.IsWorkerNonceUnfulfilledResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsWorkerNonceUnfulfilledResponse();
        message.isWorkerNonceUnfulfilled = (_a = object.isWorkerNonceUnfulfilled) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseGetUnfulfilledReputerNoncesRequest() {
    return { topicId: "0" };
}
exports.GetUnfulfilledReputerNoncesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnfulfilledReputerNoncesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetUnfulfilledReputerNoncesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetUnfulfilledReputerNoncesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetUnfulfilledReputerNoncesResponse() {
    return { nonces: undefined };
}
exports.GetUnfulfilledReputerNoncesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nonces !== undefined) {
            nonce_1.ReputerRequestNonces.encode(message.nonces, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnfulfilledReputerNoncesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nonces = nonce_1.ReputerRequestNonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonces: isSet(object.nonces) ? nonce_1.ReputerRequestNonces.fromJSON(object.nonces) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nonces !== undefined) {
            obj.nonces = nonce_1.ReputerRequestNonces.toJSON(message.nonces);
        }
        return obj;
    },
    create(base) {
        return exports.GetUnfulfilledReputerNoncesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetUnfulfilledReputerNoncesResponse();
        message.nonces = (object.nonces !== undefined && object.nonces !== null)
            ? nonce_1.ReputerRequestNonces.fromPartial(object.nonces)
            : undefined;
        return message;
    },
};
function createBaseGetUnfulfilledWorkerNoncesRequest() {
    return { topicId: "0" };
}
exports.GetUnfulfilledWorkerNoncesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnfulfilledWorkerNoncesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetUnfulfilledWorkerNoncesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetUnfulfilledWorkerNoncesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetUnfulfilledWorkerNoncesResponse() {
    return { nonces: undefined };
}
exports.GetUnfulfilledWorkerNoncesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nonces !== undefined) {
            nonce_1.Nonces.encode(message.nonces, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnfulfilledWorkerNoncesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nonces = nonce_1.Nonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonces: isSet(object.nonces) ? nonce_1.Nonces.fromJSON(object.nonces) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nonces !== undefined) {
            obj.nonces = nonce_1.Nonces.toJSON(message.nonces);
        }
        return obj;
    },
    create(base) {
        return exports.GetUnfulfilledWorkerNoncesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetUnfulfilledWorkerNoncesResponse();
        message.nonces = (object.nonces !== undefined && object.nonces !== null)
            ? nonce_1.Nonces.fromPartial(object.nonces)
            : undefined;
        return message;
    },
};
function createBaseGetInfererNetworkRegretRequest() {
    return { topicId: "0", actorId: "" };
}
exports.GetInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        return obj;
    },
    create(base) {
        return exports.GetInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetForecasterNetworkRegretRequest() {
    return { topicId: "0", worker: "" };
}
exports.GetForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.worker !== "") {
            writer.uint32(18).string(message.worker);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        return obj;
    },
    create(base) {
        return exports.GetForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.worker = (_b = object.worker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseGetOneInForecasterNetworkRegretRequest() {
    return { topicId: "0", forecaster: "", inferer: "" };
}
exports.GetOneInForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.forecaster !== "") {
            writer.uint32(18).string(message.forecaster);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneInForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.GetOneInForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetOneInForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.forecaster = (_b = object.forecaster) !== null && _b !== void 0 ? _b : "";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetOneInForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.GetOneInForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOneInForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.GetOneInForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOneInForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseIsReputerNonceUnfulfilledRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.IsReputerNonceUnfulfilledRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsReputerNonceUnfulfilledRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.IsReputerNonceUnfulfilledRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseIsReputerNonceUnfulfilledRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseIsReputerNonceUnfulfilledResponse() {
    return { isReputerNonceUnfulfilled: false };
}
exports.IsReputerNonceUnfulfilledResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isReputerNonceUnfulfilled !== false) {
            writer.uint32(8).bool(message.isReputerNonceUnfulfilled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsReputerNonceUnfulfilledResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isReputerNonceUnfulfilled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isReputerNonceUnfulfilled: isSet(object.isReputerNonceUnfulfilled)
                ? globalThis.Boolean(object.isReputerNonceUnfulfilled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isReputerNonceUnfulfilled !== false) {
            obj.isReputerNonceUnfulfilled = message.isReputerNonceUnfulfilled;
        }
        return obj;
    },
    create(base) {
        return exports.IsReputerNonceUnfulfilledResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsReputerNonceUnfulfilledResponse();
        message.isReputerNonceUnfulfilled = (_a = object.isReputerNonceUnfulfilled) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseGetNetworkInferencesAtBlockResponse() {
    return { networkInferences: undefined };
}
exports.GetNetworkInferencesAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.networkInferences !== undefined) {
            reputer_1.ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNetworkInferencesAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.networkInferences = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            networkInferences: isSet(object.networkInferences) ? reputer_1.ValueBundle.fromJSON(object.networkInferences) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.networkInferences !== undefined) {
            obj.networkInferences = reputer_1.ValueBundle.toJSON(message.networkInferences);
        }
        return obj;
    },
    create(base) {
        return exports.GetNetworkInferencesAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetNetworkInferencesAtBlockResponse();
        message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
            ? reputer_1.ValueBundle.fromPartial(object.networkInferences)
            : undefined;
        return message;
    },
};
function createBaseGetLatestNetworkInferencesResponse() {
    return {
        networkInferences: undefined,
        infererWeights: [],
        forecasterWeights: [],
        inferenceBlockHeight: "0",
        lossBlockHeight: "0",
        confidenceIntervalRawPercentiles: [],
        confidenceIntervalValues: [],
    };
}
exports.GetLatestNetworkInferencesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.networkInferences !== undefined) {
            reputer_1.ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
        }
        for (const v of message.infererWeights) {
            inference_1.RegretInformedWeight.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.forecasterWeights) {
            inference_1.RegretInformedWeight.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.inferenceBlockHeight !== "0") {
            writer.uint32(40).int64(message.inferenceBlockHeight);
        }
        if (message.lossBlockHeight !== "0") {
            writer.uint32(48).int64(message.lossBlockHeight);
        }
        for (const v of message.confidenceIntervalRawPercentiles) {
            writer.uint32(58).string(v);
        }
        for (const v of message.confidenceIntervalValues) {
            writer.uint32(66).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLatestNetworkInferencesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.networkInferences = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.infererWeights.push(inference_1.RegretInformedWeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecasterWeights.push(inference_1.RegretInformedWeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.inferenceBlockHeight = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.lossBlockHeight = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.confidenceIntervalRawPercentiles.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.confidenceIntervalValues.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            networkInferences: isSet(object.networkInferences) ? reputer_1.ValueBundle.fromJSON(object.networkInferences) : undefined,
            infererWeights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererWeights)
                ? object.infererWeights.map((e) => inference_1.RegretInformedWeight.fromJSON(e))
                : [],
            forecasterWeights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterWeights)
                ? object.forecasterWeights.map((e) => inference_1.RegretInformedWeight.fromJSON(e))
                : [],
            inferenceBlockHeight: isSet(object.inferenceBlockHeight) ? globalThis.String(object.inferenceBlockHeight) : "0",
            lossBlockHeight: isSet(object.lossBlockHeight) ? globalThis.String(object.lossBlockHeight) : "0",
            confidenceIntervalRawPercentiles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.confidenceIntervalRawPercentiles)
                ? object.confidenceIntervalRawPercentiles.map((e) => globalThis.String(e))
                : [],
            confidenceIntervalValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.confidenceIntervalValues)
                ? object.confidenceIntervalValues.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d;
        const obj = {};
        if (message.networkInferences !== undefined) {
            obj.networkInferences = reputer_1.ValueBundle.toJSON(message.networkInferences);
        }
        if ((_a = message.infererWeights) === null || _a === void 0 ? void 0 : _a.length) {
            obj.infererWeights = message.infererWeights.map((e) => inference_1.RegretInformedWeight.toJSON(e));
        }
        if ((_b = message.forecasterWeights) === null || _b === void 0 ? void 0 : _b.length) {
            obj.forecasterWeights = message.forecasterWeights.map((e) => inference_1.RegretInformedWeight.toJSON(e));
        }
        if (message.inferenceBlockHeight !== "0") {
            obj.inferenceBlockHeight = message.inferenceBlockHeight;
        }
        if (message.lossBlockHeight !== "0") {
            obj.lossBlockHeight = message.lossBlockHeight;
        }
        if ((_c = message.confidenceIntervalRawPercentiles) === null || _c === void 0 ? void 0 : _c.length) {
            obj.confidenceIntervalRawPercentiles = message.confidenceIntervalRawPercentiles;
        }
        if ((_d = message.confidenceIntervalValues) === null || _d === void 0 ? void 0 : _d.length) {
            obj.confidenceIntervalValues = message.confidenceIntervalValues;
        }
        return obj;
    },
    create(base) {
        return exports.GetLatestNetworkInferencesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGetLatestNetworkInferencesResponse();
        message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
            ? reputer_1.ValueBundle.fromPartial(object.networkInferences)
            : undefined;
        message.infererWeights = ((_a = object.infererWeights) === null || _a === void 0 ? void 0 : _a.map((e) => inference_1.RegretInformedWeight.fromPartial(e))) || [];
        message.forecasterWeights = ((_b = object.forecasterWeights) === null || _b === void 0 ? void 0 : _b.map((e) => inference_1.RegretInformedWeight.fromPartial(e))) || [];
        message.inferenceBlockHeight = (_c = object.inferenceBlockHeight) !== null && _c !== void 0 ? _c : "0";
        message.lossBlockHeight = (_d = object.lossBlockHeight) !== null && _d !== void 0 ? _d : "0";
        message.confidenceIntervalRawPercentiles = ((_e = object.confidenceIntervalRawPercentiles) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.confidenceIntervalValues = ((_f = object.confidenceIntervalValues) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseGetLatestAvailableNetworkInferencesResponse() {
    return {
        networkInferences: undefined,
        infererWeights: [],
        forecasterWeights: [],
        inferenceBlockHeight: "0",
        lossBlockHeight: "0",
        confidenceIntervalRawPercentiles: [],
        confidenceIntervalValues: [],
    };
}
exports.GetLatestAvailableNetworkInferencesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.networkInferences !== undefined) {
            reputer_1.ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
        }
        for (const v of message.infererWeights) {
            inference_1.RegretInformedWeight.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.forecasterWeights) {
            inference_1.RegretInformedWeight.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.inferenceBlockHeight !== "0") {
            writer.uint32(40).int64(message.inferenceBlockHeight);
        }
        if (message.lossBlockHeight !== "0") {
            writer.uint32(48).int64(message.lossBlockHeight);
        }
        for (const v of message.confidenceIntervalRawPercentiles) {
            writer.uint32(58).string(v);
        }
        for (const v of message.confidenceIntervalValues) {
            writer.uint32(66).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLatestAvailableNetworkInferencesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.networkInferences = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.infererWeights.push(inference_1.RegretInformedWeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecasterWeights.push(inference_1.RegretInformedWeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.inferenceBlockHeight = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.lossBlockHeight = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.confidenceIntervalRawPercentiles.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.confidenceIntervalValues.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            networkInferences: isSet(object.networkInferences) ? reputer_1.ValueBundle.fromJSON(object.networkInferences) : undefined,
            infererWeights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererWeights)
                ? object.infererWeights.map((e) => inference_1.RegretInformedWeight.fromJSON(e))
                : [],
            forecasterWeights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterWeights)
                ? object.forecasterWeights.map((e) => inference_1.RegretInformedWeight.fromJSON(e))
                : [],
            inferenceBlockHeight: isSet(object.inferenceBlockHeight) ? globalThis.String(object.inferenceBlockHeight) : "0",
            lossBlockHeight: isSet(object.lossBlockHeight) ? globalThis.String(object.lossBlockHeight) : "0",
            confidenceIntervalRawPercentiles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.confidenceIntervalRawPercentiles)
                ? object.confidenceIntervalRawPercentiles.map((e) => globalThis.String(e))
                : [],
            confidenceIntervalValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.confidenceIntervalValues)
                ? object.confidenceIntervalValues.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d;
        const obj = {};
        if (message.networkInferences !== undefined) {
            obj.networkInferences = reputer_1.ValueBundle.toJSON(message.networkInferences);
        }
        if ((_a = message.infererWeights) === null || _a === void 0 ? void 0 : _a.length) {
            obj.infererWeights = message.infererWeights.map((e) => inference_1.RegretInformedWeight.toJSON(e));
        }
        if ((_b = message.forecasterWeights) === null || _b === void 0 ? void 0 : _b.length) {
            obj.forecasterWeights = message.forecasterWeights.map((e) => inference_1.RegretInformedWeight.toJSON(e));
        }
        if (message.inferenceBlockHeight !== "0") {
            obj.inferenceBlockHeight = message.inferenceBlockHeight;
        }
        if (message.lossBlockHeight !== "0") {
            obj.lossBlockHeight = message.lossBlockHeight;
        }
        if ((_c = message.confidenceIntervalRawPercentiles) === null || _c === void 0 ? void 0 : _c.length) {
            obj.confidenceIntervalRawPercentiles = message.confidenceIntervalRawPercentiles;
        }
        if ((_d = message.confidenceIntervalValues) === null || _d === void 0 ? void 0 : _d.length) {
            obj.confidenceIntervalValues = message.confidenceIntervalValues;
        }
        return obj;
    },
    create(base) {
        return exports.GetLatestAvailableNetworkInferencesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGetLatestAvailableNetworkInferencesResponse();
        message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
            ? reputer_1.ValueBundle.fromPartial(object.networkInferences)
            : undefined;
        message.infererWeights = ((_a = object.infererWeights) === null || _a === void 0 ? void 0 : _a.map((e) => inference_1.RegretInformedWeight.fromPartial(e))) || [];
        message.forecasterWeights = ((_b = object.forecasterWeights) === null || _b === void 0 ? void 0 : _b.map((e) => inference_1.RegretInformedWeight.fromPartial(e))) || [];
        message.inferenceBlockHeight = (_c = object.inferenceBlockHeight) !== null && _c !== void 0 ? _c : "0";
        message.lossBlockHeight = (_d = object.lossBlockHeight) !== null && _d !== void 0 ? _d : "0";
        message.confidenceIntervalRawPercentiles = ((_e = object.confidenceIntervalRawPercentiles) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.confidenceIntervalValues = ((_f = object.confidenceIntervalValues) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseIsWorkerRegisteredInTopicIdRequest() {
    return { topicId: "0", address: "" };
}
exports.IsWorkerRegisteredInTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsWorkerRegisteredInTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.IsWorkerRegisteredInTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseIsWorkerRegisteredInTopicIdRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseIsWorkerRegisteredInTopicIdResponse() {
    return { isRegistered: false };
}
exports.IsWorkerRegisteredInTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isRegistered !== false) {
            writer.uint32(8).bool(message.isRegistered);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsWorkerRegisteredInTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isRegistered = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isRegistered !== false) {
            obj.isRegistered = message.isRegistered;
        }
        return obj;
    },
    create(base) {
        return exports.IsWorkerRegisteredInTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsWorkerRegisteredInTopicIdResponse();
        message.isRegistered = (_a = object.isRegistered) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseIsReputerRegisteredInTopicIdRequest() {
    return { topicId: "0", address: "" };
}
exports.IsReputerRegisteredInTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsReputerRegisteredInTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.IsReputerRegisteredInTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseIsReputerRegisteredInTopicIdRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseIsReputerRegisteredInTopicIdResponse() {
    return { isRegistered: false };
}
exports.IsReputerRegisteredInTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isRegistered !== false) {
            writer.uint32(8).bool(message.isRegistered);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsReputerRegisteredInTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isRegistered = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isRegistered !== false) {
            obj.isRegistered = message.isRegistered;
        }
        return obj;
    },
    create(base) {
        return exports.IsReputerRegisteredInTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsReputerRegisteredInTopicIdResponse();
        message.isRegistered = (_a = object.isRegistered) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseIsWhitelistAdminRequest() {
    return { address: "" };
}
exports.IsWhitelistAdminRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsWhitelistAdminRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.IsWhitelistAdminRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsWhitelistAdminRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseIsWhitelistAdminResponse() {
    return { isAdmin: false };
}
exports.IsWhitelistAdminResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isAdmin !== false) {
            writer.uint32(8).bool(message.isAdmin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsWhitelistAdminResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isAdmin = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isAdmin: isSet(object.isAdmin) ? globalThis.Boolean(object.isAdmin) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isAdmin !== false) {
            obj.isAdmin = message.isAdmin;
        }
        return obj;
    },
    create(base) {
        return exports.IsWhitelistAdminResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsWhitelistAdminResponse();
        message.isAdmin = (_a = object.isAdmin) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseGetStakeRemovalsUpUntilBlockRequest() {
    return { blockHeight: "0" };
}
exports.GetStakeRemovalsUpUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeRemovalsUpUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeRemovalsUpUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetStakeRemovalsUpUntilBlockRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetStakeRemovalsUpUntilBlockResponse() {
    return { removals: [] };
}
exports.GetStakeRemovalsUpUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.removals) {
            stake_1.StakeRemovalInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeRemovalsUpUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removals.push(stake_1.StakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            removals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.removals)
                ? object.removals.map((e) => stake_1.StakeRemovalInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.removals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.removals = message.removals.map((e) => stake_1.StakeRemovalInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeRemovalsUpUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetStakeRemovalsUpUntilBlockResponse();
        message.removals = ((_a = object.removals) === null || _a === void 0 ? void 0 : _a.map((e) => stake_1.StakeRemovalInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetDelegateStakeRemovalsUpUntilBlockRequest() {
    return { blockHeight: "0" };
}
exports.GetDelegateStakeRemovalsUpUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeRemovalsUpUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeRemovalsUpUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDelegateStakeRemovalsUpUntilBlockRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetDelegateStakeRemovalsUpUntilBlockResponse() {
    return { removals: [] };
}
exports.GetDelegateStakeRemovalsUpUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.removals) {
            stake_1.DelegateStakeRemovalInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeRemovalsUpUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removals.push(stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            removals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.removals)
                ? object.removals.map((e) => stake_1.DelegateStakeRemovalInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.removals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.removals = message.removals.map((e) => stake_1.DelegateStakeRemovalInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeRemovalsUpUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDelegateStakeRemovalsUpUntilBlockResponse();
        message.removals = ((_a = object.removals) === null || _a === void 0 ? void 0 : _a.map((e) => stake_1.DelegateStakeRemovalInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetStakeRemovalInfoRequest() {
    return { topicId: "0", reputer: "" };
}
exports.GetStakeRemovalInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeRemovalInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeRemovalInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetStakeRemovalInfoRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetStakeRemovalInfoResponse() {
    return { removal: undefined };
}
exports.GetStakeRemovalInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.removal !== undefined) {
            stake_1.StakeRemovalInfo.encode(message.removal, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeRemovalInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removal = stake_1.StakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { removal: isSet(object.removal) ? stake_1.StakeRemovalInfo.fromJSON(object.removal) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.removal !== undefined) {
            obj.removal = stake_1.StakeRemovalInfo.toJSON(message.removal);
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeRemovalInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetStakeRemovalInfoResponse();
        message.removal = (object.removal !== undefined && object.removal !== null)
            ? stake_1.StakeRemovalInfo.fromPartial(object.removal)
            : undefined;
        return message;
    },
};
function createBaseGetDelegateStakeRemovalInfoRequest() {
    return { topicId: "0", delegator: "", reputer: "" };
}
exports.GetDelegateStakeRemovalInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(18).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeRemovalInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeRemovalInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetDelegateStakeRemovalInfoRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.delegator = (_b = object.delegator) !== null && _b !== void 0 ? _b : "";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetDelegateStakeRemovalInfoResponse() {
    return { removal: undefined };
}
exports.GetDelegateStakeRemovalInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.removal !== undefined) {
            stake_1.DelegateStakeRemovalInfo.encode(message.removal, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeRemovalInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removal = stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { removal: isSet(object.removal) ? stake_1.DelegateStakeRemovalInfo.fromJSON(object.removal) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.removal !== undefined) {
            obj.removal = stake_1.DelegateStakeRemovalInfo.toJSON(message.removal);
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeRemovalInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDelegateStakeRemovalInfoResponse();
        message.removal = (object.removal !== undefined && object.removal !== null)
            ? stake_1.DelegateStakeRemovalInfo.fromPartial(object.removal)
            : undefined;
        return message;
    },
};
function createBaseGetTopicLastWorkerCommitInfoRequest() {
    return { topicId: "0" };
}
exports.GetTopicLastWorkerCommitInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicLastWorkerCommitInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicLastWorkerCommitInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicLastWorkerCommitInfoRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicLastWorkerCommitInfoResponse() {
    return { lastCommit: undefined };
}
exports.GetTopicLastWorkerCommitInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lastCommit !== undefined) {
            topic_1.TimestampedActorNonce.encode(message.lastCommit, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicLastWorkerCommitInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lastCommit = topic_1.TimestampedActorNonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lastCommit: isSet(object.lastCommit) ? topic_1.TimestampedActorNonce.fromJSON(object.lastCommit) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastCommit !== undefined) {
            obj.lastCommit = topic_1.TimestampedActorNonce.toJSON(message.lastCommit);
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicLastWorkerCommitInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetTopicLastWorkerCommitInfoResponse();
        message.lastCommit = (object.lastCommit !== undefined && object.lastCommit !== null)
            ? topic_1.TimestampedActorNonce.fromPartial(object.lastCommit)
            : undefined;
        return message;
    },
};
function createBaseGetTopicLastReputerCommitInfoRequest() {
    return { topicId: "0" };
}
exports.GetTopicLastReputerCommitInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicLastReputerCommitInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicLastReputerCommitInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicLastReputerCommitInfoRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicLastReputerCommitInfoResponse() {
    return { lastCommit: undefined };
}
exports.GetTopicLastReputerCommitInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lastCommit !== undefined) {
            topic_1.TimestampedActorNonce.encode(message.lastCommit, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicLastReputerCommitInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lastCommit = topic_1.TimestampedActorNonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lastCommit: isSet(object.lastCommit) ? topic_1.TimestampedActorNonce.fromJSON(object.lastCommit) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastCommit !== undefined) {
            obj.lastCommit = topic_1.TimestampedActorNonce.toJSON(message.lastCommit);
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicLastReputerCommitInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetTopicLastReputerCommitInfoResponse();
        message.lastCommit = (object.lastCommit !== undefined && object.lastCommit !== null)
            ? topic_1.TimestampedActorNonce.fromPartial(object.lastCommit)
            : undefined;
        return message;
    },
};
function createBaseGetTopicRewardNonceRequest() {
    return { topicId: "0" };
}
exports.GetTopicRewardNonceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicRewardNonceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicRewardNonceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicRewardNonceRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicRewardNonceResponse() {
    return { nonce: "0" };
}
exports.GetTopicRewardNonceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nonce !== "0") {
            writer.uint32(8).int64(message.nonce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicRewardNonceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.nonce = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.nonce !== "0") {
            obj.nonce = message.nonce;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicRewardNonceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicRewardNonceResponse();
        message.nonce = (_a = object.nonce) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetReputerLossBundlesAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetReputerLossBundlesAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerLossBundlesAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerLossBundlesAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetReputerLossBundlesAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetReputerLossBundlesAtBlockResponse() {
    return { lossBundles: undefined };
}
exports.GetReputerLossBundlesAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lossBundles !== undefined) {
            reputer_1.ReputerValueBundles.encode(message.lossBundles, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerLossBundlesAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lossBundles = reputer_1.ReputerValueBundles.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lossBundles: isSet(object.lossBundles) ? reputer_1.ReputerValueBundles.fromJSON(object.lossBundles) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lossBundles !== undefined) {
            obj.lossBundles = reputer_1.ReputerValueBundles.toJSON(message.lossBundles);
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerLossBundlesAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetReputerLossBundlesAtBlockResponse();
        message.lossBundles = (object.lossBundles !== undefined && object.lossBundles !== null)
            ? reputer_1.ReputerValueBundles.fromPartial(object.lossBundles)
            : undefined;
        return message;
    },
};
function createBaseGetStakeReputerAuthorityRequest() {
    return { topicId: "0", reputer: "" };
}
exports.GetStakeReputerAuthorityRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeReputerAuthorityRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeReputerAuthorityRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetStakeReputerAuthorityRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetStakeReputerAuthorityResponse() {
    return { authority: "" };
}
exports.GetStakeReputerAuthorityResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeReputerAuthorityResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { authority: isSet(object.authority) ? globalThis.String(object.authority) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeReputerAuthorityResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetStakeReputerAuthorityResponse();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDelegateStakePlacementRequest() {
    return { topicId: "0", delegator: "", target: "" };
}
exports.GetDelegateStakePlacementRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(18).string(message.delegator);
        }
        if (message.target !== "") {
            writer.uint32(26).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakePlacementRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            target: isSet(object.target) ? globalThis.String(object.target) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.target !== "") {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakePlacementRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetDelegateStakePlacementRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.delegator = (_b = object.delegator) !== null && _b !== void 0 ? _b : "";
        message.target = (_c = object.target) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGetDelegateStakePlacementResponse() {
    return { delegatorInfo: undefined };
}
exports.GetDelegateStakePlacementResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegatorInfo !== undefined) {
            stake_1.DelegatorInfo.encode(message.delegatorInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakePlacementResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegatorInfo = stake_1.DelegatorInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { delegatorInfo: isSet(object.delegatorInfo) ? stake_1.DelegatorInfo.fromJSON(object.delegatorInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegatorInfo !== undefined) {
            obj.delegatorInfo = stake_1.DelegatorInfo.toJSON(message.delegatorInfo);
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakePlacementResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDelegateStakePlacementResponse();
        message.delegatorInfo = (object.delegatorInfo !== undefined && object.delegatorInfo !== null)
            ? stake_1.DelegatorInfo.fromPartial(object.delegatorInfo)
            : undefined;
        return message;
    },
};
function createBaseGetDelegateStakeUponReputerRequest() {
    return { topicId: "0", target: "" };
}
exports.GetDelegateStakeUponReputerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.target !== "") {
            writer.uint32(18).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeUponReputerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            target: isSet(object.target) ? globalThis.String(object.target) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.target !== "") {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeUponReputerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetDelegateStakeUponReputerRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.target = (_b = object.target) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetDelegateStakeUponReputerResponse() {
    return { stake: "" };
}
exports.GetDelegateStakeUponReputerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stake !== "") {
            writer.uint32(10).string(message.stake);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeUponReputerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stake = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { stake: isSet(object.stake) ? globalThis.String(object.stake) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.stake !== "") {
            obj.stake = message.stake;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeUponReputerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDelegateStakeUponReputerResponse();
        message.stake = (_a = object.stake) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDelegateRewardPerShareRequest() {
    return { topicId: "0", reputer: "" };
}
exports.GetDelegateRewardPerShareRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateRewardPerShareRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateRewardPerShareRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetDelegateRewardPerShareRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetDelegateRewardPerShareResponse() {
    return { rewardPerShare: "" };
}
exports.GetDelegateRewardPerShareResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardPerShare !== "") {
            writer.uint32(10).string(message.rewardPerShare);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateRewardPerShareResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardPerShare = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { rewardPerShare: isSet(object.rewardPerShare) ? globalThis.String(object.rewardPerShare) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardPerShare !== "") {
            obj.rewardPerShare = message.rewardPerShare;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateRewardPerShareResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDelegateRewardPerShareResponse();
        message.rewardPerShare = (_a = object.rewardPerShare) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetStakeRemovalForReputerAndTopicIdRequest() {
    return { reputer: "", topicId: "0" };
}
exports.GetStakeRemovalForReputerAndTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputer !== "") {
            writer.uint32(10).string(message.reputer);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeRemovalForReputerAndTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeRemovalForReputerAndTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetStakeRemovalForReputerAndTopicIdRequest();
        message.reputer = (_a = object.reputer) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetStakeRemovalForReputerAndTopicIdResponse() {
    return { stakeRemovalInfo: undefined };
}
exports.GetStakeRemovalForReputerAndTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stakeRemovalInfo !== undefined) {
            stake_1.StakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStakeRemovalForReputerAndTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakeRemovalInfo = stake_1.StakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stakeRemovalInfo: isSet(object.stakeRemovalInfo) ? stake_1.StakeRemovalInfo.fromJSON(object.stakeRemovalInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stakeRemovalInfo !== undefined) {
            obj.stakeRemovalInfo = stake_1.StakeRemovalInfo.toJSON(message.stakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.GetStakeRemovalForReputerAndTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetStakeRemovalForReputerAndTopicIdResponse();
        message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
            ? stake_1.StakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
            : undefined;
        return message;
    },
};
function createBaseGetDelegateStakeRemovalRequest() {
    return { blockHeight: "0", topicId: "0", delegator: "", reputer: "" };
}
exports.GetDelegateStakeRemovalRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(26).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(34).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeRemovalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeRemovalRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGetDelegateStakeRemovalRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.delegator = (_c = object.delegator) !== null && _c !== void 0 ? _c : "";
        message.reputer = (_d = object.reputer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseGetDelegateStakeRemovalResponse() {
    return { stakeRemovalInfo: undefined };
}
exports.GetDelegateStakeRemovalResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stakeRemovalInfo !== undefined) {
            stake_1.DelegateStakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDelegateStakeRemovalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stakeRemovalInfo: isSet(object.stakeRemovalInfo)
                ? stake_1.DelegateStakeRemovalInfo.fromJSON(object.stakeRemovalInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stakeRemovalInfo !== undefined) {
            obj.stakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.toJSON(message.stakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.GetDelegateStakeRemovalResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDelegateStakeRemovalResponse();
        message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
            ? stake_1.DelegateStakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
            : undefined;
        return message;
    },
};
function createBaseGetPreviousTopicWeightRequest() {
    return { topicId: "0" };
}
exports.GetPreviousTopicWeightRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicWeightRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicWeightRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicWeightRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetPreviousTopicWeightResponse() {
    return { weight: "", notFound: false };
}
exports.GetPreviousTopicWeightResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.weight !== "") {
            writer.uint32(10).string(message.weight);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicWeightResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicWeightResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousTopicWeightResponse();
        message.weight = (_a = object.weight) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseGetTotalSumPreviousTopicWeightsRequest() {
    return {};
}
exports.GetTotalSumPreviousTopicWeightsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTotalSumPreviousTopicWeightsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetTotalSumPreviousTopicWeightsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetTotalSumPreviousTopicWeightsRequest();
        return message;
    },
};
function createBaseGetTotalSumPreviousTopicWeightsResponse() {
    return { weight: "" };
}
exports.GetTotalSumPreviousTopicWeightsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.weight !== "") {
            writer.uint32(10).string(message.weight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTotalSumPreviousTopicWeightsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { weight: isSet(object.weight) ? globalThis.String(object.weight) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        return obj;
    },
    create(base) {
        return exports.GetTotalSumPreviousTopicWeightsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTotalSumPreviousTopicWeightsResponse();
        message.weight = (_a = object.weight) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTopicExistsRequest() {
    return { topicId: "0" };
}
exports.TopicExistsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicExistsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.TopicExistsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicExistsRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseTopicExistsResponse() {
    return { exists: false };
}
exports.TopicExistsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.exists !== false) {
            writer.uint32(8).bool(message.exists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicExistsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.exists = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.exists !== false) {
            obj.exists = message.exists;
        }
        return obj;
    },
    create(base) {
        return exports.TopicExistsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicExistsResponse();
        message.exists = (_a = object.exists) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseIsTopicActiveRequest() {
    return { topicId: "0" };
}
exports.IsTopicActiveRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsTopicActiveRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.IsTopicActiveRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsTopicActiveRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseIsTopicActiveResponse() {
    return { isActive: false };
}
exports.IsTopicActiveResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isActive !== false) {
            writer.uint32(8).bool(message.isActive);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsTopicActiveResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isActive = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isActive !== false) {
            obj.isActive = message.isActive;
        }
        return obj;
    },
    create(base) {
        return exports.IsTopicActiveResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsTopicActiveResponse();
        message.isActive = (_a = object.isActive) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseGetTopicFeeRevenueRequest() {
    return { topicId: "0" };
}
exports.GetTopicFeeRevenueRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicFeeRevenueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicFeeRevenueRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicFeeRevenueRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetTopicFeeRevenueResponse() {
    return { feeRevenue: "" };
}
exports.GetTopicFeeRevenueResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.feeRevenue !== "") {
            writer.uint32(10).string(message.feeRevenue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTopicFeeRevenueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.feeRevenue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { feeRevenue: isSet(object.feeRevenue) ? globalThis.String(object.feeRevenue) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.feeRevenue !== "") {
            obj.feeRevenue = message.feeRevenue;
        }
        return obj;
    },
    create(base) {
        return exports.GetTopicFeeRevenueResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTopicFeeRevenueResponse();
        message.feeRevenue = (_a = object.feeRevenue) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetInfererScoreEmaRequest() {
    return { topicId: "0", inferer: "" };
}
exports.GetInfererScoreEmaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.inferer !== "") {
            writer.uint32(18).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInfererScoreEmaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.GetInfererScoreEmaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetInfererScoreEmaRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.inferer = (_b = object.inferer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetInfererScoreEmaResponse() {
    return { score: undefined };
}
exports.GetInfererScoreEmaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInfererScoreEmaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.GetInfererScoreEmaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetInfererScoreEmaResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseGetForecasterScoreEmaRequest() {
    return { topicId: "0", forecaster: "" };
}
exports.GetForecasterScoreEmaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.forecaster !== "") {
            writer.uint32(18).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecasterScoreEmaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.GetForecasterScoreEmaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetForecasterScoreEmaRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.forecaster = (_b = object.forecaster) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetForecasterScoreEmaResponse() {
    return { score: undefined };
}
exports.GetForecasterScoreEmaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecasterScoreEmaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.GetForecasterScoreEmaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetForecasterScoreEmaResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseGetReputerScoreEmaRequest() {
    return { topicId: "0", reputer: "" };
}
exports.GetReputerScoreEmaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerScoreEmaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerScoreEmaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetReputerScoreEmaRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetReputerScoreEmaResponse() {
    return { score: undefined };
}
exports.GetReputerScoreEmaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputerScoreEmaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.GetReputerScoreEmaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetReputerScoreEmaResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseGetInferenceScoresUntilBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetInferenceScoresUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInferenceScoresUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetInferenceScoresUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetInferenceScoresUntilBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetInferenceScoresUntilBlockResponse() {
    return { scores: [] };
}
exports.GetInferenceScoresUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.scores) {
            score_1.Score.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInferenceScoresUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores.push(score_1.Score.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => score_1.Score.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.scores) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scores = message.scores.map((e) => score_1.Score.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetInferenceScoresUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetInferenceScoresUntilBlockResponse();
        message.scores = ((_a = object.scores) === null || _a === void 0 ? void 0 : _a.map((e) => score_1.Score.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetPreviousTopicQuantileForecasterScoreEmaRequest() {
    return { topicId: "0" };
}
exports.GetPreviousTopicQuantileForecasterScoreEmaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicQuantileForecasterScoreEmaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicQuantileForecasterScoreEmaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicQuantileForecasterScoreEmaRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetPreviousTopicQuantileForecasterScoreEmaResponse() {
    return { value: "" };
}
exports.GetPreviousTopicQuantileForecasterScoreEmaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicQuantileForecasterScoreEmaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicQuantileForecasterScoreEmaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicQuantileForecasterScoreEmaResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetPreviousTopicQuantileInfererScoreEmaRequest() {
    return { topicId: "0" };
}
exports.GetPreviousTopicQuantileInfererScoreEmaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicQuantileInfererScoreEmaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicQuantileInfererScoreEmaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicQuantileInfererScoreEmaRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetPreviousTopicQuantileInfererScoreEmaResponse() {
    return { value: "" };
}
exports.GetPreviousTopicQuantileInfererScoreEmaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicQuantileInfererScoreEmaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicQuantileInfererScoreEmaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicQuantileInfererScoreEmaResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetPreviousTopicQuantileReputerScoreEmaRequest() {
    return { topicId: "0" };
}
exports.GetPreviousTopicQuantileReputerScoreEmaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicQuantileReputerScoreEmaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicQuantileReputerScoreEmaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicQuantileReputerScoreEmaRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetPreviousTopicQuantileReputerScoreEmaResponse() {
    return { value: "" };
}
exports.GetPreviousTopicQuantileReputerScoreEmaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousTopicQuantileReputerScoreEmaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousTopicQuantileReputerScoreEmaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousTopicQuantileReputerScoreEmaResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetWorkerInferenceScoresAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetWorkerInferenceScoresAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerInferenceScoresAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerInferenceScoresAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetWorkerInferenceScoresAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetWorkerInferenceScoresAtBlockResponse() {
    return { scores: undefined };
}
exports.GetWorkerInferenceScoresAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerInferenceScoresAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerInferenceScoresAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetWorkerInferenceScoresAtBlockResponse();
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseGetCurrentLowestInfererScoreRequest() {
    return { topicId: "0" };
}
exports.GetCurrentLowestInfererScoreRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentLowestInfererScoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrentLowestInfererScoreRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCurrentLowestInfererScoreRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetCurrentLowestInfererScoreResponse() {
    return { score: undefined };
}
exports.GetCurrentLowestInfererScoreResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentLowestInfererScoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrentLowestInfererScoreResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCurrentLowestInfererScoreResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseGetForecastScoresUntilBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetForecastScoresUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecastScoresUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetForecastScoresUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetForecastScoresUntilBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetForecastScoresUntilBlockResponse() {
    return { scores: [] };
}
exports.GetForecastScoresUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.scores) {
            score_1.Score.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetForecastScoresUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores.push(score_1.Score.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => score_1.Score.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.scores) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scores = message.scores.map((e) => score_1.Score.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetForecastScoresUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetForecastScoresUntilBlockResponse();
        message.scores = ((_a = object.scores) === null || _a === void 0 ? void 0 : _a.map((e) => score_1.Score.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetWorkerForecastScoresAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetWorkerForecastScoresAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerForecastScoresAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerForecastScoresAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetWorkerForecastScoresAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetWorkerForecastScoresAtBlockResponse() {
    return { scores: undefined };
}
exports.GetWorkerForecastScoresAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkerForecastScoresAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkerForecastScoresAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetWorkerForecastScoresAtBlockResponse();
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseGetCurrentLowestForecasterScoreRequest() {
    return { topicId: "0" };
}
exports.GetCurrentLowestForecasterScoreRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentLowestForecasterScoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrentLowestForecasterScoreRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCurrentLowestForecasterScoreRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetCurrentLowestForecasterScoreResponse() {
    return { score: undefined };
}
exports.GetCurrentLowestForecasterScoreResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentLowestForecasterScoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrentLowestForecasterScoreResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCurrentLowestForecasterScoreResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseGetReputersScoresAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.GetReputersScoresAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputersScoresAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetReputersScoresAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetReputersScoresAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseGetReputersScoresAtBlockResponse() {
    return { scores: undefined };
}
exports.GetReputersScoresAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetReputersScoresAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.GetReputersScoresAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetReputersScoresAtBlockResponse();
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseGetCurrentLowestReputerScoreRequest() {
    return { topicId: "0" };
}
exports.GetCurrentLowestReputerScoreRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentLowestReputerScoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrentLowestReputerScoreRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCurrentLowestReputerScoreRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetCurrentLowestReputerScoreResponse() {
    return { score: undefined };
}
exports.GetCurrentLowestReputerScoreResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentLowestReputerScoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrentLowestReputerScoreResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCurrentLowestReputerScoreResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseGetListeningCoefficientRequest() {
    return { topicId: "0", reputer: "" };
}
exports.GetListeningCoefficientRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetListeningCoefficientRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetListeningCoefficientRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetListeningCoefficientRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetListeningCoefficientResponse() {
    return { listeningCoefficient: undefined };
}
exports.GetListeningCoefficientResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.listeningCoefficient !== undefined) {
            types_1.ListeningCoefficient.encode(message.listeningCoefficient, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetListeningCoefficientResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.listeningCoefficient = types_1.ListeningCoefficient.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            listeningCoefficient: isSet(object.listeningCoefficient)
                ? types_1.ListeningCoefficient.fromJSON(object.listeningCoefficient)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.listeningCoefficient !== undefined) {
            obj.listeningCoefficient = types_1.ListeningCoefficient.toJSON(message.listeningCoefficient);
        }
        return obj;
    },
    create(base) {
        return exports.GetListeningCoefficientResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetListeningCoefficientResponse();
        message.listeningCoefficient = (object.listeningCoefficient !== undefined && object.listeningCoefficient !== null)
            ? types_1.ListeningCoefficient.fromPartial(object.listeningCoefficient)
            : undefined;
        return message;
    },
};
function createBaseGetPreviousReputerRewardFractionRequest() {
    return { topicId: "0", reputer: "" };
}
exports.GetPreviousReputerRewardFractionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousReputerRewardFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousReputerRewardFractionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousReputerRewardFractionRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetPreviousReputerRewardFractionResponse() {
    return { rewardFraction: "", notFound: false };
}
exports.GetPreviousReputerRewardFractionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardFraction !== "") {
            writer.uint32(10).string(message.rewardFraction);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousReputerRewardFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardFraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardFraction !== "") {
            obj.rewardFraction = message.rewardFraction;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousReputerRewardFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousReputerRewardFractionResponse();
        message.rewardFraction = (_a = object.rewardFraction) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseGetPreviousInferenceRewardFractionRequest() {
    return { topicId: "0", worker: "" };
}
exports.GetPreviousInferenceRewardFractionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.worker !== "") {
            writer.uint32(18).string(message.worker);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousInferenceRewardFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousInferenceRewardFractionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousInferenceRewardFractionRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.worker = (_b = object.worker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetPreviousInferenceRewardFractionResponse() {
    return { rewardFraction: "", notFound: false };
}
exports.GetPreviousInferenceRewardFractionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardFraction !== "") {
            writer.uint32(10).string(message.rewardFraction);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousInferenceRewardFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardFraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardFraction !== "") {
            obj.rewardFraction = message.rewardFraction;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousInferenceRewardFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousInferenceRewardFractionResponse();
        message.rewardFraction = (_a = object.rewardFraction) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseGetPreviousForecastRewardFractionRequest() {
    return { topicId: "0", worker: "" };
}
exports.GetPreviousForecastRewardFractionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.worker !== "") {
            writer.uint32(18).string(message.worker);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousForecastRewardFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousForecastRewardFractionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousForecastRewardFractionRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.worker = (_b = object.worker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetPreviousForecastRewardFractionResponse() {
    return { rewardFraction: "", notFound: false };
}
exports.GetPreviousForecastRewardFractionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardFraction !== "") {
            writer.uint32(10).string(message.rewardFraction);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousForecastRewardFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardFraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardFraction !== "") {
            obj.rewardFraction = message.rewardFraction;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousForecastRewardFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPreviousForecastRewardFractionResponse();
        message.rewardFraction = (_a = object.rewardFraction) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseGetPreviousPercentageRewardToStakedReputersRequest() {
    return {};
}
exports.GetPreviousPercentageRewardToStakedReputersRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousPercentageRewardToStakedReputersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetPreviousPercentageRewardToStakedReputersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetPreviousPercentageRewardToStakedReputersRequest();
        return message;
    },
};
function createBaseGetPreviousPercentageRewardToStakedReputersResponse() {
    return { percentageReward: "" };
}
exports.GetPreviousPercentageRewardToStakedReputersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.percentageReward !== "") {
            writer.uint32(10).string(message.percentageReward);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviousPercentageRewardToStakedReputersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.percentageReward = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { percentageReward: isSet(object.percentageReward) ? globalThis.String(object.percentageReward) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.percentageReward !== "") {
            obj.percentageReward = message.percentageReward;
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviousPercentageRewardToStakedReputersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPreviousPercentageRewardToStakedReputersResponse();
        message.percentageReward = (_a = object.percentageReward) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetTotalRewardToDistributeRequest() {
    return {};
}
exports.GetTotalRewardToDistributeRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTotalRewardToDistributeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetTotalRewardToDistributeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetTotalRewardToDistributeRequest();
        return message;
    },
};
function createBaseGetTotalRewardToDistributeResponse() {
    return { totalReward: "" };
}
exports.GetTotalRewardToDistributeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalReward !== "") {
            writer.uint32(10).string(message.totalReward);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTotalRewardToDistributeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.totalReward = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { totalReward: isSet(object.totalReward) ? globalThis.String(object.totalReward) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalReward !== "") {
            obj.totalReward = message.totalReward;
        }
        return obj;
    },
    create(base) {
        return exports.GetTotalRewardToDistributeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTotalRewardToDistributeResponse();
        message.totalReward = (_a = object.totalReward) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetActiveTopicsAtBlockRequest() {
    return { blockHeight: "0" };
}
exports.GetActiveTopicsAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveTopicsAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveTopicsAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveTopicsAtBlockRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetActiveTopicsAtBlockResponse() {
    return { topics: [], pagination: undefined };
}
exports.GetActiveTopicsAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.topics) {
            topic_1.Topic.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            types_1.SimpleCursorPaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveTopicsAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topics.push(topic_1.Topic.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = types_1.SimpleCursorPaginationResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => topic_1.Topic.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? types_1.SimpleCursorPaginationResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => topic_1.Topic.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = types_1.SimpleCursorPaginationResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveTopicsAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveTopicsAtBlockResponse();
        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => topic_1.Topic.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? types_1.SimpleCursorPaginationResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseGetNextChurningBlockByTopicIdRequest() {
    return { topicId: "0" };
}
exports.GetNextChurningBlockByTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNextChurningBlockByTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetNextChurningBlockByTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetNextChurningBlockByTopicIdRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetNextChurningBlockByTopicIdResponse() {
    return { blockHeight: "0" };
}
exports.GetNextChurningBlockByTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNextChurningBlockByTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.GetNextChurningBlockByTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetNextChurningBlockByTopicIdResponse();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetActiveReputersForTopicRequest() {
    return { topicId: "0" };
}
exports.GetActiveReputersForTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveReputersForTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveReputersForTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveReputersForTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetActiveReputersForTopicResponse() {
    return { reputers: [] };
}
exports.GetActiveReputersForTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.reputers) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveReputersForTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputers.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputers) ? object.reputers.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.reputers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.reputers = message.reputers;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveReputersForTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveReputersForTopicResponse();
        message.reputers = ((_a = object.reputers) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseGetActiveForecastersForTopicRequest() {
    return { topicId: "0" };
}
exports.GetActiveForecastersForTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveForecastersForTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveForecastersForTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveForecastersForTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetActiveForecastersForTopicResponse() {
    return { forecasters: [] };
}
exports.GetActiveForecastersForTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.forecasters) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveForecastersForTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.forecasters.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            forecasters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasters)
                ? object.forecasters.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.forecasters) === null || _a === void 0 ? void 0 : _a.length) {
            obj.forecasters = message.forecasters;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveForecastersForTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveForecastersForTopicResponse();
        message.forecasters = ((_a = object.forecasters) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseGetActiveInferersForTopicRequest() {
    return { topicId: "0" };
}
exports.GetActiveInferersForTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveInferersForTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveInferersForTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveInferersForTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseGetActiveInferersForTopicResponse() {
    return { inferers: [] };
}
exports.GetActiveInferersForTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.inferers) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveInferersForTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferers.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inferers) ? object.inferers.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.inferers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.inferers = message.inferers;
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveInferersForTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetActiveInferersForTopicResponse();
        message.inferers = ((_a = object.inferers) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
exports.QueryServiceServiceName = "emissions.v5.QueryService";
class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceServiceName;
        this.rpc = rpc;
        this.GetParams = this.GetParams.bind(this);
        this.GetNextTopicId = this.GetNextTopicId.bind(this);
        this.GetTopic = this.GetTopic.bind(this);
        this.GetWorkerLatestInferenceByTopicId = this.GetWorkerLatestInferenceByTopicId.bind(this);
        this.GetInferencesAtBlock = this.GetInferencesAtBlock.bind(this);
        this.GetLatestTopicInferences = this.GetLatestTopicInferences.bind(this);
        this.GetForecastsAtBlock = this.GetForecastsAtBlock.bind(this);
        this.GetNetworkLossBundleAtBlock = this.GetNetworkLossBundleAtBlock.bind(this);
        this.GetTotalStake = this.GetTotalStake.bind(this);
        this.GetReputerStakeInTopic = this.GetReputerStakeInTopic.bind(this);
        this.GetMultiReputerStakeInTopic = this.GetMultiReputerStakeInTopic.bind(this);
        this.GetStakeFromReputerInTopicInSelf = this.GetStakeFromReputerInTopicInSelf.bind(this);
        this.GetDelegateStakeInTopicInReputer = this.GetDelegateStakeInTopicInReputer.bind(this);
        this.GetStakeFromDelegatorInTopicInReputer = this.GetStakeFromDelegatorInTopicInReputer.bind(this);
        this.GetStakeFromDelegatorInTopic = this.GetStakeFromDelegatorInTopic.bind(this);
        this.GetTopicStake = this.GetTopicStake.bind(this);
        this.GetStakeRemovalsUpUntilBlock = this.GetStakeRemovalsUpUntilBlock.bind(this);
        this.GetDelegateStakeRemovalsUpUntilBlock = this.GetDelegateStakeRemovalsUpUntilBlock.bind(this);
        this.GetStakeRemovalInfo = this.GetStakeRemovalInfo.bind(this);
        this.GetDelegateStakeRemovalInfo = this.GetDelegateStakeRemovalInfo.bind(this);
        this.GetWorkerNodeInfo = this.GetWorkerNodeInfo.bind(this);
        this.GetReputerNodeInfo = this.GetReputerNodeInfo.bind(this);
        this.IsWorkerRegisteredInTopicId = this.IsWorkerRegisteredInTopicId.bind(this);
        this.IsReputerRegisteredInTopicId = this.IsReputerRegisteredInTopicId.bind(this);
        this.GetNetworkInferencesAtBlock = this.GetNetworkInferencesAtBlock.bind(this);
        this.GetLatestNetworkInferences = this.GetLatestNetworkInferences.bind(this);
        this.GetLatestAvailableNetworkInferences = this.GetLatestAvailableNetworkInferences.bind(this);
        this.IsWorkerNonceUnfulfilled = this.IsWorkerNonceUnfulfilled.bind(this);
        this.IsReputerNonceUnfulfilled = this.IsReputerNonceUnfulfilled.bind(this);
        this.GetUnfulfilledWorkerNonces = this.GetUnfulfilledWorkerNonces.bind(this);
        this.GetUnfulfilledReputerNonces = this.GetUnfulfilledReputerNonces.bind(this);
        this.GetInfererNetworkRegret = this.GetInfererNetworkRegret.bind(this);
        this.GetForecasterNetworkRegret = this.GetForecasterNetworkRegret.bind(this);
        this.GetOneInForecasterNetworkRegret = this.GetOneInForecasterNetworkRegret.bind(this);
        this.IsWhitelistAdmin = this.IsWhitelistAdmin.bind(this);
        this.GetTopicLastWorkerCommitInfo = this.GetTopicLastWorkerCommitInfo.bind(this);
        this.GetTopicLastReputerCommitInfo = this.GetTopicLastReputerCommitInfo.bind(this);
        this.GetTopicRewardNonce = this.GetTopicRewardNonce.bind(this);
        this.GetReputerLossBundlesAtBlock = this.GetReputerLossBundlesAtBlock.bind(this);
        this.GetStakeReputerAuthority = this.GetStakeReputerAuthority.bind(this);
        this.GetDelegateStakePlacement = this.GetDelegateStakePlacement.bind(this);
        this.GetDelegateStakeUponReputer = this.GetDelegateStakeUponReputer.bind(this);
        this.GetDelegateRewardPerShare = this.GetDelegateRewardPerShare.bind(this);
        this.GetStakeRemovalForReputerAndTopicId = this.GetStakeRemovalForReputerAndTopicId.bind(this);
        this.GetDelegateStakeRemoval = this.GetDelegateStakeRemoval.bind(this);
        this.GetPreviousTopicWeight = this.GetPreviousTopicWeight.bind(this);
        this.GetTotalSumPreviousTopicWeights = this.GetTotalSumPreviousTopicWeights.bind(this);
        this.TopicExists = this.TopicExists.bind(this);
        this.IsTopicActive = this.IsTopicActive.bind(this);
        this.GetTopicFeeRevenue = this.GetTopicFeeRevenue.bind(this);
        this.GetInfererScoreEma = this.GetInfererScoreEma.bind(this);
        this.GetForecasterScoreEma = this.GetForecasterScoreEma.bind(this);
        this.GetReputerScoreEma = this.GetReputerScoreEma.bind(this);
        this.GetInferenceScoresUntilBlock = this.GetInferenceScoresUntilBlock.bind(this);
        this.GetPreviousTopicQuantileForecasterScoreEma = this.GetPreviousTopicQuantileForecasterScoreEma.bind(this);
        this.GetPreviousTopicQuantileInfererScoreEma = this.GetPreviousTopicQuantileInfererScoreEma.bind(this);
        this.GetPreviousTopicQuantileReputerScoreEma = this.GetPreviousTopicQuantileReputerScoreEma.bind(this);
        this.GetWorkerInferenceScoresAtBlock = this.GetWorkerInferenceScoresAtBlock.bind(this);
        this.GetCurrentLowestInfererScore = this.GetCurrentLowestInfererScore.bind(this);
        this.GetForecastScoresUntilBlock = this.GetForecastScoresUntilBlock.bind(this);
        this.GetWorkerForecastScoresAtBlock = this.GetWorkerForecastScoresAtBlock.bind(this);
        this.GetCurrentLowestForecasterScore = this.GetCurrentLowestForecasterScore.bind(this);
        this.GetReputersScoresAtBlock = this.GetReputersScoresAtBlock.bind(this);
        this.GetCurrentLowestReputerScore = this.GetCurrentLowestReputerScore.bind(this);
        this.GetListeningCoefficient = this.GetListeningCoefficient.bind(this);
        this.GetPreviousReputerRewardFraction = this.GetPreviousReputerRewardFraction.bind(this);
        this.GetPreviousInferenceRewardFraction = this.GetPreviousInferenceRewardFraction.bind(this);
        this.GetPreviousForecastRewardFraction = this.GetPreviousForecastRewardFraction.bind(this);
        this.GetPreviousPercentageRewardToStakedReputers = this.GetPreviousPercentageRewardToStakedReputers.bind(this);
        this.GetTotalRewardToDistribute = this.GetTotalRewardToDistribute.bind(this);
        this.GetNaiveInfererNetworkRegret = this.GetNaiveInfererNetworkRegret.bind(this);
        this.GetOneOutInfererInfererNetworkRegret = this.GetOneOutInfererInfererNetworkRegret.bind(this);
        this.GetOneOutInfererForecasterNetworkRegret = this.GetOneOutInfererForecasterNetworkRegret.bind(this);
        this.GetOneOutForecasterInfererNetworkRegret = this.GetOneOutForecasterInfererNetworkRegret.bind(this);
        this.GetOneOutForecasterForecasterNetworkRegret = this.GetOneOutForecasterForecasterNetworkRegret.bind(this);
        this.GetActiveTopicsAtBlock = this.GetActiveTopicsAtBlock.bind(this);
        this.GetNextChurningBlockByTopicId = this.GetNextChurningBlockByTopicId.bind(this);
        this.GetCountInfererInclusionsInTopic = this.GetCountInfererInclusionsInTopic.bind(this);
        this.GetCountForecasterInclusionsInTopic = this.GetCountForecasterInclusionsInTopic.bind(this);
        this.GetActiveReputersForTopic = this.GetActiveReputersForTopic.bind(this);
        this.GetActiveForecastersForTopic = this.GetActiveForecastersForTopic.bind(this);
        this.GetActiveInferersForTopic = this.GetActiveInferersForTopic.bind(this);
    }
    GetParams(request) {
        const data = exports.GetParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetParams", data);
        return promise.then((data) => exports.GetParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNextTopicId(request) {
        const data = exports.GetNextTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNextTopicId", data);
        return promise.then((data) => exports.GetNextTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopic(request) {
        const data = exports.GetTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopic", data);
        return promise.then((data) => exports.GetTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerLatestInferenceByTopicId(request) {
        const data = exports.GetWorkerLatestInferenceByTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerLatestInferenceByTopicId", data);
        return promise.then((data) => exports.GetWorkerLatestInferenceByTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInferencesAtBlock(request) {
        const data = exports.GetInferencesAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInferencesAtBlock", data);
        return promise.then((data) => exports.GetInferencesAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestTopicInferences(request) {
        const data = exports.GetLatestTopicInferencesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestTopicInferences", data);
        return promise.then((data) => exports.GetLatestTopicInferencesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecastsAtBlock(request) {
        const data = exports.GetForecastsAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecastsAtBlock", data);
        return promise.then((data) => exports.GetForecastsAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNetworkLossBundleAtBlock(request) {
        const data = exports.GetNetworkLossBundleAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNetworkLossBundleAtBlock", data);
        return promise.then((data) => exports.GetNetworkLossBundleAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTotalStake(request) {
        const data = exports.GetTotalStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTotalStake", data);
        return promise.then((data) => exports.GetTotalStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerStakeInTopic(request) {
        const data = exports.GetReputerStakeInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerStakeInTopic", data);
        return promise.then((data) => exports.GetReputerStakeInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetMultiReputerStakeInTopic(request) {
        const data = exports.GetMultiReputerStakeInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetMultiReputerStakeInTopic", data);
        return promise.then((data) => exports.GetMultiReputerStakeInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeFromReputerInTopicInSelf(request) {
        const data = exports.GetStakeFromReputerInTopicInSelfRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeFromReputerInTopicInSelf", data);
        return promise.then((data) => exports.GetStakeFromReputerInTopicInSelfResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeInTopicInReputer(request) {
        const data = exports.GetDelegateStakeInTopicInReputerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeInTopicInReputer", data);
        return promise.then((data) => exports.GetDelegateStakeInTopicInReputerResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeFromDelegatorInTopicInReputer(request) {
        const data = exports.GetStakeFromDelegatorInTopicInReputerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeFromDelegatorInTopicInReputer", data);
        return promise.then((data) => exports.GetStakeFromDelegatorInTopicInReputerResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeFromDelegatorInTopic(request) {
        const data = exports.GetStakeFromDelegatorInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeFromDelegatorInTopic", data);
        return promise.then((data) => exports.GetStakeFromDelegatorInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicStake(request) {
        const data = exports.GetTopicStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicStake", data);
        return promise.then((data) => exports.GetTopicStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeRemovalsUpUntilBlock(request) {
        const data = exports.GetStakeRemovalsUpUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeRemovalsUpUntilBlock", data);
        return promise.then((data) => exports.GetStakeRemovalsUpUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeRemovalsUpUntilBlock(request) {
        const data = exports.GetDelegateStakeRemovalsUpUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeRemovalsUpUntilBlock", data);
        return promise.then((data) => exports.GetDelegateStakeRemovalsUpUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeRemovalInfo(request) {
        const data = exports.GetStakeRemovalInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeRemovalInfo", data);
        return promise.then((data) => exports.GetStakeRemovalInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeRemovalInfo(request) {
        const data = exports.GetDelegateStakeRemovalInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeRemovalInfo", data);
        return promise.then((data) => exports.GetDelegateStakeRemovalInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerNodeInfo(request) {
        const data = exports.GetWorkerNodeInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerNodeInfo", data);
        return promise.then((data) => exports.GetWorkerNodeInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerNodeInfo(request) {
        const data = exports.GetReputerNodeInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerNodeInfo", data);
        return promise.then((data) => exports.GetReputerNodeInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsWorkerRegisteredInTopicId(request) {
        const data = exports.IsWorkerRegisteredInTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsWorkerRegisteredInTopicId", data);
        return promise.then((data) => exports.IsWorkerRegisteredInTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsReputerRegisteredInTopicId(request) {
        const data = exports.IsReputerRegisteredInTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsReputerRegisteredInTopicId", data);
        return promise.then((data) => exports.IsReputerRegisteredInTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNetworkInferencesAtBlock(request) {
        const data = exports.GetNetworkInferencesAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNetworkInferencesAtBlock", data);
        return promise.then((data) => exports.GetNetworkInferencesAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestNetworkInferences(request) {
        const data = exports.GetLatestNetworkInferencesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestNetworkInferences", data);
        return promise.then((data) => exports.GetLatestNetworkInferencesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestAvailableNetworkInferences(request) {
        const data = exports.GetLatestAvailableNetworkInferencesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestAvailableNetworkInferences", data);
        return promise.then((data) => exports.GetLatestAvailableNetworkInferencesResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsWorkerNonceUnfulfilled(request) {
        const data = exports.IsWorkerNonceUnfulfilledRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsWorkerNonceUnfulfilled", data);
        return promise.then((data) => exports.IsWorkerNonceUnfulfilledResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsReputerNonceUnfulfilled(request) {
        const data = exports.IsReputerNonceUnfulfilledRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsReputerNonceUnfulfilled", data);
        return promise.then((data) => exports.IsReputerNonceUnfulfilledResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetUnfulfilledWorkerNonces(request) {
        const data = exports.GetUnfulfilledWorkerNoncesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUnfulfilledWorkerNonces", data);
        return promise.then((data) => exports.GetUnfulfilledWorkerNoncesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetUnfulfilledReputerNonces(request) {
        const data = exports.GetUnfulfilledReputerNoncesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUnfulfilledReputerNonces", data);
        return promise.then((data) => exports.GetUnfulfilledReputerNoncesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInfererNetworkRegret(request) {
        const data = exports.GetInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInfererNetworkRegret", data);
        return promise.then((data) => exports.GetInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecasterNetworkRegret(request) {
        const data = exports.GetForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecasterNetworkRegret", data);
        return promise.then((data) => exports.GetForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneInForecasterNetworkRegret(request) {
        const data = exports.GetOneInForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneInForecasterNetworkRegret", data);
        return promise.then((data) => exports.GetOneInForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsWhitelistAdmin(request) {
        const data = exports.IsWhitelistAdminRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsWhitelistAdmin", data);
        return promise.then((data) => exports.IsWhitelistAdminResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicLastWorkerCommitInfo(request) {
        const data = exports.GetTopicLastWorkerCommitInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicLastWorkerCommitInfo", data);
        return promise.then((data) => exports.GetTopicLastWorkerCommitInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicLastReputerCommitInfo(request) {
        const data = exports.GetTopicLastReputerCommitInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicLastReputerCommitInfo", data);
        return promise.then((data) => exports.GetTopicLastReputerCommitInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicRewardNonce(request) {
        const data = exports.GetTopicRewardNonceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicRewardNonce", data);
        return promise.then((data) => exports.GetTopicRewardNonceResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerLossBundlesAtBlock(request) {
        const data = exports.GetReputerLossBundlesAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerLossBundlesAtBlock", data);
        return promise.then((data) => exports.GetReputerLossBundlesAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeReputerAuthority(request) {
        const data = exports.GetStakeReputerAuthorityRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeReputerAuthority", data);
        return promise.then((data) => exports.GetStakeReputerAuthorityResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakePlacement(request) {
        const data = exports.GetDelegateStakePlacementRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakePlacement", data);
        return promise.then((data) => exports.GetDelegateStakePlacementResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeUponReputer(request) {
        const data = exports.GetDelegateStakeUponReputerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeUponReputer", data);
        return promise.then((data) => exports.GetDelegateStakeUponReputerResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateRewardPerShare(request) {
        const data = exports.GetDelegateRewardPerShareRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateRewardPerShare", data);
        return promise.then((data) => exports.GetDelegateRewardPerShareResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeRemovalForReputerAndTopicId(request) {
        const data = exports.GetStakeRemovalForReputerAndTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeRemovalForReputerAndTopicId", data);
        return promise.then((data) => exports.GetStakeRemovalForReputerAndTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeRemoval(request) {
        const data = exports.GetDelegateStakeRemovalRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeRemoval", data);
        return promise.then((data) => exports.GetDelegateStakeRemovalResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousTopicWeight(request) {
        const data = exports.GetPreviousTopicWeightRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousTopicWeight", data);
        return promise.then((data) => exports.GetPreviousTopicWeightResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTotalSumPreviousTopicWeights(request) {
        const data = exports.GetTotalSumPreviousTopicWeightsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTotalSumPreviousTopicWeights", data);
        return promise.then((data) => exports.GetTotalSumPreviousTopicWeightsResponse.decode(new wire_1.BinaryReader(data)));
    }
    TopicExists(request) {
        const data = exports.TopicExistsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TopicExists", data);
        return promise.then((data) => exports.TopicExistsResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsTopicActive(request) {
        const data = exports.IsTopicActiveRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsTopicActive", data);
        return promise.then((data) => exports.IsTopicActiveResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicFeeRevenue(request) {
        const data = exports.GetTopicFeeRevenueRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicFeeRevenue", data);
        return promise.then((data) => exports.GetTopicFeeRevenueResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInfererScoreEma(request) {
        const data = exports.GetInfererScoreEmaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInfererScoreEma", data);
        return promise.then((data) => exports.GetInfererScoreEmaResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecasterScoreEma(request) {
        const data = exports.GetForecasterScoreEmaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecasterScoreEma", data);
        return promise.then((data) => exports.GetForecasterScoreEmaResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerScoreEma(request) {
        const data = exports.GetReputerScoreEmaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerScoreEma", data);
        return promise.then((data) => exports.GetReputerScoreEmaResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInferenceScoresUntilBlock(request) {
        const data = exports.GetInferenceScoresUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInferenceScoresUntilBlock", data);
        return promise.then((data) => exports.GetInferenceScoresUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousTopicQuantileForecasterScoreEma(request) {
        const data = exports.GetPreviousTopicQuantileForecasterScoreEmaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousTopicQuantileForecasterScoreEma", data);
        return promise.then((data) => exports.GetPreviousTopicQuantileForecasterScoreEmaResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousTopicQuantileInfererScoreEma(request) {
        const data = exports.GetPreviousTopicQuantileInfererScoreEmaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousTopicQuantileInfererScoreEma", data);
        return promise.then((data) => exports.GetPreviousTopicQuantileInfererScoreEmaResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousTopicQuantileReputerScoreEma(request) {
        const data = exports.GetPreviousTopicQuantileReputerScoreEmaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousTopicQuantileReputerScoreEma", data);
        return promise.then((data) => exports.GetPreviousTopicQuantileReputerScoreEmaResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerInferenceScoresAtBlock(request) {
        const data = exports.GetWorkerInferenceScoresAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerInferenceScoresAtBlock", data);
        return promise.then((data) => exports.GetWorkerInferenceScoresAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCurrentLowestInfererScore(request) {
        const data = exports.GetCurrentLowestInfererScoreRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCurrentLowestInfererScore", data);
        return promise.then((data) => exports.GetCurrentLowestInfererScoreResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecastScoresUntilBlock(request) {
        const data = exports.GetForecastScoresUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecastScoresUntilBlock", data);
        return promise.then((data) => exports.GetForecastScoresUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerForecastScoresAtBlock(request) {
        const data = exports.GetWorkerForecastScoresAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerForecastScoresAtBlock", data);
        return promise.then((data) => exports.GetWorkerForecastScoresAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCurrentLowestForecasterScore(request) {
        const data = exports.GetCurrentLowestForecasterScoreRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCurrentLowestForecasterScore", data);
        return promise.then((data) => exports.GetCurrentLowestForecasterScoreResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputersScoresAtBlock(request) {
        const data = exports.GetReputersScoresAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputersScoresAtBlock", data);
        return promise.then((data) => exports.GetReputersScoresAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCurrentLowestReputerScore(request) {
        const data = exports.GetCurrentLowestReputerScoreRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCurrentLowestReputerScore", data);
        return promise.then((data) => exports.GetCurrentLowestReputerScoreResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetListeningCoefficient(request) {
        const data = exports.GetListeningCoefficientRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetListeningCoefficient", data);
        return promise.then((data) => exports.GetListeningCoefficientResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousReputerRewardFraction(request) {
        const data = exports.GetPreviousReputerRewardFractionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousReputerRewardFraction", data);
        return promise.then((data) => exports.GetPreviousReputerRewardFractionResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousInferenceRewardFraction(request) {
        const data = exports.GetPreviousInferenceRewardFractionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousInferenceRewardFraction", data);
        return promise.then((data) => exports.GetPreviousInferenceRewardFractionResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousForecastRewardFraction(request) {
        const data = exports.GetPreviousForecastRewardFractionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousForecastRewardFraction", data);
        return promise.then((data) => exports.GetPreviousForecastRewardFractionResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousPercentageRewardToStakedReputers(request) {
        const data = exports.GetPreviousPercentageRewardToStakedReputersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousPercentageRewardToStakedReputers", data);
        return promise.then((data) => exports.GetPreviousPercentageRewardToStakedReputersResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTotalRewardToDistribute(request) {
        const data = exports.GetTotalRewardToDistributeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTotalRewardToDistribute", data);
        return promise.then((data) => exports.GetTotalRewardToDistributeResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNaiveInfererNetworkRegret(request) {
        const data = exports.GetNaiveInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNaiveInfererNetworkRegret", data);
        return promise.then((data) => exports.GetNaiveInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutInfererInfererNetworkRegret(request) {
        const data = exports.GetOneOutInfererInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutInfererInfererNetworkRegret", data);
        return promise.then((data) => exports.GetOneOutInfererInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutInfererForecasterNetworkRegret(request) {
        const data = exports.GetOneOutInfererForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutInfererForecasterNetworkRegret", data);
        return promise.then((data) => exports.GetOneOutInfererForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutForecasterInfererNetworkRegret(request) {
        const data = exports.GetOneOutForecasterInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutForecasterInfererNetworkRegret", data);
        return promise.then((data) => exports.GetOneOutForecasterInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutForecasterForecasterNetworkRegret(request) {
        const data = exports.GetOneOutForecasterForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutForecasterForecasterNetworkRegret", data);
        return promise.then((data) => exports.GetOneOutForecasterForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetActiveTopicsAtBlock(request) {
        const data = exports.GetActiveTopicsAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetActiveTopicsAtBlock", data);
        return promise.then((data) => exports.GetActiveTopicsAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNextChurningBlockByTopicId(request) {
        const data = exports.GetNextChurningBlockByTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNextChurningBlockByTopicId", data);
        return promise.then((data) => exports.GetNextChurningBlockByTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCountInfererInclusionsInTopic(request) {
        const data = exports.GetCountInfererInclusionsInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCountInfererInclusionsInTopic", data);
        return promise.then((data) => exports.GetCountInfererInclusionsInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCountForecasterInclusionsInTopic(request) {
        const data = exports.GetCountForecasterInclusionsInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCountForecasterInclusionsInTopic", data);
        return promise.then((data) => exports.GetCountForecasterInclusionsInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetActiveReputersForTopic(request) {
        const data = exports.GetActiveReputersForTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetActiveReputersForTopic", data);
        return promise.then((data) => exports.GetActiveReputersForTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetActiveForecastersForTopic(request) {
        const data = exports.GetActiveForecastersForTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetActiveForecastersForTopic", data);
        return promise.then((data) => exports.GetActiveForecastersForTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetActiveInferersForTopic(request) {
        const data = exports.GetActiveInferersForTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetActiveInferersForTopic", data);
        return promise.then((data) => exports.GetActiveInferersForTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryServiceClientImpl = QueryServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

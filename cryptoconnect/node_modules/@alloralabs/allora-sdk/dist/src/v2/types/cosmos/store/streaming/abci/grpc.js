"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/store/streaming/abci/grpc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABCIListenerServiceClientImpl = exports.ABCIListenerServiceServiceName = exports.ListenCommitResponse = exports.ListenCommitRequest = exports.ListenFinalizeBlockResponse = exports.ListenFinalizeBlockRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const types_1 = require("../../../../tendermint/abci/types");
const listening_1 = require("../../v1beta1/listening");
exports.protobufPackage = "cosmos.store.streaming.abci";
function createBaseListenFinalizeBlockRequest() {
    return { req: undefined, res: undefined };
}
exports.ListenFinalizeBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.req !== undefined) {
            types_1.RequestFinalizeBlock.encode(message.req, writer.uint32(10).fork()).join();
        }
        if (message.res !== undefined) {
            types_1.ResponseFinalizeBlock.encode(message.res, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.req = types_1.RequestFinalizeBlock.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.res = types_1.ResponseFinalizeBlock.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            req: isSet(object.req) ? types_1.RequestFinalizeBlock.fromJSON(object.req) : undefined,
            res: isSet(object.res) ? types_1.ResponseFinalizeBlock.fromJSON(object.res) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.req !== undefined) {
            obj.req = types_1.RequestFinalizeBlock.toJSON(message.req);
        }
        if (message.res !== undefined) {
            obj.res = types_1.ResponseFinalizeBlock.toJSON(message.res);
        }
        return obj;
    },
    create(base) {
        return exports.ListenFinalizeBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListenFinalizeBlockRequest();
        message.req = (object.req !== undefined && object.req !== null)
            ? types_1.RequestFinalizeBlock.fromPartial(object.req)
            : undefined;
        message.res = (object.res !== undefined && object.res !== null)
            ? types_1.ResponseFinalizeBlock.fromPartial(object.res)
            : undefined;
        return message;
    },
};
function createBaseListenFinalizeBlockResponse() {
    return {};
}
exports.ListenFinalizeBlockResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListenFinalizeBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListenFinalizeBlockResponse();
        return message;
    },
};
function createBaseListenCommitRequest() {
    return { blockHeight: "0", res: undefined, changeSet: [] };
}
exports.ListenCommitRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.res !== undefined) {
            types_1.ResponseCommit.encode(message.res, writer.uint32(18).fork()).join();
        }
        for (const v of message.changeSet) {
            listening_1.StoreKVPair.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.res = types_1.ResponseCommit.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.changeSet.push(listening_1.StoreKVPair.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            res: isSet(object.res) ? types_1.ResponseCommit.fromJSON(object.res) : undefined,
            changeSet: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.changeSet)
                ? object.changeSet.map((e) => listening_1.StoreKVPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.res !== undefined) {
            obj.res = types_1.ResponseCommit.toJSON(message.res);
        }
        if ((_a = message.changeSet) === null || _a === void 0 ? void 0 : _a.length) {
            obj.changeSet = message.changeSet.map((e) => listening_1.StoreKVPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListenCommitRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListenCommitRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.res = (object.res !== undefined && object.res !== null)
            ? types_1.ResponseCommit.fromPartial(object.res)
            : undefined;
        message.changeSet = ((_b = object.changeSet) === null || _b === void 0 ? void 0 : _b.map((e) => listening_1.StoreKVPair.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListenCommitResponse() {
    return {};
}
exports.ListenCommitResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListenCommitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListenCommitResponse();
        return message;
    },
};
exports.ABCIListenerServiceServiceName = "cosmos.store.streaming.abci.ABCIListenerService";
class ABCIListenerServiceClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.ABCIListenerServiceServiceName;
        this.rpc = rpc;
        this.ListenFinalizeBlock = this.ListenFinalizeBlock.bind(this);
        this.ListenCommit = this.ListenCommit.bind(this);
    }
    ListenFinalizeBlock(request) {
        const data = exports.ListenFinalizeBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListenFinalizeBlock", data);
        return promise.then((data) => exports.ListenFinalizeBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    ListenCommit(request) {
        const data = exports.ListenCommitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListenCommit", data);
        return promise.then((data) => exports.ListenCommitResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.ABCIListenerServiceClientImpl = ABCIListenerServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

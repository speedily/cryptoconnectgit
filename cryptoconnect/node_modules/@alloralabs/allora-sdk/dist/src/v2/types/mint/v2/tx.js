"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v2/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgServiceClientImpl = exports.MsgServiceServiceName = exports.RecalculateTargetEmissionResponse = exports.RecalculateTargetEmissionRequest = exports.UpdateParamsResponse = exports.UpdateParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const types_1 = require("../v1beta1/types");
exports.protobufPackage = "mint.v2";
function createBaseUpdateParamsRequest() {
    return { sender: "", params: undefined, recalculateTargetEmission: false, blocksPerMonth: "0" };
}
exports.UpdateParamsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(18).fork()).join();
        }
        if (message.recalculateTargetEmission !== false) {
            writer.uint32(24).bool(message.recalculateTargetEmission);
        }
        if (message.blocksPerMonth !== "0") {
            writer.uint32(32).uint64(message.blocksPerMonth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.recalculateTargetEmission = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.blocksPerMonth = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            recalculateTargetEmission: isSet(object.recalculateTargetEmission)
                ? globalThis.Boolean(object.recalculateTargetEmission)
                : false,
            blocksPerMonth: isSet(object.blocksPerMonth) ? globalThis.String(object.blocksPerMonth) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.recalculateTargetEmission !== false) {
            obj.recalculateTargetEmission = message.recalculateTargetEmission;
        }
        if (message.blocksPerMonth !== "0") {
            obj.blocksPerMonth = message.blocksPerMonth;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateParamsRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? types_1.Params.fromPartial(object.params)
            : undefined;
        message.recalculateTargetEmission = (_b = object.recalculateTargetEmission) !== null && _b !== void 0 ? _b : false;
        message.blocksPerMonth = (_c = object.blocksPerMonth) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseUpdateParamsResponse() {
    return {};
}
exports.UpdateParamsResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.UpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseUpdateParamsResponse();
        return message;
    },
};
function createBaseRecalculateTargetEmissionRequest() {
    return { sender: "" };
}
exports.RecalculateTargetEmissionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecalculateTargetEmissionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sender: isSet(object.sender) ? globalThis.String(object.sender) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        return obj;
    },
    create(base) {
        return exports.RecalculateTargetEmissionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRecalculateTargetEmissionRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRecalculateTargetEmissionResponse() {
    return {};
}
exports.RecalculateTargetEmissionResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecalculateTargetEmissionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RecalculateTargetEmissionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRecalculateTargetEmissionResponse();
        return message;
    },
};
exports.MsgServiceServiceName = "mint.v2.MsgService";
class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceServiceName;
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.RecalculateTargetEmission = this.RecalculateTargetEmission.bind(this);
    }
    UpdateParams(request) {
        const data = exports.UpdateParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then((data) => exports.UpdateParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    RecalculateTargetEmission(request) {
        const data = exports.RecalculateTargetEmissionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RecalculateTargetEmission", data);
        return promise.then((data) => exports.RecalculateTargetEmissionResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgServiceClientImpl = MsgServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

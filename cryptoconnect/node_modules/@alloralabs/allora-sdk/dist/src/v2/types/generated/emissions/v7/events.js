"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v7/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTopicInitialEmaScoreSet = exports.EventTopicInitialRegretSet = exports.EventNaiveInfererNetworkRegretSet = exports.EventForecasterNetworkRegretSet = exports.EventInfererNetworkRegretSet = exports.EventListeningCoefficientsSet = exports.EventEMAScoresSet = exports.EventTopicRewardsSet = exports.EventReputerLastCommitSet = exports.EventWorkerLastCommitSet = exports.EventForecastTaskScoreSet = exports.EventNetworkLossSet = exports.EventRewardsSettled = exports.EventScoresSet = exports.ActorType = exports.protobufPackage = void 0;
exports.actorTypeFromJSON = actorTypeFromJSON;
exports.actorTypeToJSON = actorTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const nonce_1 = require("../v3/nonce");
const reputer_1 = require("../v3/reputer");
exports.protobufPackage = "emissions.v7";
var ActorType;
(function (ActorType) {
    ActorType[ActorType["ACTOR_TYPE_INFERER_UNSPECIFIED"] = 0] = "ACTOR_TYPE_INFERER_UNSPECIFIED";
    ActorType[ActorType["ACTOR_TYPE_FORECASTER"] = 1] = "ACTOR_TYPE_FORECASTER";
    ActorType[ActorType["ACTOR_TYPE_REPUTER"] = 2] = "ACTOR_TYPE_REPUTER";
    ActorType[ActorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ActorType || (exports.ActorType = ActorType = {}));
function actorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTOR_TYPE_INFERER_UNSPECIFIED":
            return ActorType.ACTOR_TYPE_INFERER_UNSPECIFIED;
        case 1:
        case "ACTOR_TYPE_FORECASTER":
            return ActorType.ACTOR_TYPE_FORECASTER;
        case 2:
        case "ACTOR_TYPE_REPUTER":
            return ActorType.ACTOR_TYPE_REPUTER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ActorType.UNRECOGNIZED;
    }
}
function actorTypeToJSON(object) {
    switch (object) {
        case ActorType.ACTOR_TYPE_INFERER_UNSPECIFIED:
            return "ACTOR_TYPE_INFERER_UNSPECIFIED";
        case ActorType.ACTOR_TYPE_FORECASTER:
            return "ACTOR_TYPE_FORECASTER";
        case ActorType.ACTOR_TYPE_REPUTER:
            return "ACTOR_TYPE_REPUTER";
        case ActorType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseEventScoresSet() {
    return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], scores: [] };
}
exports.EventScoresSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.scores) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventScoresSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scores.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.scores) === null || _b === void 0 ? void 0 : _b.length) {
            obj.scores = message.scores;
        }
        return obj;
    },
    create(base) {
        return exports.EventScoresSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventScoresSet();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        message.addresses = ((_d = object.addresses) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.scores = ((_e = object.scores) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventRewardsSettled() {
    return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], rewards: [] };
}
exports.EventRewardsSettled = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.rewards) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRewardsSettled();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.rewards.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            rewards: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.rewards) === null || _b === void 0 ? void 0 : _b.length) {
            obj.rewards = message.rewards;
        }
        return obj;
    },
    create(base) {
        return exports.EventRewardsSettled.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventRewardsSettled();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        message.addresses = ((_d = object.addresses) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.rewards = ((_e = object.rewards) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventNetworkLossSet() {
    return { topicId: "0", blockHeight: "0", valueBundle: undefined };
}
exports.EventNetworkLossSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.valueBundle !== undefined) {
            reputer_1.ValueBundle.encode(message.valueBundle, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventNetworkLossSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.valueBundle = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            valueBundle: isSet(object.valueBundle) ? reputer_1.ValueBundle.fromJSON(object.valueBundle) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.valueBundle !== undefined) {
            obj.valueBundle = reputer_1.ValueBundle.toJSON(message.valueBundle);
        }
        return obj;
    },
    create(base) {
        return exports.EventNetworkLossSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventNetworkLossSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.valueBundle = (object.valueBundle !== undefined && object.valueBundle !== null)
            ? reputer_1.ValueBundle.fromPartial(object.valueBundle)
            : undefined;
        return message;
    },
};
function createBaseEventForecastTaskScoreSet() {
    return { topicId: "0", score: "" };
}
exports.EventForecastTaskScoreSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.score !== "") {
            writer.uint32(18).string(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventForecastTaskScoreSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.score = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            score: isSet(object.score) ? globalThis.String(object.score) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.score !== "") {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return exports.EventForecastTaskScoreSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventForecastTaskScoreSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.score = (_b = object.score) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventWorkerLastCommitSet() {
    return { topicId: "0", blockHeight: "0", nonce: undefined };
}
exports.EventWorkerLastCommitSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.nonce !== undefined) {
            nonce_1.Nonce.encode(message.nonce, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventWorkerLastCommitSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nonce = nonce_1.Nonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            nonce: isSet(object.nonce) ? nonce_1.Nonce.fromJSON(object.nonce) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.nonce !== undefined) {
            obj.nonce = nonce_1.Nonce.toJSON(message.nonce);
        }
        return obj;
    },
    create(base) {
        return exports.EventWorkerLastCommitSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventWorkerLastCommitSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.nonce = (object.nonce !== undefined && object.nonce !== null) ? nonce_1.Nonce.fromPartial(object.nonce) : undefined;
        return message;
    },
};
function createBaseEventReputerLastCommitSet() {
    return { topicId: "0", blockHeight: "0", nonce: undefined };
}
exports.EventReputerLastCommitSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.nonce !== undefined) {
            nonce_1.Nonce.encode(message.nonce, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventReputerLastCommitSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nonce = nonce_1.Nonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            nonce: isSet(object.nonce) ? nonce_1.Nonce.fromJSON(object.nonce) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.nonce !== undefined) {
            obj.nonce = nonce_1.Nonce.toJSON(message.nonce);
        }
        return obj;
    },
    create(base) {
        return exports.EventReputerLastCommitSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventReputerLastCommitSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.nonce = (object.nonce !== undefined && object.nonce !== null) ? nonce_1.Nonce.fromPartial(object.nonce) : undefined;
        return message;
    },
};
function createBaseEventTopicRewardsSet() {
    return { topicIds: [], rewards: [] };
}
exports.EventTopicRewardsSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.topicIds) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.rewards) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTopicRewardsSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.topicIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.topicIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rewards.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicIds) ? object.topicIds.map((e) => globalThis.String(e)) : [],
            rewards: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.topicIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topicIds = message.topicIds;
        }
        if ((_b = message.rewards) === null || _b === void 0 ? void 0 : _b.length) {
            obj.rewards = message.rewards;
        }
        return obj;
    },
    create(base) {
        return exports.EventTopicRewardsSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventTopicRewardsSet();
        message.topicIds = ((_a = object.topicIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.rewards = ((_b = object.rewards) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventEMAScoresSet() {
    return { actorType: 0, topicId: "0", nonce: "0", addresses: [], scores: [], isActive: [] };
}
exports.EventEMAScoresSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.nonce !== "0") {
            writer.uint32(24).int64(message.nonce);
        }
        for (const v of message.addresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.scores) {
            writer.uint32(42).string(v);
        }
        writer.uint32(50).fork();
        for (const v of message.isActive) {
            writer.bool(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEMAScoresSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nonce = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scores.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag === 48) {
                        message.isActive.push(reader.bool());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.isActive.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => globalThis.String(e)) : [],
            isActive: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.isActive)
                ? object.isActive.map((e) => globalThis.Boolean(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.nonce !== "0") {
            obj.nonce = message.nonce;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.scores) === null || _b === void 0 ? void 0 : _b.length) {
            obj.scores = message.scores;
        }
        if ((_c = message.isActive) === null || _c === void 0 ? void 0 : _c.length) {
            obj.isActive = message.isActive;
        }
        return obj;
    },
    create(base) {
        return exports.EventEMAScoresSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseEventEMAScoresSet();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.nonce = (_c = object.nonce) !== null && _c !== void 0 ? _c : "0";
        message.addresses = ((_d = object.addresses) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.scores = ((_e = object.scores) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.isActive = ((_f = object.isActive) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventListeningCoefficientsSet() {
    return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], coefficients: [] };
}
exports.EventListeningCoefficientsSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.coefficients) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventListeningCoefficientsSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.coefficients.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            coefficients: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coefficients)
                ? object.coefficients.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.coefficients) === null || _b === void 0 ? void 0 : _b.length) {
            obj.coefficients = message.coefficients;
        }
        return obj;
    },
    create(base) {
        return exports.EventListeningCoefficientsSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventListeningCoefficientsSet();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        message.addresses = ((_d = object.addresses) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.coefficients = ((_e = object.coefficients) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventInfererNetworkRegretSet() {
    return { topicId: "0", blockHeight: "0", addresses: [], regrets: [] };
}
exports.EventInfererNetworkRegretSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(26).string(v);
        }
        for (const v of message.regrets) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventInfererNetworkRegretSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.regrets.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            regrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.regrets) ? object.regrets.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.regrets) === null || _b === void 0 ? void 0 : _b.length) {
            obj.regrets = message.regrets;
        }
        return obj;
    },
    create(base) {
        return exports.EventInfererNetworkRegretSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventInfererNetworkRegretSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.addresses = ((_c = object.addresses) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.regrets = ((_d = object.regrets) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventForecasterNetworkRegretSet() {
    return { topicId: "0", blockHeight: "0", addresses: [], regrets: [] };
}
exports.EventForecasterNetworkRegretSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(26).string(v);
        }
        for (const v of message.regrets) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventForecasterNetworkRegretSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.regrets.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            regrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.regrets) ? object.regrets.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.regrets) === null || _b === void 0 ? void 0 : _b.length) {
            obj.regrets = message.regrets;
        }
        return obj;
    },
    create(base) {
        return exports.EventForecasterNetworkRegretSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventForecasterNetworkRegretSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.addresses = ((_c = object.addresses) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.regrets = ((_d = object.regrets) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventNaiveInfererNetworkRegretSet() {
    return { topicId: "0", blockHeight: "0", addresses: [], regrets: [] };
}
exports.EventNaiveInfererNetworkRegretSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(26).string(v);
        }
        for (const v of message.regrets) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventNaiveInfererNetworkRegretSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.regrets.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            regrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.regrets) ? object.regrets.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.regrets) === null || _b === void 0 ? void 0 : _b.length) {
            obj.regrets = message.regrets;
        }
        return obj;
    },
    create(base) {
        return exports.EventNaiveInfererNetworkRegretSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventNaiveInfererNetworkRegretSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.addresses = ((_c = object.addresses) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.regrets = ((_d = object.regrets) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventTopicInitialRegretSet() {
    return { topicId: "0", blockHeight: "0", regret: "" };
}
exports.EventTopicInitialRegretSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.regret !== "") {
            writer.uint32(26).string(message.regret);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTopicInitialRegretSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.regret = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            regret: isSet(object.regret) ? globalThis.String(object.regret) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.regret !== "") {
            obj.regret = message.regret;
        }
        return obj;
    },
    create(base) {
        return exports.EventTopicInitialRegretSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventTopicInitialRegretSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.regret = (_c = object.regret) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventTopicInitialEmaScoreSet() {
    return { actorType: 0, topicId: "0", blockHeight: "0", score: "" };
}
exports.EventTopicInitialEmaScoreSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        if (message.score !== "") {
            writer.uint32(34).string(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTopicInitialEmaScoreSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.score = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            score: isSet(object.score) ? globalThis.String(object.score) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.score !== "") {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return exports.EventTopicInitialEmaScoreSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventTopicInitialEmaScoreSet();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        message.score = (_d = object.score) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

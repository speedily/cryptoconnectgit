import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../../base/v1beta1/coin";
export declare const protobufPackage = "cosmos.accounts.testing.counter.v1";
/** MsgInit defines a message which initializes the counter with a given amount. */
export interface MsgInit {
    /** initial_value is the initial amount to set the counter to. */
    initialValue: string;
}
/** MsgInitResponse defines the MsgInit response type. */
export interface MsgInitResponse {
}
/** MsgIncreaseCounter defines a message which increases the counter by a given amount. */
export interface MsgIncreaseCounter {
    /** amount is the amount to increase the counter by. */
    amount: string;
}
/**
 * MsgIncreaseCounterResponse defines the MsgIncreaseCounter response type.
 * Returns the new counter value.
 */
export interface MsgIncreaseCounterResponse {
    /** new_amount defines the new counter value after the increase. */
    newAmount: string;
}
/** MsgTestDependencies is used to test the dependencies. */
export interface MsgTestDependencies {
}
/** MsgTestDependenciesResponse is used to test the dependencies. */
export interface MsgTestDependenciesResponse {
    /** chain_id is used to test that the header service correctly works. */
    chainId: string;
    /** address is used to test address codec. */
    address: string;
    /** before_gas is used to test the gas meter reporting. */
    beforeGas: string;
    /** after_gas is used to test gas meter increasing. */
    afterGas: string;
    /** funds reports the funds from the implementation.Funds method. */
    funds: Coin[];
}
/** QueryCounterRequest is used to query the counter value. */
export interface QueryCounterRequest {
}
/** QueryCounterResponse returns the counter value. */
export interface QueryCounterResponse {
    /** value defines the value of the counter. */
    value: string;
}
export declare const MsgInit: MessageFns<MsgInit>;
export declare const MsgInitResponse: MessageFns<MsgInitResponse>;
export declare const MsgIncreaseCounter: MessageFns<MsgIncreaseCounter>;
export declare const MsgIncreaseCounterResponse: MessageFns<MsgIncreaseCounterResponse>;
export declare const MsgTestDependencies: MessageFns<MsgTestDependencies>;
export declare const MsgTestDependenciesResponse: MessageFns<MsgTestDependenciesResponse>;
export declare const QueryCounterRequest: MessageFns<QueryCounterRequest>;
export declare const QueryCounterResponse: MessageFns<QueryCounterResponse>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=counter.d.ts.map
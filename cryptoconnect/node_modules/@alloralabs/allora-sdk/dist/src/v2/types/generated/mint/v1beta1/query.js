"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v1beta1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryEmissionInfoResponse = exports.QueryEmissionInfoRequest = exports.QueryInflationResponse = exports.QueryInflationRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const types_1 = require("./types");
exports.protobufPackage = "mint.v1beta1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? types_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryInflationRequest() {
    return {};
}
exports.QueryInflationRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInflationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryInflationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryInflationRequest();
        return message;
    },
};
function createBaseQueryInflationResponse() {
    return { inflation: new Uint8Array(0) };
}
exports.QueryInflationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inflation.length !== 0) {
            writer.uint32(10).bytes(message.inflation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInflationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inflation = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { inflation: isSet(object.inflation) ? bytesFromBase64(object.inflation) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.inflation.length !== 0) {
            obj.inflation = base64FromBytes(message.inflation);
        }
        return obj;
    },
    create(base) {
        return exports.QueryInflationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryInflationResponse();
        message.inflation = (_a = object.inflation) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryEmissionInfoRequest() {
    return {};
}
exports.QueryEmissionInfoRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEmissionInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryEmissionInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryEmissionInfoRequest();
        return message;
    },
};
function createBaseQueryEmissionInfoResponse() {
    return {
        params: undefined,
        ecosystemBalance: "",
        previousBlockEmission: "",
        ecosystemMintSupplyRemaining: "",
        blocksPerMonth: "0",
        blockHeightTargetEILastCalculated: "0",
        blockHeightTargetEINextCalculated: "0",
        networkStakedTokens: "",
        lockedVestingTokensTotal: "",
        lockedVestingTokensInvestorsPreseed: "",
        lockedVestingTokensInvestorsSeed: "",
        lockedVestingTokensTeam: "",
        ecosystemLocked: "",
        circulatingSupply: "",
        maxSupply: "",
        targetEmissionRatePerUnitStakedToken: "",
        reputersPercent: "",
        validatorsPercent: "",
        maximumMonthlyEmissionPerUnitStakedToken: "",
        targetRewardEmissionPerUnitStakedToken: "",
        emissionPerUnitStakedToken: "",
        emissionPerMonth: "",
        blockEmission: "",
        validatorCut: "",
        alloraRewardsCut: "",
        previousRewardEmissionPerUnitStakedToken: "",
    };
}
exports.QueryEmissionInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        if (message.ecosystemBalance !== "") {
            writer.uint32(18).string(message.ecosystemBalance);
        }
        if (message.previousBlockEmission !== "") {
            writer.uint32(26).string(message.previousBlockEmission);
        }
        if (message.ecosystemMintSupplyRemaining !== "") {
            writer.uint32(34).string(message.ecosystemMintSupplyRemaining);
        }
        if (message.blocksPerMonth !== "0") {
            writer.uint32(40).uint64(message.blocksPerMonth);
        }
        if (message.blockHeightTargetEILastCalculated !== "0") {
            writer.uint32(48).uint64(message.blockHeightTargetEILastCalculated);
        }
        if (message.blockHeightTargetEINextCalculated !== "0") {
            writer.uint32(56).uint64(message.blockHeightTargetEINextCalculated);
        }
        if (message.networkStakedTokens !== "") {
            writer.uint32(66).string(message.networkStakedTokens);
        }
        if (message.lockedVestingTokensTotal !== "") {
            writer.uint32(74).string(message.lockedVestingTokensTotal);
        }
        if (message.lockedVestingTokensInvestorsPreseed !== "") {
            writer.uint32(82).string(message.lockedVestingTokensInvestorsPreseed);
        }
        if (message.lockedVestingTokensInvestorsSeed !== "") {
            writer.uint32(90).string(message.lockedVestingTokensInvestorsSeed);
        }
        if (message.lockedVestingTokensTeam !== "") {
            writer.uint32(98).string(message.lockedVestingTokensTeam);
        }
        if (message.ecosystemLocked !== "") {
            writer.uint32(106).string(message.ecosystemLocked);
        }
        if (message.circulatingSupply !== "") {
            writer.uint32(114).string(message.circulatingSupply);
        }
        if (message.maxSupply !== "") {
            writer.uint32(122).string(message.maxSupply);
        }
        if (message.targetEmissionRatePerUnitStakedToken !== "") {
            writer.uint32(130).string(message.targetEmissionRatePerUnitStakedToken);
        }
        if (message.reputersPercent !== "") {
            writer.uint32(138).string(message.reputersPercent);
        }
        if (message.validatorsPercent !== "") {
            writer.uint32(146).string(message.validatorsPercent);
        }
        if (message.maximumMonthlyEmissionPerUnitStakedToken !== "") {
            writer.uint32(154).string(message.maximumMonthlyEmissionPerUnitStakedToken);
        }
        if (message.targetRewardEmissionPerUnitStakedToken !== "") {
            writer.uint32(162).string(message.targetRewardEmissionPerUnitStakedToken);
        }
        if (message.emissionPerUnitStakedToken !== "") {
            writer.uint32(170).string(message.emissionPerUnitStakedToken);
        }
        if (message.emissionPerMonth !== "") {
            writer.uint32(178).string(message.emissionPerMonth);
        }
        if (message.blockEmission !== "") {
            writer.uint32(186).string(message.blockEmission);
        }
        if (message.validatorCut !== "") {
            writer.uint32(194).string(message.validatorCut);
        }
        if (message.alloraRewardsCut !== "") {
            writer.uint32(202).string(message.alloraRewardsCut);
        }
        if (message.previousRewardEmissionPerUnitStakedToken !== "") {
            writer.uint32(210).string(message.previousRewardEmissionPerUnitStakedToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEmissionInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ecosystemBalance = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.previousBlockEmission = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.ecosystemMintSupplyRemaining = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.blocksPerMonth = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.blockHeightTargetEILastCalculated = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.blockHeightTargetEINextCalculated = reader.uint64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.networkStakedTokens = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.lockedVestingTokensTotal = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.lockedVestingTokensInvestorsPreseed = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.lockedVestingTokensInvestorsSeed = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.lockedVestingTokensTeam = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.ecosystemLocked = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.circulatingSupply = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.maxSupply = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.targetEmissionRatePerUnitStakedToken = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.reputersPercent = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.validatorsPercent = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.maximumMonthlyEmissionPerUnitStakedToken = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.targetRewardEmissionPerUnitStakedToken = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.emissionPerUnitStakedToken = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.emissionPerMonth = reader.string();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.blockEmission = reader.string();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.validatorCut = reader.string();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.alloraRewardsCut = reader.string();
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.previousRewardEmissionPerUnitStakedToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            ecosystemBalance: isSet(object.ecosystemBalance) ? globalThis.String(object.ecosystemBalance) : "",
            previousBlockEmission: isSet(object.previousBlockEmission) ? globalThis.String(object.previousBlockEmission) : "",
            ecosystemMintSupplyRemaining: isSet(object.ecosystemMintSupplyRemaining)
                ? globalThis.String(object.ecosystemMintSupplyRemaining)
                : "",
            blocksPerMonth: isSet(object.blocksPerMonth) ? globalThis.String(object.blocksPerMonth) : "0",
            blockHeightTargetEILastCalculated: isSet(object.blockHeightTargetEILastCalculated)
                ? globalThis.String(object.blockHeightTargetEILastCalculated)
                : "0",
            blockHeightTargetEINextCalculated: isSet(object.blockHeightTargetEINextCalculated)
                ? globalThis.String(object.blockHeightTargetEINextCalculated)
                : "0",
            networkStakedTokens: isSet(object.networkStakedTokens) ? globalThis.String(object.networkStakedTokens) : "",
            lockedVestingTokensTotal: isSet(object.lockedVestingTokensTotal)
                ? globalThis.String(object.lockedVestingTokensTotal)
                : "",
            lockedVestingTokensInvestorsPreseed: isSet(object.lockedVestingTokensInvestorsPreseed)
                ? globalThis.String(object.lockedVestingTokensInvestorsPreseed)
                : "",
            lockedVestingTokensInvestorsSeed: isSet(object.lockedVestingTokensInvestorsSeed)
                ? globalThis.String(object.lockedVestingTokensInvestorsSeed)
                : "",
            lockedVestingTokensTeam: isSet(object.lockedVestingTokensTeam)
                ? globalThis.String(object.lockedVestingTokensTeam)
                : "",
            ecosystemLocked: isSet(object.ecosystemLocked) ? globalThis.String(object.ecosystemLocked) : "",
            circulatingSupply: isSet(object.circulatingSupply) ? globalThis.String(object.circulatingSupply) : "",
            maxSupply: isSet(object.maxSupply) ? globalThis.String(object.maxSupply) : "",
            targetEmissionRatePerUnitStakedToken: isSet(object.targetEmissionRatePerUnitStakedToken)
                ? globalThis.String(object.targetEmissionRatePerUnitStakedToken)
                : "",
            reputersPercent: isSet(object.reputersPercent) ? globalThis.String(object.reputersPercent) : "",
            validatorsPercent: isSet(object.validatorsPercent) ? globalThis.String(object.validatorsPercent) : "",
            maximumMonthlyEmissionPerUnitStakedToken: isSet(object.maximumMonthlyEmissionPerUnitStakedToken)
                ? globalThis.String(object.maximumMonthlyEmissionPerUnitStakedToken)
                : "",
            targetRewardEmissionPerUnitStakedToken: isSet(object.targetRewardEmissionPerUnitStakedToken)
                ? globalThis.String(object.targetRewardEmissionPerUnitStakedToken)
                : "",
            emissionPerUnitStakedToken: isSet(object.emissionPerUnitStakedToken)
                ? globalThis.String(object.emissionPerUnitStakedToken)
                : "",
            emissionPerMonth: isSet(object.emissionPerMonth) ? globalThis.String(object.emissionPerMonth) : "",
            blockEmission: isSet(object.blockEmission) ? globalThis.String(object.blockEmission) : "",
            validatorCut: isSet(object.validatorCut) ? globalThis.String(object.validatorCut) : "",
            alloraRewardsCut: isSet(object.alloraRewardsCut) ? globalThis.String(object.alloraRewardsCut) : "",
            previousRewardEmissionPerUnitStakedToken: isSet(object.previousRewardEmissionPerUnitStakedToken)
                ? globalThis.String(object.previousRewardEmissionPerUnitStakedToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.ecosystemBalance !== "") {
            obj.ecosystemBalance = message.ecosystemBalance;
        }
        if (message.previousBlockEmission !== "") {
            obj.previousBlockEmission = message.previousBlockEmission;
        }
        if (message.ecosystemMintSupplyRemaining !== "") {
            obj.ecosystemMintSupplyRemaining = message.ecosystemMintSupplyRemaining;
        }
        if (message.blocksPerMonth !== "0") {
            obj.blocksPerMonth = message.blocksPerMonth;
        }
        if (message.blockHeightTargetEILastCalculated !== "0") {
            obj.blockHeightTargetEILastCalculated = message.blockHeightTargetEILastCalculated;
        }
        if (message.blockHeightTargetEINextCalculated !== "0") {
            obj.blockHeightTargetEINextCalculated = message.blockHeightTargetEINextCalculated;
        }
        if (message.networkStakedTokens !== "") {
            obj.networkStakedTokens = message.networkStakedTokens;
        }
        if (message.lockedVestingTokensTotal !== "") {
            obj.lockedVestingTokensTotal = message.lockedVestingTokensTotal;
        }
        if (message.lockedVestingTokensInvestorsPreseed !== "") {
            obj.lockedVestingTokensInvestorsPreseed = message.lockedVestingTokensInvestorsPreseed;
        }
        if (message.lockedVestingTokensInvestorsSeed !== "") {
            obj.lockedVestingTokensInvestorsSeed = message.lockedVestingTokensInvestorsSeed;
        }
        if (message.lockedVestingTokensTeam !== "") {
            obj.lockedVestingTokensTeam = message.lockedVestingTokensTeam;
        }
        if (message.ecosystemLocked !== "") {
            obj.ecosystemLocked = message.ecosystemLocked;
        }
        if (message.circulatingSupply !== "") {
            obj.circulatingSupply = message.circulatingSupply;
        }
        if (message.maxSupply !== "") {
            obj.maxSupply = message.maxSupply;
        }
        if (message.targetEmissionRatePerUnitStakedToken !== "") {
            obj.targetEmissionRatePerUnitStakedToken = message.targetEmissionRatePerUnitStakedToken;
        }
        if (message.reputersPercent !== "") {
            obj.reputersPercent = message.reputersPercent;
        }
        if (message.validatorsPercent !== "") {
            obj.validatorsPercent = message.validatorsPercent;
        }
        if (message.maximumMonthlyEmissionPerUnitStakedToken !== "") {
            obj.maximumMonthlyEmissionPerUnitStakedToken = message.maximumMonthlyEmissionPerUnitStakedToken;
        }
        if (message.targetRewardEmissionPerUnitStakedToken !== "") {
            obj.targetRewardEmissionPerUnitStakedToken = message.targetRewardEmissionPerUnitStakedToken;
        }
        if (message.emissionPerUnitStakedToken !== "") {
            obj.emissionPerUnitStakedToken = message.emissionPerUnitStakedToken;
        }
        if (message.emissionPerMonth !== "") {
            obj.emissionPerMonth = message.emissionPerMonth;
        }
        if (message.blockEmission !== "") {
            obj.blockEmission = message.blockEmission;
        }
        if (message.validatorCut !== "") {
            obj.validatorCut = message.validatorCut;
        }
        if (message.alloraRewardsCut !== "") {
            obj.alloraRewardsCut = message.alloraRewardsCut;
        }
        if (message.previousRewardEmissionPerUnitStakedToken !== "") {
            obj.previousRewardEmissionPerUnitStakedToken = message.previousRewardEmissionPerUnitStakedToken;
        }
        return obj;
    },
    create(base) {
        return exports.QueryEmissionInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const message = createBaseQueryEmissionInfoResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? types_1.Params.fromPartial(object.params)
            : undefined;
        message.ecosystemBalance = (_a = object.ecosystemBalance) !== null && _a !== void 0 ? _a : "";
        message.previousBlockEmission = (_b = object.previousBlockEmission) !== null && _b !== void 0 ? _b : "";
        message.ecosystemMintSupplyRemaining = (_c = object.ecosystemMintSupplyRemaining) !== null && _c !== void 0 ? _c : "";
        message.blocksPerMonth = (_d = object.blocksPerMonth) !== null && _d !== void 0 ? _d : "0";
        message.blockHeightTargetEILastCalculated = (_e = object.blockHeightTargetEILastCalculated) !== null && _e !== void 0 ? _e : "0";
        message.blockHeightTargetEINextCalculated = (_f = object.blockHeightTargetEINextCalculated) !== null && _f !== void 0 ? _f : "0";
        message.networkStakedTokens = (_g = object.networkStakedTokens) !== null && _g !== void 0 ? _g : "";
        message.lockedVestingTokensTotal = (_h = object.lockedVestingTokensTotal) !== null && _h !== void 0 ? _h : "";
        message.lockedVestingTokensInvestorsPreseed = (_j = object.lockedVestingTokensInvestorsPreseed) !== null && _j !== void 0 ? _j : "";
        message.lockedVestingTokensInvestorsSeed = (_k = object.lockedVestingTokensInvestorsSeed) !== null && _k !== void 0 ? _k : "";
        message.lockedVestingTokensTeam = (_l = object.lockedVestingTokensTeam) !== null && _l !== void 0 ? _l : "";
        message.ecosystemLocked = (_m = object.ecosystemLocked) !== null && _m !== void 0 ? _m : "";
        message.circulatingSupply = (_o = object.circulatingSupply) !== null && _o !== void 0 ? _o : "";
        message.maxSupply = (_p = object.maxSupply) !== null && _p !== void 0 ? _p : "";
        message.targetEmissionRatePerUnitStakedToken = (_q = object.targetEmissionRatePerUnitStakedToken) !== null && _q !== void 0 ? _q : "";
        message.reputersPercent = (_r = object.reputersPercent) !== null && _r !== void 0 ? _r : "";
        message.validatorsPercent = (_s = object.validatorsPercent) !== null && _s !== void 0 ? _s : "";
        message.maximumMonthlyEmissionPerUnitStakedToken = (_t = object.maximumMonthlyEmissionPerUnitStakedToken) !== null && _t !== void 0 ? _t : "";
        message.targetRewardEmissionPerUnitStakedToken = (_u = object.targetRewardEmissionPerUnitStakedToken) !== null && _u !== void 0 ? _u : "";
        message.emissionPerUnitStakedToken = (_v = object.emissionPerUnitStakedToken) !== null && _v !== void 0 ? _v : "";
        message.emissionPerMonth = (_w = object.emissionPerMonth) !== null && _w !== void 0 ? _w : "";
        message.blockEmission = (_x = object.blockEmission) !== null && _x !== void 0 ? _x : "";
        message.validatorCut = (_y = object.validatorCut) !== null && _y !== void 0 ? _y : "";
        message.alloraRewardsCut = (_z = object.alloraRewardsCut) !== null && _z !== void 0 ? _z : "";
        message.previousRewardEmissionPerUnitStakedToken = (_0 = object.previousRewardEmissionPerUnitStakedToken) !== null && _0 !== void 0 ? _0 : "";
        return message;
    },
};
exports.QueryServiceName = "mint.v1beta1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Inflation = this.Inflation.bind(this);
        this.EmissionInfo = this.EmissionInfo.bind(this);
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    Inflation(request) {
        const data = exports.QueryInflationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Inflation", data);
        return promise.then((data) => exports.QueryInflationResponse.decode(new wire_1.BinaryReader(data)));
    }
    EmissionInfo(request) {
        const data = exports.QueryEmissionInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EmissionInfo", data);
        return promise.then((data) => exports.QueryEmissionInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

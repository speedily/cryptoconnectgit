"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v3/worker.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerDataBundles = exports.WorkerDataBundle = exports.InferenceForecastBundle = exports.Forecasts = exports.Forecast = exports.ForecastElement = exports.Inferences = exports.Inference = exports.TimestampedValue = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const nonce_1 = require("./nonce");
exports.protobufPackage = "emissions.v3";
function createBaseTimestampedValue() {
    return { blockHeight: "0", value: "" };
}
exports.TimestampedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestampedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.TimestampedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTimestampedValue();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseInference() {
    return { topicId: "0", blockHeight: "0", inferer: "", value: "", extraData: new Uint8Array(0), proof: "" };
}
exports.Inference = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        if (message.extraData.length !== 0) {
            writer.uint32(42).bytes(message.extraData);
        }
        if (message.proof !== "") {
            writer.uint32(50).string(message.proof);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInference();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.extraData = reader.bytes();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.proof = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
            proof: isSet(object.proof) ? globalThis.String(object.proof) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.extraData.length !== 0) {
            obj.extraData = base64FromBytes(message.extraData);
        }
        if (message.proof !== "") {
            obj.proof = message.proof;
        }
        return obj;
    },
    create(base) {
        return exports.Inference.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseInference();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        message.value = (_d = object.value) !== null && _d !== void 0 ? _d : "";
        message.extraData = (_e = object.extraData) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.proof = (_f = object.proof) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseInferences() {
    return { inferences: [] };
}
exports.Inferences = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.inferences) {
            exports.Inference.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInferences();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferences.push(exports.Inference.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inferences)
                ? object.inferences.map((e) => exports.Inference.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.inferences) === null || _a === void 0 ? void 0 : _a.length) {
            obj.inferences = message.inferences.map((e) => exports.Inference.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Inferences.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInferences();
        message.inferences = ((_a = object.inferences) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Inference.fromPartial(e))) || [];
        return message;
    },
};
function createBaseForecastElement() {
    return { inferer: "", value: "" };
}
exports.ForecastElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferer !== "") {
            writer.uint32(10).string(message.inferer);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseForecastElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ForecastElement.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseForecastElement();
        message.inferer = (_a = object.inferer) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseForecast() {
    return { topicId: "0", blockHeight: "0", forecaster: "", forecastElements: [], extraData: new Uint8Array(0) };
}
exports.Forecast = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.forecaster !== "") {
            writer.uint32(26).string(message.forecaster);
        }
        for (const v of message.forecastElements) {
            exports.ForecastElement.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.extraData.length !== 0) {
            writer.uint32(42).bytes(message.extraData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseForecast();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.forecastElements.push(exports.ForecastElement.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.extraData = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
            forecastElements: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecastElements)
                ? object.forecastElements.map((e) => exports.ForecastElement.fromJSON(e))
                : [],
            extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        if ((_a = message.forecastElements) === null || _a === void 0 ? void 0 : _a.length) {
            obj.forecastElements = message.forecastElements.map((e) => exports.ForecastElement.toJSON(e));
        }
        if (message.extraData.length !== 0) {
            obj.extraData = base64FromBytes(message.extraData);
        }
        return obj;
    },
    create(base) {
        return exports.Forecast.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseForecast();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.forecaster = (_c = object.forecaster) !== null && _c !== void 0 ? _c : "";
        message.forecastElements = ((_d = object.forecastElements) === null || _d === void 0 ? void 0 : _d.map((e) => exports.ForecastElement.fromPartial(e))) || [];
        message.extraData = (_e = object.extraData) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        return message;
    },
};
function createBaseForecasts() {
    return { forecasts: [] };
}
exports.Forecasts = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.forecasts) {
            exports.Forecast.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseForecasts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.forecasts.push(exports.Forecast.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            forecasts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasts)
                ? object.forecasts.map((e) => exports.Forecast.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.forecasts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.forecasts = message.forecasts.map((e) => exports.Forecast.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Forecasts.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseForecasts();
        message.forecasts = ((_a = object.forecasts) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Forecast.fromPartial(e))) || [];
        return message;
    },
};
function createBaseInferenceForecastBundle() {
    return { inference: undefined, forecast: undefined };
}
exports.InferenceForecastBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inference !== undefined) {
            exports.Inference.encode(message.inference, writer.uint32(10).fork()).join();
        }
        if (message.forecast !== undefined) {
            exports.Forecast.encode(message.forecast, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInferenceForecastBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inference = exports.Inference.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forecast = exports.Forecast.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inference: isSet(object.inference) ? exports.Inference.fromJSON(object.inference) : undefined,
            forecast: isSet(object.forecast) ? exports.Forecast.fromJSON(object.forecast) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inference !== undefined) {
            obj.inference = exports.Inference.toJSON(message.inference);
        }
        if (message.forecast !== undefined) {
            obj.forecast = exports.Forecast.toJSON(message.forecast);
        }
        return obj;
    },
    create(base) {
        return exports.InferenceForecastBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseInferenceForecastBundle();
        message.inference = (object.inference !== undefined && object.inference !== null)
            ? exports.Inference.fromPartial(object.inference)
            : undefined;
        message.forecast = (object.forecast !== undefined && object.forecast !== null)
            ? exports.Forecast.fromPartial(object.forecast)
            : undefined;
        return message;
    },
};
function createBaseWorkerDataBundle() {
    return {
        worker: "",
        nonce: undefined,
        topicId: "0",
        inferenceForecastsBundle: undefined,
        inferencesForecastsBundleSignature: new Uint8Array(0),
        pubkey: "",
    };
}
exports.WorkerDataBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.worker !== "") {
            writer.uint32(10).string(message.worker);
        }
        if (message.nonce !== undefined) {
            nonce_1.Nonce.encode(message.nonce, writer.uint32(18).fork()).join();
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        if (message.inferenceForecastsBundle !== undefined) {
            exports.InferenceForecastBundle.encode(message.inferenceForecastsBundle, writer.uint32(34).fork()).join();
        }
        if (message.inferencesForecastsBundleSignature.length !== 0) {
            writer.uint32(42).bytes(message.inferencesForecastsBundleSignature);
        }
        if (message.pubkey !== "") {
            writer.uint32(50).string(message.pubkey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerDataBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nonce = nonce_1.Nonce.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.inferenceForecastsBundle = exports.InferenceForecastBundle.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.inferencesForecastsBundleSignature = reader.bytes();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
            nonce: isSet(object.nonce) ? nonce_1.Nonce.fromJSON(object.nonce) : undefined,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            inferenceForecastsBundle: isSet(object.inferenceForecastsBundle)
                ? exports.InferenceForecastBundle.fromJSON(object.inferenceForecastsBundle)
                : undefined,
            inferencesForecastsBundleSignature: isSet(object.inferencesForecastsBundleSignature)
                ? bytesFromBase64(object.inferencesForecastsBundleSignature)
                : new Uint8Array(0),
            pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        if (message.nonce !== undefined) {
            obj.nonce = nonce_1.Nonce.toJSON(message.nonce);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.inferenceForecastsBundle !== undefined) {
            obj.inferenceForecastsBundle = exports.InferenceForecastBundle.toJSON(message.inferenceForecastsBundle);
        }
        if (message.inferencesForecastsBundleSignature.length !== 0) {
            obj.inferencesForecastsBundleSignature = base64FromBytes(message.inferencesForecastsBundleSignature);
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        return obj;
    },
    create(base) {
        return exports.WorkerDataBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseWorkerDataBundle();
        message.worker = (_a = object.worker) !== null && _a !== void 0 ? _a : "";
        message.nonce = (object.nonce !== undefined && object.nonce !== null) ? nonce_1.Nonce.fromPartial(object.nonce) : undefined;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.inferenceForecastsBundle =
            (object.inferenceForecastsBundle !== undefined && object.inferenceForecastsBundle !== null)
                ? exports.InferenceForecastBundle.fromPartial(object.inferenceForecastsBundle)
                : undefined;
        message.inferencesForecastsBundleSignature = (_c = object.inferencesForecastsBundleSignature) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.pubkey = (_d = object.pubkey) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseWorkerDataBundles() {
    return { workerDataBundles: [] };
}
exports.WorkerDataBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.workerDataBundles) {
            exports.WorkerDataBundle.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerDataBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.workerDataBundles.push(exports.WorkerDataBundle.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            workerDataBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.workerDataBundles)
                ? object.workerDataBundles.map((e) => exports.WorkerDataBundle.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.workerDataBundles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.workerDataBundles = message.workerDataBundles.map((e) => exports.WorkerDataBundle.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.WorkerDataBundles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWorkerDataBundles();
        message.workerDataBundles = ((_a = object.workerDataBundles) === null || _a === void 0 ? void 0 : _a.map((e) => exports.WorkerDataBundle.fromPartial(e))) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

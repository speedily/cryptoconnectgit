import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Coin, DecCoin } from "../../base/v1beta1/coin";
export declare const protobufPackage = "cosmos.protocolpool.v1";
/**
 * QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
 * method.
 */
export interface QueryCommunityPoolRequest {
}
/**
 * QueryCommunityPoolResponse is the response type for the Query/CommunityPool
 * RPC method.
 */
export interface QueryCommunityPoolResponse {
    /** pool defines community pool's coins. */
    pool: DecCoin[];
}
/**
 * QueryUnclaimedBudgetRequest is the request type for the Query/UnclaimedBudgetRequest
 * RPC method.
 */
export interface QueryUnclaimedBudgetRequest {
    /** address is the recipient address to query unclaimed budget amount for. */
    address: string;
}
/**
 * QueryUnclaimedBudgetResponse is the response type for the Query/UnclaimedBudget
 * RPC method.
 */
export interface QueryUnclaimedBudgetResponse {
    /** total_budget is the total budget allocated to the recipient */
    totalBudget?: Coin | undefined;
    /** claimed_amount is the budget amount already claimed by the recipient */
    claimedAmount?: Coin | undefined;
    /** unclaimed_amount is the remaining budget amount that is unclaimed by the recipient */
    unclaimedAmount?: Coin | undefined;
    /**
     * next_claim_from is the next starting claim time for fund distribution.
     * It represents the time when we can claim funds after the period time interval has passed.
     */
    nextClaimFrom?: Date | undefined;
    /** period is the time interval for fund distribution */
    period?: Duration | undefined;
    /** tranches_left is the number of tranches left for the amount to be distributed */
    tranchesLeft: string;
}
export declare const QueryCommunityPoolRequest: MessageFns<QueryCommunityPoolRequest>;
export declare const QueryCommunityPoolResponse: MessageFns<QueryCommunityPoolResponse>;
export declare const QueryUnclaimedBudgetRequest: MessageFns<QueryUnclaimedBudgetRequest>;
export declare const QueryUnclaimedBudgetResponse: MessageFns<QueryUnclaimedBudgetResponse>;
/** Query defines the gRPC querier service for community pool module. */
export interface Query {
    /** CommunityPool queries the community pool coins. */
    CommunityPool(request: QueryCommunityPoolRequest): Promise<QueryCommunityPoolResponse>;
    /** UnclaimedBudget queries the remaining budget left to be claimed and it gives overall budget allocation view. */
    UnclaimedBudget(request: QueryUnclaimedBudgetRequest): Promise<QueryUnclaimedBudgetResponse>;
}
export declare const QueryServiceName = "cosmos.protocolpool.v1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CommunityPool(request: QueryCommunityPoolRequest): Promise<QueryCommunityPoolResponse>;
    UnclaimedBudget(request: QueryUnclaimedBudgetRequest): Promise<QueryUnclaimedBudgetResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=query.d.ts.map
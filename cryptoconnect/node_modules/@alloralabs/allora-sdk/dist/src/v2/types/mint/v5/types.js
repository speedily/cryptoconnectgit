"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v5/types.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "mint.v5";
function createBaseParams() {
    return {
        mintDenom: "",
        maxSupply: "",
        fEmission: "",
        oneMonthSmoothingDegree: "",
        ecosystemTreasuryPercentOfTotalSupply: "",
        foundationTreasuryPercentOfTotalSupply: "",
        participantsPercentOfTotalSupply: "",
        investorsPercentOfTotalSupply: "",
        teamPercentOfTotalSupply: "",
        maximumMonthlyPercentageYield: "",
        investorsPreseedPercentOfTotalSupply: "",
        emissionEnabled: false,
    };
}
exports.Params = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mintDenom !== "") {
            writer.uint32(10).string(message.mintDenom);
        }
        if (message.maxSupply !== "") {
            writer.uint32(18).string(message.maxSupply);
        }
        if (message.fEmission !== "") {
            writer.uint32(26).string(message.fEmission);
        }
        if (message.oneMonthSmoothingDegree !== "") {
            writer.uint32(34).string(message.oneMonthSmoothingDegree);
        }
        if (message.ecosystemTreasuryPercentOfTotalSupply !== "") {
            writer.uint32(42).string(message.ecosystemTreasuryPercentOfTotalSupply);
        }
        if (message.foundationTreasuryPercentOfTotalSupply !== "") {
            writer.uint32(50).string(message.foundationTreasuryPercentOfTotalSupply);
        }
        if (message.participantsPercentOfTotalSupply !== "") {
            writer.uint32(58).string(message.participantsPercentOfTotalSupply);
        }
        if (message.investorsPercentOfTotalSupply !== "") {
            writer.uint32(66).string(message.investorsPercentOfTotalSupply);
        }
        if (message.teamPercentOfTotalSupply !== "") {
            writer.uint32(74).string(message.teamPercentOfTotalSupply);
        }
        if (message.maximumMonthlyPercentageYield !== "") {
            writer.uint32(82).string(message.maximumMonthlyPercentageYield);
        }
        if (message.investorsPreseedPercentOfTotalSupply !== "") {
            writer.uint32(90).string(message.investorsPreseedPercentOfTotalSupply);
        }
        if (message.emissionEnabled !== false) {
            writer.uint32(96).bool(message.emissionEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mintDenom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.maxSupply = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.fEmission = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.oneMonthSmoothingDegree = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.ecosystemTreasuryPercentOfTotalSupply = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.foundationTreasuryPercentOfTotalSupply = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.participantsPercentOfTotalSupply = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.investorsPercentOfTotalSupply = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.teamPercentOfTotalSupply = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.maximumMonthlyPercentageYield = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.investorsPreseedPercentOfTotalSupply = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.emissionEnabled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mintDenom: isSet(object.mintDenom) ? globalThis.String(object.mintDenom) : "",
            maxSupply: isSet(object.maxSupply) ? globalThis.String(object.maxSupply) : "",
            fEmission: isSet(object.fEmission) ? globalThis.String(object.fEmission) : "",
            oneMonthSmoothingDegree: isSet(object.oneMonthSmoothingDegree)
                ? globalThis.String(object.oneMonthSmoothingDegree)
                : "",
            ecosystemTreasuryPercentOfTotalSupply: isSet(object.ecosystemTreasuryPercentOfTotalSupply)
                ? globalThis.String(object.ecosystemTreasuryPercentOfTotalSupply)
                : "",
            foundationTreasuryPercentOfTotalSupply: isSet(object.foundationTreasuryPercentOfTotalSupply)
                ? globalThis.String(object.foundationTreasuryPercentOfTotalSupply)
                : "",
            participantsPercentOfTotalSupply: isSet(object.participantsPercentOfTotalSupply)
                ? globalThis.String(object.participantsPercentOfTotalSupply)
                : "",
            investorsPercentOfTotalSupply: isSet(object.investorsPercentOfTotalSupply)
                ? globalThis.String(object.investorsPercentOfTotalSupply)
                : "",
            teamPercentOfTotalSupply: isSet(object.teamPercentOfTotalSupply)
                ? globalThis.String(object.teamPercentOfTotalSupply)
                : "",
            maximumMonthlyPercentageYield: isSet(object.maximumMonthlyPercentageYield)
                ? globalThis.String(object.maximumMonthlyPercentageYield)
                : "",
            investorsPreseedPercentOfTotalSupply: isSet(object.investorsPreseedPercentOfTotalSupply)
                ? globalThis.String(object.investorsPreseedPercentOfTotalSupply)
                : "",
            emissionEnabled: isSet(object.emissionEnabled) ? globalThis.Boolean(object.emissionEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mintDenom !== "") {
            obj.mintDenom = message.mintDenom;
        }
        if (message.maxSupply !== "") {
            obj.maxSupply = message.maxSupply;
        }
        if (message.fEmission !== "") {
            obj.fEmission = message.fEmission;
        }
        if (message.oneMonthSmoothingDegree !== "") {
            obj.oneMonthSmoothingDegree = message.oneMonthSmoothingDegree;
        }
        if (message.ecosystemTreasuryPercentOfTotalSupply !== "") {
            obj.ecosystemTreasuryPercentOfTotalSupply = message.ecosystemTreasuryPercentOfTotalSupply;
        }
        if (message.foundationTreasuryPercentOfTotalSupply !== "") {
            obj.foundationTreasuryPercentOfTotalSupply = message.foundationTreasuryPercentOfTotalSupply;
        }
        if (message.participantsPercentOfTotalSupply !== "") {
            obj.participantsPercentOfTotalSupply = message.participantsPercentOfTotalSupply;
        }
        if (message.investorsPercentOfTotalSupply !== "") {
            obj.investorsPercentOfTotalSupply = message.investorsPercentOfTotalSupply;
        }
        if (message.teamPercentOfTotalSupply !== "") {
            obj.teamPercentOfTotalSupply = message.teamPercentOfTotalSupply;
        }
        if (message.maximumMonthlyPercentageYield !== "") {
            obj.maximumMonthlyPercentageYield = message.maximumMonthlyPercentageYield;
        }
        if (message.investorsPreseedPercentOfTotalSupply !== "") {
            obj.investorsPreseedPercentOfTotalSupply = message.investorsPreseedPercentOfTotalSupply;
        }
        if (message.emissionEnabled !== false) {
            obj.emissionEnabled = message.emissionEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseParams();
        message.mintDenom = (_a = object.mintDenom) !== null && _a !== void 0 ? _a : "";
        message.maxSupply = (_b = object.maxSupply) !== null && _b !== void 0 ? _b : "";
        message.fEmission = (_c = object.fEmission) !== null && _c !== void 0 ? _c : "";
        message.oneMonthSmoothingDegree = (_d = object.oneMonthSmoothingDegree) !== null && _d !== void 0 ? _d : "";
        message.ecosystemTreasuryPercentOfTotalSupply = (_e = object.ecosystemTreasuryPercentOfTotalSupply) !== null && _e !== void 0 ? _e : "";
        message.foundationTreasuryPercentOfTotalSupply = (_f = object.foundationTreasuryPercentOfTotalSupply) !== null && _f !== void 0 ? _f : "";
        message.participantsPercentOfTotalSupply = (_g = object.participantsPercentOfTotalSupply) !== null && _g !== void 0 ? _g : "";
        message.investorsPercentOfTotalSupply = (_h = object.investorsPercentOfTotalSupply) !== null && _h !== void 0 ? _h : "";
        message.teamPercentOfTotalSupply = (_j = object.teamPercentOfTotalSupply) !== null && _j !== void 0 ? _j : "";
        message.maximumMonthlyPercentageYield = (_k = object.maximumMonthlyPercentageYield) !== null && _k !== void 0 ? _k : "";
        message.investorsPreseedPercentOfTotalSupply = (_l = object.investorsPreseedPercentOfTotalSupply) !== null && _l !== void 0 ? _l : "";
        message.emissionEnabled = (_m = object.emissionEnabled) !== null && _m !== void 0 ? _m : false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

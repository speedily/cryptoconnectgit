"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v5/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const types_1 = require("./types");
exports.protobufPackage = "mint.v5";
function createBaseGenesisState() {
    return {
        params: undefined,
        previousRewardEmissionPerUnitStakedToken: "",
        previousBlockEmission: "",
        ecosystemTokensMinted: "",
        monthsUnlocked: "",
    };
}
exports.GenesisState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        if (message.previousRewardEmissionPerUnitStakedToken !== "") {
            writer.uint32(18).string(message.previousRewardEmissionPerUnitStakedToken);
        }
        if (message.previousBlockEmission !== "") {
            writer.uint32(26).string(message.previousBlockEmission);
        }
        if (message.ecosystemTokensMinted !== "") {
            writer.uint32(34).string(message.ecosystemTokensMinted);
        }
        if (message.monthsUnlocked !== "") {
            writer.uint32(42).string(message.monthsUnlocked);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.previousRewardEmissionPerUnitStakedToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.previousBlockEmission = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.ecosystemTokensMinted = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.monthsUnlocked = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            previousRewardEmissionPerUnitStakedToken: isSet(object.previousRewardEmissionPerUnitStakedToken)
                ? globalThis.String(object.previousRewardEmissionPerUnitStakedToken)
                : "",
            previousBlockEmission: isSet(object.previousBlockEmission) ? globalThis.String(object.previousBlockEmission) : "",
            ecosystemTokensMinted: isSet(object.ecosystemTokensMinted) ? globalThis.String(object.ecosystemTokensMinted) : "",
            monthsUnlocked: isSet(object.monthsUnlocked) ? globalThis.String(object.monthsUnlocked) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.previousRewardEmissionPerUnitStakedToken !== "") {
            obj.previousRewardEmissionPerUnitStakedToken = message.previousRewardEmissionPerUnitStakedToken;
        }
        if (message.previousBlockEmission !== "") {
            obj.previousBlockEmission = message.previousBlockEmission;
        }
        if (message.ecosystemTokensMinted !== "") {
            obj.ecosystemTokensMinted = message.ecosystemTokensMinted;
        }
        if (message.monthsUnlocked !== "") {
            obj.monthsUnlocked = message.monthsUnlocked;
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? types_1.Params.fromPartial(object.params)
            : undefined;
        message.previousRewardEmissionPerUnitStakedToken = (_a = object.previousRewardEmissionPerUnitStakedToken) !== null && _a !== void 0 ? _a : "";
        message.previousBlockEmission = (_b = object.previousBlockEmission) !== null && _b !== void 0 ? _b : "";
        message.ecosystemTokensMinted = (_c = object.ecosystemTokensMinted) !== null && _c !== void 0 ? _c : "";
        message.monthsUnlocked = (_d = object.monthsUnlocked) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../base/v1beta1/coin";
export declare const protobufPackage = "cosmos.protocolpool.v1";
/** Budget defines the fields of a budget proposal. */
export interface Budget {
    /** recipient_address is the address of the recipient who can claim the budget. */
    recipientAddress: string;
    /** total_budget is the total amount allocated for the budget. */
    totalBudget?: Coin | undefined;
    /** claimed_amount is the total amount claimed from the total budget amount requested. */
    claimedAmount?: Coin | undefined;
    /** start_time is the time when the budget becomes claimable. */
    startTime?: Date | undefined;
    /**
     * next_claim_from is the time when the budget was last successfully claimed or distributed.
     * It is used to track the next starting claim time for fund distribution. If set, it cannot be less than start_time.
     */
    nextClaimFrom?: Date | undefined;
    /** tranches is the number of times the total budget amount is to be distributed. */
    tranches: string;
    /** tranches_left is the number of tranches left for the amount to be distributed. */
    tranchesLeft: string;
    /**
     * Period is the time interval(number of seconds) at which funds distribution should be performed.
     * For example, if a period is set to 3600, it represents an action that
     * should occur every hour (3600 seconds).
     */
    period?: Duration | undefined;
}
/** ContinuousFund defines the fields of continuous fund proposal. */
export interface ContinuousFund {
    /** Recipient address of the account receiving funds. */
    recipient: string;
    /** Percentage is the percentage of funds to be allocated from Community pool. */
    percentage: string;
    /** Optional, if expiry is set, removes the state object when expired. */
    expiry?: Date | undefined;
}
export declare const Budget: MessageFns<Budget>;
export declare const ContinuousFund: MessageFns<ContinuousFund>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=types.d.ts.map
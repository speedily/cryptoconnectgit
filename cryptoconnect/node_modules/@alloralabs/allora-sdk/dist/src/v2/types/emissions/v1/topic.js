"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v1/topic.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestampedActorNonce = exports.TopicList = exports.Topic = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const nonce_1 = require("./nonce");
exports.protobufPackage = "emissions.v1";
function createBaseTopic() {
    return {
        id: "0",
        creator: "",
        metadata: "",
        lossLogic: "",
        lossMethod: "",
        inferenceLogic: "",
        inferenceMethod: "",
        epochLastEnded: "0",
        epochLength: "0",
        groundTruthLag: "0",
        defaultArg: "",
        pNorm: "",
        alphaRegret: "",
        allowNegative: false,
    };
}
exports.Topic = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.creator !== "") {
            writer.uint32(18).string(message.creator);
        }
        if (message.metadata !== "") {
            writer.uint32(26).string(message.metadata);
        }
        if (message.lossLogic !== "") {
            writer.uint32(34).string(message.lossLogic);
        }
        if (message.lossMethod !== "") {
            writer.uint32(42).string(message.lossMethod);
        }
        if (message.inferenceLogic !== "") {
            writer.uint32(50).string(message.inferenceLogic);
        }
        if (message.inferenceMethod !== "") {
            writer.uint32(58).string(message.inferenceMethod);
        }
        if (message.epochLastEnded !== "0") {
            writer.uint32(64).int64(message.epochLastEnded);
        }
        if (message.epochLength !== "0") {
            writer.uint32(72).int64(message.epochLength);
        }
        if (message.groundTruthLag !== "0") {
            writer.uint32(80).int64(message.groundTruthLag);
        }
        if (message.defaultArg !== "") {
            writer.uint32(90).string(message.defaultArg);
        }
        if (message.pNorm !== "") {
            writer.uint32(98).string(message.pNorm);
        }
        if (message.alphaRegret !== "") {
            writer.uint32(106).string(message.alphaRegret);
        }
        if (message.allowNegative !== false) {
            writer.uint32(112).bool(message.allowNegative);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.lossLogic = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lossMethod = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.inferenceLogic = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.inferenceMethod = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.epochLastEnded = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.epochLength = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.groundTruthLag = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.defaultArg = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.pNorm = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.alphaRegret = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.allowNegative = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            lossLogic: isSet(object.lossLogic) ? globalThis.String(object.lossLogic) : "",
            lossMethod: isSet(object.lossMethod) ? globalThis.String(object.lossMethod) : "",
            inferenceLogic: isSet(object.inferenceLogic) ? globalThis.String(object.inferenceLogic) : "",
            inferenceMethod: isSet(object.inferenceMethod) ? globalThis.String(object.inferenceMethod) : "",
            epochLastEnded: isSet(object.epochLastEnded) ? globalThis.String(object.epochLastEnded) : "0",
            epochLength: isSet(object.epochLength) ? globalThis.String(object.epochLength) : "0",
            groundTruthLag: isSet(object.groundTruthLag) ? globalThis.String(object.groundTruthLag) : "0",
            defaultArg: isSet(object.defaultArg) ? globalThis.String(object.defaultArg) : "",
            pNorm: isSet(object.pNorm) ? globalThis.String(object.pNorm) : "",
            alphaRegret: isSet(object.alphaRegret) ? globalThis.String(object.alphaRegret) : "",
            allowNegative: isSet(object.allowNegative) ? globalThis.Boolean(object.allowNegative) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.lossLogic !== "") {
            obj.lossLogic = message.lossLogic;
        }
        if (message.lossMethod !== "") {
            obj.lossMethod = message.lossMethod;
        }
        if (message.inferenceLogic !== "") {
            obj.inferenceLogic = message.inferenceLogic;
        }
        if (message.inferenceMethod !== "") {
            obj.inferenceMethod = message.inferenceMethod;
        }
        if (message.epochLastEnded !== "0") {
            obj.epochLastEnded = message.epochLastEnded;
        }
        if (message.epochLength !== "0") {
            obj.epochLength = message.epochLength;
        }
        if (message.groundTruthLag !== "0") {
            obj.groundTruthLag = message.groundTruthLag;
        }
        if (message.defaultArg !== "") {
            obj.defaultArg = message.defaultArg;
        }
        if (message.pNorm !== "") {
            obj.pNorm = message.pNorm;
        }
        if (message.alphaRegret !== "") {
            obj.alphaRegret = message.alphaRegret;
        }
        if (message.allowNegative !== false) {
            obj.allowNegative = message.allowNegative;
        }
        return obj;
    },
    create(base) {
        return exports.Topic.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseTopic();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "0";
        message.creator = (_b = object.creator) !== null && _b !== void 0 ? _b : "";
        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : "";
        message.lossLogic = (_d = object.lossLogic) !== null && _d !== void 0 ? _d : "";
        message.lossMethod = (_e = object.lossMethod) !== null && _e !== void 0 ? _e : "";
        message.inferenceLogic = (_f = object.inferenceLogic) !== null && _f !== void 0 ? _f : "";
        message.inferenceMethod = (_g = object.inferenceMethod) !== null && _g !== void 0 ? _g : "";
        message.epochLastEnded = (_h = object.epochLastEnded) !== null && _h !== void 0 ? _h : "0";
        message.epochLength = (_j = object.epochLength) !== null && _j !== void 0 ? _j : "0";
        message.groundTruthLag = (_k = object.groundTruthLag) !== null && _k !== void 0 ? _k : "0";
        message.defaultArg = (_l = object.defaultArg) !== null && _l !== void 0 ? _l : "";
        message.pNorm = (_m = object.pNorm) !== null && _m !== void 0 ? _m : "";
        message.alphaRegret = (_o = object.alphaRegret) !== null && _o !== void 0 ? _o : "";
        message.allowNegative = (_p = object.allowNegative) !== null && _p !== void 0 ? _p : false;
        return message;
    },
};
function createBaseTopicList() {
    return { topics: [] };
}
exports.TopicList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.topics) {
            exports.Topic.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topics.push(exports.Topic.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => exports.Topic.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => exports.Topic.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TopicList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicList();
        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Topic.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTimestampedActorNonce() {
    return { blockHeight: "0", actor: "", nonce: undefined };
}
exports.TimestampedActorNonce = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.actor !== "") {
            writer.uint32(18).string(message.actor);
        }
        if (message.nonce !== undefined) {
            nonce_1.Nonce.encode(message.nonce, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestampedActorNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actor = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nonce = nonce_1.Nonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
            nonce: isSet(object.nonce) ? nonce_1.Nonce.fromJSON(object.nonce) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.actor !== "") {
            obj.actor = message.actor;
        }
        if (message.nonce !== undefined) {
            obj.nonce = nonce_1.Nonce.toJSON(message.nonce);
        }
        return obj;
    },
    create(base) {
        return exports.TimestampedActorNonce.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTimestampedActorNonce();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.actor = (_b = object.actor) !== null && _b !== void 0 ? _b : "";
        message.nonce = (object.nonce !== undefined && object.nonce !== null) ? nonce_1.Nonce.fromPartial(object.nonce) : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

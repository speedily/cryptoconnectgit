"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/protocolpool/v1/types.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContinuousFund = exports.Budget = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const coin_1 = require("../../base/v1beta1/coin");
exports.protobufPackage = "cosmos.protocolpool.v1";
function createBaseBudget() {
    return {
        recipientAddress: "",
        totalBudget: undefined,
        claimedAmount: undefined,
        startTime: undefined,
        nextClaimFrom: undefined,
        tranches: "0",
        tranchesLeft: "0",
        period: undefined,
    };
}
exports.Budget = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.recipientAddress !== "") {
            writer.uint32(10).string(message.recipientAddress);
        }
        if (message.totalBudget !== undefined) {
            coin_1.Coin.encode(message.totalBudget, writer.uint32(18).fork()).join();
        }
        if (message.claimedAmount !== undefined) {
            coin_1.Coin.encode(message.claimedAmount, writer.uint32(26).fork()).join();
        }
        if (message.startTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
        }
        if (message.nextClaimFrom !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.nextClaimFrom), writer.uint32(42).fork()).join();
        }
        if (message.tranches !== "0") {
            writer.uint32(48).uint64(message.tranches);
        }
        if (message.tranchesLeft !== "0") {
            writer.uint32(56).uint64(message.tranchesLeft);
        }
        if (message.period !== undefined) {
            duration_1.Duration.encode(message.period, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBudget();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.recipientAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.totalBudget = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.claimedAmount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.nextClaimFrom = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.tranches = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.tranchesLeft = reader.uint64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.period = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "",
            totalBudget: isSet(object.totalBudget) ? coin_1.Coin.fromJSON(object.totalBudget) : undefined,
            claimedAmount: isSet(object.claimedAmount) ? coin_1.Coin.fromJSON(object.claimedAmount) : undefined,
            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
            nextClaimFrom: isSet(object.nextClaimFrom) ? fromJsonTimestamp(object.nextClaimFrom) : undefined,
            tranches: isSet(object.tranches) ? globalThis.String(object.tranches) : "0",
            tranchesLeft: isSet(object.tranchesLeft) ? globalThis.String(object.tranchesLeft) : "0",
            period: isSet(object.period) ? duration_1.Duration.fromJSON(object.period) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.recipientAddress !== "") {
            obj.recipientAddress = message.recipientAddress;
        }
        if (message.totalBudget !== undefined) {
            obj.totalBudget = coin_1.Coin.toJSON(message.totalBudget);
        }
        if (message.claimedAmount !== undefined) {
            obj.claimedAmount = coin_1.Coin.toJSON(message.claimedAmount);
        }
        if (message.startTime !== undefined) {
            obj.startTime = message.startTime.toISOString();
        }
        if (message.nextClaimFrom !== undefined) {
            obj.nextClaimFrom = message.nextClaimFrom.toISOString();
        }
        if (message.tranches !== "0") {
            obj.tranches = message.tranches;
        }
        if (message.tranchesLeft !== "0") {
            obj.tranchesLeft = message.tranchesLeft;
        }
        if (message.period !== undefined) {
            obj.period = duration_1.Duration.toJSON(message.period);
        }
        return obj;
    },
    create(base) {
        return exports.Budget.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseBudget();
        message.recipientAddress = (_a = object.recipientAddress) !== null && _a !== void 0 ? _a : "";
        message.totalBudget = (object.totalBudget !== undefined && object.totalBudget !== null)
            ? coin_1.Coin.fromPartial(object.totalBudget)
            : undefined;
        message.claimedAmount = (object.claimedAmount !== undefined && object.claimedAmount !== null)
            ? coin_1.Coin.fromPartial(object.claimedAmount)
            : undefined;
        message.startTime = (_b = object.startTime) !== null && _b !== void 0 ? _b : undefined;
        message.nextClaimFrom = (_c = object.nextClaimFrom) !== null && _c !== void 0 ? _c : undefined;
        message.tranches = (_d = object.tranches) !== null && _d !== void 0 ? _d : "0";
        message.tranchesLeft = (_e = object.tranchesLeft) !== null && _e !== void 0 ? _e : "0";
        message.period = (object.period !== undefined && object.period !== null)
            ? duration_1.Duration.fromPartial(object.period)
            : undefined;
        return message;
    },
};
function createBaseContinuousFund() {
    return { recipient: "", percentage: "", expiry: undefined };
}
exports.ContinuousFund = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.recipient !== "") {
            writer.uint32(10).string(message.recipient);
        }
        if (message.percentage !== "") {
            writer.uint32(18).string(message.percentage);
        }
        if (message.expiry !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expiry), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContinuousFund();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.percentage = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.expiry = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
            percentage: isSet(object.percentage) ? globalThis.String(object.percentage) : "",
            expiry: isSet(object.expiry) ? fromJsonTimestamp(object.expiry) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        if (message.percentage !== "") {
            obj.percentage = message.percentage;
        }
        if (message.expiry !== undefined) {
            obj.expiry = message.expiry.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.ContinuousFund.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseContinuousFund();
        message.recipient = (_a = object.recipient) !== null && _a !== void 0 ? _a : "";
        message.percentage = (_b = object.percentage) !== null && _b !== void 0 ? _b : "";
        message.expiry = (_c = object.expiry) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
import { Coin } from "../../base/v1beta1/coin";
import { TxRaw } from "../../tx/v1beta1/tx";
export declare const protobufPackage = "cosmos.accounts.v1";
/** MsgInit defines the Create request type for the Msg/Create RPC method. */
export interface MsgInit {
    /** sender is the address of the sender of this message. */
    sender: string;
    /** account_type is the type of the account to be created. */
    accountType: string;
    /** message is the message to be sent to the account. */
    message?: Any | undefined;
    /**
     * funds contains the coins that the account wants to
     * send alongside the request.
     */
    funds: Coin[];
}
/** MsgInitResponse defines the Create response type for the Msg/Create RPC method. */
export interface MsgInitResponse {
    /** account_address is the address of the newly created account. */
    accountAddress: string;
    /** response is the response returned by the account implementation. */
    response?: Any | undefined;
}
/** MsgExecute defines the Execute request type for the Msg/Execute RPC method. */
export interface MsgExecute {
    /** sender is the address of the sender of this message. */
    sender: string;
    /** target is the address of the account to be executed. */
    target: string;
    /** message is the message to be sent to the account. */
    message?: Any | undefined;
    /**
     * funds contains the coins that the account wants to
     * send alongside the request.
     */
    funds: Coin[];
}
/** MsgExecuteResponse defines the Execute response type for the Msg/Execute RPC method. */
export interface MsgExecuteResponse {
    /** response is the response returned by the account implementation. */
    response?: Any | undefined;
}
/** MsgExecuteBundle defines the ExecuteBundle request type for the Msg/ExecuteBundle RPC method. */
export interface MsgExecuteBundle {
    /**
     * bundler defines the entity going through the standard TX flow
     * to execute one or multiple UserOperations on behalf of others.
     */
    bundler: string;
    /** txs defines the txs to execute on behalf of other users. */
    txs: TxRaw[];
}
/** BundledTxResponse defines the response of a bundled tx. */
export interface BundledTxResponse {
    execResponses?: Any | undefined;
    error: string;
}
/** MsgExecuteBundleResponse defines the ExecuteBundle response type for the Msg/ExecuteBundle RPC method. */
export interface MsgExecuteBundleResponse {
    /** responses is the list of responses returned by the account implementations. */
    responses: BundledTxResponse[];
}
export declare const MsgInit: MessageFns<MsgInit>;
export declare const MsgInitResponse: MessageFns<MsgInitResponse>;
export declare const MsgExecute: MessageFns<MsgExecute>;
export declare const MsgExecuteResponse: MessageFns<MsgExecuteResponse>;
export declare const MsgExecuteBundle: MessageFns<MsgExecuteBundle>;
export declare const BundledTxResponse: MessageFns<BundledTxResponse>;
export declare const MsgExecuteBundleResponse: MessageFns<MsgExecuteBundleResponse>;
/** Msg defines the Msg service for the x/accounts module. */
export interface Msg {
    /** Init creates a new account in the chain. */
    Init(request: MsgInit): Promise<MsgInitResponse>;
    /** Execute executes a message to the target account. */
    Execute(request: MsgExecute): Promise<MsgExecuteResponse>;
    /**
     * ExecuteBundle pertains account abstraction, it is used by the bundler
     * to execute multiple UserOperations in a single transaction message.
     */
    ExecuteBundle(request: MsgExecuteBundle): Promise<MsgExecuteBundleResponse>;
}
export declare const MsgServiceName = "cosmos.accounts.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Init(request: MsgInit): Promise<MsgInitResponse>;
    Execute(request: MsgExecute): Promise<MsgExecuteResponse>;
    ExecuteBundle(request: MsgExecuteBundle): Promise<MsgExecuteBundleResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=tx.d.ts.map
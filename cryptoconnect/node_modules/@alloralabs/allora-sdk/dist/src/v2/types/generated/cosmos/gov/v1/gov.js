"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/gov/v1/gov.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageBasedParams = exports.Params = exports.TallyParams = exports.VotingParams = exports.DepositParams = exports.Vote = exports.TallyResult = exports.ProposalVoteOptions = exports.Proposal = exports.Deposit = exports.WeightedVoteOption = exports.ProposalStatus = exports.VoteOption = exports.ProposalType = exports.protobufPackage = void 0;
exports.proposalTypeFromJSON = proposalTypeFromJSON;
exports.proposalTypeToJSON = proposalTypeToJSON;
exports.voteOptionFromJSON = voteOptionFromJSON;
exports.voteOptionToJSON = voteOptionToJSON;
exports.proposalStatusFromJSON = proposalStatusFromJSON;
exports.proposalStatusToJSON = proposalStatusToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const any_1 = require("../../../google/protobuf/any");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const coin_1 = require("../../base/v1beta1/coin");
exports.protobufPackage = "cosmos.gov.v1";
/** Since: cosmos-sdk 0.46 */
/**
 * ProposalType enumerates the valid proposal types.
 * All proposal types are v1.Proposal which have different voting periods or tallying logic.
 */
var ProposalType;
(function (ProposalType) {
    /** PROPOSAL_TYPE_UNSPECIFIED - PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD. */
    ProposalType[ProposalType["PROPOSAL_TYPE_UNSPECIFIED"] = 0] = "PROPOSAL_TYPE_UNSPECIFIED";
    /** PROPOSAL_TYPE_STANDARD - PROPOSAL_TYPE_STANDARD defines the type for a standard proposal. */
    ProposalType[ProposalType["PROPOSAL_TYPE_STANDARD"] = 1] = "PROPOSAL_TYPE_STANDARD";
    /** PROPOSAL_TYPE_MULTIPLE_CHOICE - PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal. */
    ProposalType[ProposalType["PROPOSAL_TYPE_MULTIPLE_CHOICE"] = 2] = "PROPOSAL_TYPE_MULTIPLE_CHOICE";
    /** PROPOSAL_TYPE_OPTIMISTIC - PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal. */
    ProposalType[ProposalType["PROPOSAL_TYPE_OPTIMISTIC"] = 3] = "PROPOSAL_TYPE_OPTIMISTIC";
    /** PROPOSAL_TYPE_EXPEDITED - PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal. */
    ProposalType[ProposalType["PROPOSAL_TYPE_EXPEDITED"] = 4] = "PROPOSAL_TYPE_EXPEDITED";
    ProposalType[ProposalType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ProposalType || (exports.ProposalType = ProposalType = {}));
function proposalTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PROPOSAL_TYPE_UNSPECIFIED":
            return ProposalType.PROPOSAL_TYPE_UNSPECIFIED;
        case 1:
        case "PROPOSAL_TYPE_STANDARD":
            return ProposalType.PROPOSAL_TYPE_STANDARD;
        case 2:
        case "PROPOSAL_TYPE_MULTIPLE_CHOICE":
            return ProposalType.PROPOSAL_TYPE_MULTIPLE_CHOICE;
        case 3:
        case "PROPOSAL_TYPE_OPTIMISTIC":
            return ProposalType.PROPOSAL_TYPE_OPTIMISTIC;
        case 4:
        case "PROPOSAL_TYPE_EXPEDITED":
            return ProposalType.PROPOSAL_TYPE_EXPEDITED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ProposalType.UNRECOGNIZED;
    }
}
function proposalTypeToJSON(object) {
    switch (object) {
        case ProposalType.PROPOSAL_TYPE_UNSPECIFIED:
            return "PROPOSAL_TYPE_UNSPECIFIED";
        case ProposalType.PROPOSAL_TYPE_STANDARD:
            return "PROPOSAL_TYPE_STANDARD";
        case ProposalType.PROPOSAL_TYPE_MULTIPLE_CHOICE:
            return "PROPOSAL_TYPE_MULTIPLE_CHOICE";
        case ProposalType.PROPOSAL_TYPE_OPTIMISTIC:
            return "PROPOSAL_TYPE_OPTIMISTIC";
        case ProposalType.PROPOSAL_TYPE_EXPEDITED:
            return "PROPOSAL_TYPE_EXPEDITED";
        case ProposalType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
/** VoteOption enumerates the valid vote options for a given governance proposal. */
var VoteOption;
(function (VoteOption) {
    /** VOTE_OPTION_UNSPECIFIED - VOTE_OPTION_UNSPECIFIED defines a no-op vote option. */
    VoteOption[VoteOption["VOTE_OPTION_UNSPECIFIED"] = 0] = "VOTE_OPTION_UNSPECIFIED";
    /** VOTE_OPTION_ONE - VOTE_OPTION_ONE defines the first proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_ONE"] = 1] = "VOTE_OPTION_ONE";
    /** VOTE_OPTION_YES - VOTE_OPTION_YES defines the yes proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_YES"] = 1] = "VOTE_OPTION_YES";
    /** VOTE_OPTION_TWO - VOTE_OPTION_TWO defines the second proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_TWO"] = 2] = "VOTE_OPTION_TWO";
    /** VOTE_OPTION_ABSTAIN - VOTE_OPTION_ABSTAIN defines the abstain proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_ABSTAIN"] = 2] = "VOTE_OPTION_ABSTAIN";
    /** VOTE_OPTION_THREE - VOTE_OPTION_THREE defines the third proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_THREE"] = 3] = "VOTE_OPTION_THREE";
    /** VOTE_OPTION_NO - VOTE_OPTION_NO defines the no proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_NO"] = 3] = "VOTE_OPTION_NO";
    /** VOTE_OPTION_FOUR - VOTE_OPTION_FOUR defines the fourth proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_FOUR"] = 4] = "VOTE_OPTION_FOUR";
    /** VOTE_OPTION_NO_WITH_VETO - VOTE_OPTION_NO_WITH_VETO defines the no with veto proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_NO_WITH_VETO"] = 4] = "VOTE_OPTION_NO_WITH_VETO";
    /** VOTE_OPTION_SPAM - VOTE_OPTION_SPAM defines the spam proposal vote option. */
    VoteOption[VoteOption["VOTE_OPTION_SPAM"] = 5] = "VOTE_OPTION_SPAM";
    VoteOption[VoteOption["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VoteOption || (exports.VoteOption = VoteOption = {}));
function voteOptionFromJSON(object) {
    switch (object) {
        case 0:
        case "VOTE_OPTION_UNSPECIFIED":
            return VoteOption.VOTE_OPTION_UNSPECIFIED;
        case 1:
        case "VOTE_OPTION_ONE":
            return VoteOption.VOTE_OPTION_ONE;
        case 1:
        case "VOTE_OPTION_YES":
            return VoteOption.VOTE_OPTION_YES;
        case 2:
        case "VOTE_OPTION_TWO":
            return VoteOption.VOTE_OPTION_TWO;
        case 2:
        case "VOTE_OPTION_ABSTAIN":
            return VoteOption.VOTE_OPTION_ABSTAIN;
        case 3:
        case "VOTE_OPTION_THREE":
            return VoteOption.VOTE_OPTION_THREE;
        case 3:
        case "VOTE_OPTION_NO":
            return VoteOption.VOTE_OPTION_NO;
        case 4:
        case "VOTE_OPTION_FOUR":
            return VoteOption.VOTE_OPTION_FOUR;
        case 4:
        case "VOTE_OPTION_NO_WITH_VETO":
            return VoteOption.VOTE_OPTION_NO_WITH_VETO;
        case 5:
        case "VOTE_OPTION_SPAM":
            return VoteOption.VOTE_OPTION_SPAM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VoteOption.UNRECOGNIZED;
    }
}
function voteOptionToJSON(object) {
    switch (object) {
        case VoteOption.VOTE_OPTION_UNSPECIFIED:
            return "VOTE_OPTION_UNSPECIFIED";
        case VoteOption.VOTE_OPTION_ONE:
            return "VOTE_OPTION_ONE";
        case VoteOption.VOTE_OPTION_YES:
            return "VOTE_OPTION_YES";
        case VoteOption.VOTE_OPTION_TWO:
            return "VOTE_OPTION_TWO";
        case VoteOption.VOTE_OPTION_ABSTAIN:
            return "VOTE_OPTION_ABSTAIN";
        case VoteOption.VOTE_OPTION_THREE:
            return "VOTE_OPTION_THREE";
        case VoteOption.VOTE_OPTION_NO:
            return "VOTE_OPTION_NO";
        case VoteOption.VOTE_OPTION_FOUR:
            return "VOTE_OPTION_FOUR";
        case VoteOption.VOTE_OPTION_NO_WITH_VETO:
            return "VOTE_OPTION_NO_WITH_VETO";
        case VoteOption.VOTE_OPTION_SPAM:
            return "VOTE_OPTION_SPAM";
        case VoteOption.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
/** ProposalStatus enumerates the valid statuses of a proposal. */
var ProposalStatus;
(function (ProposalStatus) {
    /** PROPOSAL_STATUS_UNSPECIFIED - PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status. */
    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_UNSPECIFIED"] = 0] = "PROPOSAL_STATUS_UNSPECIFIED";
    /**
     * PROPOSAL_STATUS_DEPOSIT_PERIOD - PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
     * period.
     */
    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_DEPOSIT_PERIOD"] = 1] = "PROPOSAL_STATUS_DEPOSIT_PERIOD";
    /**
     * PROPOSAL_STATUS_VOTING_PERIOD - PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
     * period.
     */
    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_VOTING_PERIOD"] = 2] = "PROPOSAL_STATUS_VOTING_PERIOD";
    /**
     * PROPOSAL_STATUS_PASSED - PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
     * passed.
     */
    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_PASSED"] = 3] = "PROPOSAL_STATUS_PASSED";
    /**
     * PROPOSAL_STATUS_REJECTED - PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
     * been rejected.
     */
    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_REJECTED"] = 4] = "PROPOSAL_STATUS_REJECTED";
    /**
     * PROPOSAL_STATUS_FAILED - PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
     * failed.
     */
    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_FAILED"] = 5] = "PROPOSAL_STATUS_FAILED";
    ProposalStatus[ProposalStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ProposalStatus || (exports.ProposalStatus = ProposalStatus = {}));
function proposalStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "PROPOSAL_STATUS_UNSPECIFIED":
            return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;
        case 1:
        case "PROPOSAL_STATUS_DEPOSIT_PERIOD":
            return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;
        case 2:
        case "PROPOSAL_STATUS_VOTING_PERIOD":
            return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;
        case 3:
        case "PROPOSAL_STATUS_PASSED":
            return ProposalStatus.PROPOSAL_STATUS_PASSED;
        case 4:
        case "PROPOSAL_STATUS_REJECTED":
            return ProposalStatus.PROPOSAL_STATUS_REJECTED;
        case 5:
        case "PROPOSAL_STATUS_FAILED":
            return ProposalStatus.PROPOSAL_STATUS_FAILED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ProposalStatus.UNRECOGNIZED;
    }
}
function proposalStatusToJSON(object) {
    switch (object) {
        case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:
            return "PROPOSAL_STATUS_UNSPECIFIED";
        case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:
            return "PROPOSAL_STATUS_DEPOSIT_PERIOD";
        case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:
            return "PROPOSAL_STATUS_VOTING_PERIOD";
        case ProposalStatus.PROPOSAL_STATUS_PASSED:
            return "PROPOSAL_STATUS_PASSED";
        case ProposalStatus.PROPOSAL_STATUS_REJECTED:
            return "PROPOSAL_STATUS_REJECTED";
        case ProposalStatus.PROPOSAL_STATUS_FAILED:
            return "PROPOSAL_STATUS_FAILED";
        case ProposalStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseWeightedVoteOption() {
    return { option: 0, weight: "" };
}
exports.WeightedVoteOption = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.option !== 0) {
            writer.uint32(8).int32(message.option);
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWeightedVoteOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.option = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            option: isSet(object.option) ? voteOptionFromJSON(object.option) : 0,
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.option !== 0) {
            obj.option = voteOptionToJSON(message.option);
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        return obj;
    },
    create(base) {
        return exports.WeightedVoteOption.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWeightedVoteOption();
        message.option = (_a = object.option) !== null && _a !== void 0 ? _a : 0;
        message.weight = (_b = object.weight) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDeposit() {
    return { proposalId: "0", depositor: "", amount: [] };
}
exports.Deposit = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.proposalId !== "0") {
            writer.uint32(8).uint64(message.proposalId);
        }
        if (message.depositor !== "") {
            writer.uint32(18).string(message.depositor);
        }
        for (const v of message.amount) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.proposalId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.depositor = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            proposalId: isSet(object.proposalId) ? globalThis.String(object.proposalId) : "0",
            depositor: isSet(object.depositor) ? globalThis.String(object.depositor) : "",
            amount: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.proposalId !== "0") {
            obj.proposalId = message.proposalId;
        }
        if (message.depositor !== "") {
            obj.depositor = message.depositor;
        }
        if ((_a = message.amount) === null || _a === void 0 ? void 0 : _a.length) {
            obj.amount = message.amount.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Deposit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDeposit();
        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : "0";
        message.depositor = (_b = object.depositor) !== null && _b !== void 0 ? _b : "";
        message.amount = ((_c = object.amount) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseProposal() {
    return {
        id: "0",
        messages: [],
        status: 0,
        finalTallyResult: undefined,
        submitTime: undefined,
        depositEndTime: undefined,
        totalDeposit: [],
        votingStartTime: undefined,
        votingEndTime: undefined,
        metadata: "",
        title: "",
        summary: "",
        proposer: "",
        expedited: false,
        failedReason: "",
        proposalType: 0,
    };
}
exports.Proposal = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        for (const v of message.messages) {
            any_1.Any.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        if (message.finalTallyResult !== undefined) {
            exports.TallyResult.encode(message.finalTallyResult, writer.uint32(34).fork()).join();
        }
        if (message.submitTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(42).fork()).join();
        }
        if (message.depositEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.depositEndTime), writer.uint32(50).fork()).join();
        }
        for (const v of message.totalDeposit) {
            coin_1.Coin.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.votingStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(66).fork()).join();
        }
        if (message.votingEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(74).fork()).join();
        }
        if (message.metadata !== "") {
            writer.uint32(82).string(message.metadata);
        }
        if (message.title !== "") {
            writer.uint32(90).string(message.title);
        }
        if (message.summary !== "") {
            writer.uint32(98).string(message.summary);
        }
        if (message.proposer !== "") {
            writer.uint32(106).string(message.proposer);
        }
        if (message.expedited !== false) {
            writer.uint32(112).bool(message.expedited);
        }
        if (message.failedReason !== "") {
            writer.uint32(122).string(message.failedReason);
        }
        if (message.proposalType !== 0) {
            writer.uint32(128).int32(message.proposalType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.messages.push(any_1.Any.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.finalTallyResult = exports.TallyResult.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.submitTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.depositEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.totalDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.votingStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.votingEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.summary = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.proposer = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.expedited = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.failedReason = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.proposalType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            messages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.messages) ? object.messages.map((e) => any_1.Any.fromJSON(e)) : [],
            status: isSet(object.status) ? proposalStatusFromJSON(object.status) : 0,
            finalTallyResult: isSet(object.finalTallyResult) ? exports.TallyResult.fromJSON(object.finalTallyResult) : undefined,
            submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
            depositEndTime: isSet(object.depositEndTime) ? fromJsonTimestamp(object.depositEndTime) : undefined,
            totalDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.totalDeposit)
                ? object.totalDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            votingStartTime: isSet(object.votingStartTime) ? fromJsonTimestamp(object.votingStartTime) : undefined,
            votingEndTime: isSet(object.votingEndTime) ? fromJsonTimestamp(object.votingEndTime) : undefined,
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
            proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
            expedited: isSet(object.expedited) ? globalThis.Boolean(object.expedited) : false,
            failedReason: isSet(object.failedReason) ? globalThis.String(object.failedReason) : "",
            proposalType: isSet(object.proposalType) ? proposalTypeFromJSON(object.proposalType) : 0,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if ((_a = message.messages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.messages = message.messages.map((e) => any_1.Any.toJSON(e));
        }
        if (message.status !== 0) {
            obj.status = proposalStatusToJSON(message.status);
        }
        if (message.finalTallyResult !== undefined) {
            obj.finalTallyResult = exports.TallyResult.toJSON(message.finalTallyResult);
        }
        if (message.submitTime !== undefined) {
            obj.submitTime = message.submitTime.toISOString();
        }
        if (message.depositEndTime !== undefined) {
            obj.depositEndTime = message.depositEndTime.toISOString();
        }
        if ((_b = message.totalDeposit) === null || _b === void 0 ? void 0 : _b.length) {
            obj.totalDeposit = message.totalDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.votingStartTime !== undefined) {
            obj.votingStartTime = message.votingStartTime.toISOString();
        }
        if (message.votingEndTime !== undefined) {
            obj.votingEndTime = message.votingEndTime.toISOString();
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.summary !== "") {
            obj.summary = message.summary;
        }
        if (message.proposer !== "") {
            obj.proposer = message.proposer;
        }
        if (message.expedited !== false) {
            obj.expedited = message.expedited;
        }
        if (message.failedReason !== "") {
            obj.failedReason = message.failedReason;
        }
        if (message.proposalType !== 0) {
            obj.proposalType = proposalTypeToJSON(message.proposalType);
        }
        return obj;
    },
    create(base) {
        return exports.Proposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseProposal();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "0";
        message.messages = ((_b = object.messages) === null || _b === void 0 ? void 0 : _b.map((e) => any_1.Any.fromPartial(e))) || [];
        message.status = (_c = object.status) !== null && _c !== void 0 ? _c : 0;
        message.finalTallyResult = (object.finalTallyResult !== undefined && object.finalTallyResult !== null)
            ? exports.TallyResult.fromPartial(object.finalTallyResult)
            : undefined;
        message.submitTime = (_d = object.submitTime) !== null && _d !== void 0 ? _d : undefined;
        message.depositEndTime = (_e = object.depositEndTime) !== null && _e !== void 0 ? _e : undefined;
        message.totalDeposit = ((_f = object.totalDeposit) === null || _f === void 0 ? void 0 : _f.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.votingStartTime = (_g = object.votingStartTime) !== null && _g !== void 0 ? _g : undefined;
        message.votingEndTime = (_h = object.votingEndTime) !== null && _h !== void 0 ? _h : undefined;
        message.metadata = (_j = object.metadata) !== null && _j !== void 0 ? _j : "";
        message.title = (_k = object.title) !== null && _k !== void 0 ? _k : "";
        message.summary = (_l = object.summary) !== null && _l !== void 0 ? _l : "";
        message.proposer = (_m = object.proposer) !== null && _m !== void 0 ? _m : "";
        message.expedited = (_o = object.expedited) !== null && _o !== void 0 ? _o : false;
        message.failedReason = (_p = object.failedReason) !== null && _p !== void 0 ? _p : "";
        message.proposalType = (_q = object.proposalType) !== null && _q !== void 0 ? _q : 0;
        return message;
    },
};
function createBaseProposalVoteOptions() {
    return { optionOne: "", optionTwo: "", optionThree: "", optionFour: "", optionSpam: "" };
}
exports.ProposalVoteOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.optionOne !== "") {
            writer.uint32(10).string(message.optionOne);
        }
        if (message.optionTwo !== "") {
            writer.uint32(18).string(message.optionTwo);
        }
        if (message.optionThree !== "") {
            writer.uint32(26).string(message.optionThree);
        }
        if (message.optionFour !== "") {
            writer.uint32(34).string(message.optionFour);
        }
        if (message.optionSpam !== "") {
            writer.uint32(42).string(message.optionSpam);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposalVoteOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.optionOne = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.optionTwo = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.optionThree = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.optionFour = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.optionSpam = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            optionOne: isSet(object.optionOne) ? globalThis.String(object.optionOne) : "",
            optionTwo: isSet(object.optionTwo) ? globalThis.String(object.optionTwo) : "",
            optionThree: isSet(object.optionThree) ? globalThis.String(object.optionThree) : "",
            optionFour: isSet(object.optionFour) ? globalThis.String(object.optionFour) : "",
            optionSpam: isSet(object.optionSpam) ? globalThis.String(object.optionSpam) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.optionOne !== "") {
            obj.optionOne = message.optionOne;
        }
        if (message.optionTwo !== "") {
            obj.optionTwo = message.optionTwo;
        }
        if (message.optionThree !== "") {
            obj.optionThree = message.optionThree;
        }
        if (message.optionFour !== "") {
            obj.optionFour = message.optionFour;
        }
        if (message.optionSpam !== "") {
            obj.optionSpam = message.optionSpam;
        }
        return obj;
    },
    create(base) {
        return exports.ProposalVoteOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseProposalVoteOptions();
        message.optionOne = (_a = object.optionOne) !== null && _a !== void 0 ? _a : "";
        message.optionTwo = (_b = object.optionTwo) !== null && _b !== void 0 ? _b : "";
        message.optionThree = (_c = object.optionThree) !== null && _c !== void 0 ? _c : "";
        message.optionFour = (_d = object.optionFour) !== null && _d !== void 0 ? _d : "";
        message.optionSpam = (_e = object.optionSpam) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseTallyResult() {
    return {
        yesCount: "",
        abstainCount: "",
        noCount: "",
        noWithVetoCount: "",
        optionOneCount: "",
        optionTwoCount: "",
        optionThreeCount: "",
        optionFourCount: "",
        spamCount: "",
    };
}
exports.TallyResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.yesCount !== "") {
            writer.uint32(10).string(message.yesCount);
        }
        if (message.abstainCount !== "") {
            writer.uint32(18).string(message.abstainCount);
        }
        if (message.noCount !== "") {
            writer.uint32(26).string(message.noCount);
        }
        if (message.noWithVetoCount !== "") {
            writer.uint32(34).string(message.noWithVetoCount);
        }
        if (message.optionOneCount !== "") {
            writer.uint32(42).string(message.optionOneCount);
        }
        if (message.optionTwoCount !== "") {
            writer.uint32(50).string(message.optionTwoCount);
        }
        if (message.optionThreeCount !== "") {
            writer.uint32(58).string(message.optionThreeCount);
        }
        if (message.optionFourCount !== "") {
            writer.uint32(66).string(message.optionFourCount);
        }
        if (message.spamCount !== "") {
            writer.uint32(74).string(message.spamCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTallyResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.yesCount = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.abstainCount = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.noCount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.noWithVetoCount = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.optionOneCount = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.optionTwoCount = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.optionThreeCount = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.optionFourCount = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.spamCount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            yesCount: isSet(object.yesCount) ? globalThis.String(object.yesCount) : "",
            abstainCount: isSet(object.abstainCount) ? globalThis.String(object.abstainCount) : "",
            noCount: isSet(object.noCount) ? globalThis.String(object.noCount) : "",
            noWithVetoCount: isSet(object.noWithVetoCount) ? globalThis.String(object.noWithVetoCount) : "",
            optionOneCount: isSet(object.optionOneCount) ? globalThis.String(object.optionOneCount) : "",
            optionTwoCount: isSet(object.optionTwoCount) ? globalThis.String(object.optionTwoCount) : "",
            optionThreeCount: isSet(object.optionThreeCount) ? globalThis.String(object.optionThreeCount) : "",
            optionFourCount: isSet(object.optionFourCount) ? globalThis.String(object.optionFourCount) : "",
            spamCount: isSet(object.spamCount) ? globalThis.String(object.spamCount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.yesCount !== "") {
            obj.yesCount = message.yesCount;
        }
        if (message.abstainCount !== "") {
            obj.abstainCount = message.abstainCount;
        }
        if (message.noCount !== "") {
            obj.noCount = message.noCount;
        }
        if (message.noWithVetoCount !== "") {
            obj.noWithVetoCount = message.noWithVetoCount;
        }
        if (message.optionOneCount !== "") {
            obj.optionOneCount = message.optionOneCount;
        }
        if (message.optionTwoCount !== "") {
            obj.optionTwoCount = message.optionTwoCount;
        }
        if (message.optionThreeCount !== "") {
            obj.optionThreeCount = message.optionThreeCount;
        }
        if (message.optionFourCount !== "") {
            obj.optionFourCount = message.optionFourCount;
        }
        if (message.spamCount !== "") {
            obj.spamCount = message.spamCount;
        }
        return obj;
    },
    create(base) {
        return exports.TallyResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTallyResult();
        message.yesCount = (_a = object.yesCount) !== null && _a !== void 0 ? _a : "";
        message.abstainCount = (_b = object.abstainCount) !== null && _b !== void 0 ? _b : "";
        message.noCount = (_c = object.noCount) !== null && _c !== void 0 ? _c : "";
        message.noWithVetoCount = (_d = object.noWithVetoCount) !== null && _d !== void 0 ? _d : "";
        message.optionOneCount = (_e = object.optionOneCount) !== null && _e !== void 0 ? _e : "";
        message.optionTwoCount = (_f = object.optionTwoCount) !== null && _f !== void 0 ? _f : "";
        message.optionThreeCount = (_g = object.optionThreeCount) !== null && _g !== void 0 ? _g : "";
        message.optionFourCount = (_h = object.optionFourCount) !== null && _h !== void 0 ? _h : "";
        message.spamCount = (_j = object.spamCount) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseVote() {
    return { proposalId: "0", voter: "", options: [], metadata: "" };
}
exports.Vote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.proposalId !== "0") {
            writer.uint32(8).uint64(message.proposalId);
        }
        if (message.voter !== "") {
            writer.uint32(18).string(message.voter);
        }
        for (const v of message.options) {
            exports.WeightedVoteOption.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.metadata !== "") {
            writer.uint32(42).string(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.proposalId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.voter = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.options.push(exports.WeightedVoteOption.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            proposalId: isSet(object.proposalId) ? globalThis.String(object.proposalId) : "0",
            voter: isSet(object.voter) ? globalThis.String(object.voter) : "",
            options: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.options)
                ? object.options.map((e) => exports.WeightedVoteOption.fromJSON(e))
                : [],
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.proposalId !== "0") {
            obj.proposalId = message.proposalId;
        }
        if (message.voter !== "") {
            obj.voter = message.voter;
        }
        if ((_a = message.options) === null || _a === void 0 ? void 0 : _a.length) {
            obj.options = message.options.map((e) => exports.WeightedVoteOption.toJSON(e));
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        return obj;
    },
    create(base) {
        return exports.Vote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseVote();
        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : "0";
        message.voter = (_b = object.voter) !== null && _b !== void 0 ? _b : "";
        message.options = ((_c = object.options) === null || _c === void 0 ? void 0 : _c.map((e) => exports.WeightedVoteOption.fromPartial(e))) || [];
        message.metadata = (_d = object.metadata) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDepositParams() {
    return { minDeposit: [], maxDepositPeriod: undefined };
}
exports.DepositParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.minDeposit) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.maxDepositPeriod !== undefined) {
            duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDepositParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minDeposit)
                ? object.minDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            maxDepositPeriod: isSet(object.maxDepositPeriod) ? duration_1.Duration.fromJSON(object.maxDepositPeriod) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.minDeposit) === null || _a === void 0 ? void 0 : _a.length) {
            obj.minDeposit = message.minDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.maxDepositPeriod !== undefined) {
            obj.maxDepositPeriod = duration_1.Duration.toJSON(message.maxDepositPeriod);
        }
        return obj;
    },
    create(base) {
        return exports.DepositParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDepositParams();
        message.minDeposit = ((_a = object.minDeposit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.maxDepositPeriod = (object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null)
            ? duration_1.Duration.fromPartial(object.maxDepositPeriod)
            : undefined;
        return message;
    },
};
function createBaseVotingParams() {
    return { votingPeriod: undefined };
}
exports.VotingParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.votingPeriod !== undefined) {
            duration_1.Duration.encode(message.votingPeriod, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVotingParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { votingPeriod: isSet(object.votingPeriod) ? duration_1.Duration.fromJSON(object.votingPeriod) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.votingPeriod !== undefined) {
            obj.votingPeriod = duration_1.Duration.toJSON(message.votingPeriod);
        }
        return obj;
    },
    create(base) {
        return exports.VotingParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseVotingParams();
        message.votingPeriod = (object.votingPeriod !== undefined && object.votingPeriod !== null)
            ? duration_1.Duration.fromPartial(object.votingPeriod)
            : undefined;
        return message;
    },
};
function createBaseTallyParams() {
    return { quorum: "", threshold: "", vetoThreshold: "" };
}
exports.TallyParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.quorum !== "") {
            writer.uint32(10).string(message.quorum);
        }
        if (message.threshold !== "") {
            writer.uint32(18).string(message.threshold);
        }
        if (message.vetoThreshold !== "") {
            writer.uint32(26).string(message.vetoThreshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTallyParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.quorum = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.threshold = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.vetoThreshold = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            quorum: isSet(object.quorum) ? globalThis.String(object.quorum) : "",
            threshold: isSet(object.threshold) ? globalThis.String(object.threshold) : "",
            vetoThreshold: isSet(object.vetoThreshold) ? globalThis.String(object.vetoThreshold) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.quorum !== "") {
            obj.quorum = message.quorum;
        }
        if (message.threshold !== "") {
            obj.threshold = message.threshold;
        }
        if (message.vetoThreshold !== "") {
            obj.vetoThreshold = message.vetoThreshold;
        }
        return obj;
    },
    create(base) {
        return exports.TallyParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTallyParams();
        message.quorum = (_a = object.quorum) !== null && _a !== void 0 ? _a : "";
        message.threshold = (_b = object.threshold) !== null && _b !== void 0 ? _b : "";
        message.vetoThreshold = (_c = object.vetoThreshold) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseParams() {
    return {
        minDeposit: [],
        maxDepositPeriod: undefined,
        votingPeriod: undefined,
        quorum: "",
        threshold: "",
        vetoThreshold: "",
        minInitialDepositRatio: "",
        proposalCancelRatio: "",
        proposalCancelDest: "",
        expeditedVotingPeriod: undefined,
        expeditedThreshold: "",
        expeditedMinDeposit: [],
        burnVoteQuorum: false,
        burnProposalDepositPrevote: false,
        burnVoteVeto: false,
        minDepositRatio: "",
        proposalCancelMaxPeriod: "",
        optimisticAuthorizedAddresses: [],
        optimisticRejectedThreshold: "",
        yesQuorum: "",
    };
}
exports.Params = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.minDeposit) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.maxDepositPeriod !== undefined) {
            duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).join();
        }
        if (message.votingPeriod !== undefined) {
            duration_1.Duration.encode(message.votingPeriod, writer.uint32(26).fork()).join();
        }
        if (message.quorum !== "") {
            writer.uint32(34).string(message.quorum);
        }
        if (message.threshold !== "") {
            writer.uint32(42).string(message.threshold);
        }
        if (message.vetoThreshold !== "") {
            writer.uint32(50).string(message.vetoThreshold);
        }
        if (message.minInitialDepositRatio !== "") {
            writer.uint32(58).string(message.minInitialDepositRatio);
        }
        if (message.proposalCancelRatio !== "") {
            writer.uint32(66).string(message.proposalCancelRatio);
        }
        if (message.proposalCancelDest !== "") {
            writer.uint32(74).string(message.proposalCancelDest);
        }
        if (message.expeditedVotingPeriod !== undefined) {
            duration_1.Duration.encode(message.expeditedVotingPeriod, writer.uint32(82).fork()).join();
        }
        if (message.expeditedThreshold !== "") {
            writer.uint32(90).string(message.expeditedThreshold);
        }
        for (const v of message.expeditedMinDeposit) {
            coin_1.Coin.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.burnVoteQuorum !== false) {
            writer.uint32(104).bool(message.burnVoteQuorum);
        }
        if (message.burnProposalDepositPrevote !== false) {
            writer.uint32(112).bool(message.burnProposalDepositPrevote);
        }
        if (message.burnVoteVeto !== false) {
            writer.uint32(120).bool(message.burnVoteVeto);
        }
        if (message.minDepositRatio !== "") {
            writer.uint32(130).string(message.minDepositRatio);
        }
        if (message.proposalCancelMaxPeriod !== "") {
            writer.uint32(138).string(message.proposalCancelMaxPeriod);
        }
        for (const v of message.optimisticAuthorizedAddresses) {
            writer.uint32(146).string(v);
        }
        if (message.optimisticRejectedThreshold !== "") {
            writer.uint32(154).string(message.optimisticRejectedThreshold);
        }
        if (message.yesQuorum !== "") {
            writer.uint32(162).string(message.yesQuorum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.quorum = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.threshold = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.vetoThreshold = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.minInitialDepositRatio = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.proposalCancelRatio = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.proposalCancelDest = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.expeditedVotingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.expeditedThreshold = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.expeditedMinDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.burnVoteQuorum = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.burnProposalDepositPrevote = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.burnVoteVeto = reader.bool();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.minDepositRatio = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.proposalCancelMaxPeriod = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.optimisticAuthorizedAddresses.push(reader.string());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.optimisticRejectedThreshold = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.yesQuorum = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minDeposit)
                ? object.minDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            maxDepositPeriod: isSet(object.maxDepositPeriod) ? duration_1.Duration.fromJSON(object.maxDepositPeriod) : undefined,
            votingPeriod: isSet(object.votingPeriod) ? duration_1.Duration.fromJSON(object.votingPeriod) : undefined,
            quorum: isSet(object.quorum) ? globalThis.String(object.quorum) : "",
            threshold: isSet(object.threshold) ? globalThis.String(object.threshold) : "",
            vetoThreshold: isSet(object.vetoThreshold) ? globalThis.String(object.vetoThreshold) : "",
            minInitialDepositRatio: isSet(object.minInitialDepositRatio)
                ? globalThis.String(object.minInitialDepositRatio)
                : "",
            proposalCancelRatio: isSet(object.proposalCancelRatio) ? globalThis.String(object.proposalCancelRatio) : "",
            proposalCancelDest: isSet(object.proposalCancelDest) ? globalThis.String(object.proposalCancelDest) : "",
            expeditedVotingPeriod: isSet(object.expeditedVotingPeriod)
                ? duration_1.Duration.fromJSON(object.expeditedVotingPeriod)
                : undefined,
            expeditedThreshold: isSet(object.expeditedThreshold) ? globalThis.String(object.expeditedThreshold) : "",
            expeditedMinDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.expeditedMinDeposit)
                ? object.expeditedMinDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            burnVoteQuorum: isSet(object.burnVoteQuorum) ? globalThis.Boolean(object.burnVoteQuorum) : false,
            burnProposalDepositPrevote: isSet(object.burnProposalDepositPrevote)
                ? globalThis.Boolean(object.burnProposalDepositPrevote)
                : false,
            burnVoteVeto: isSet(object.burnVoteVeto) ? globalThis.Boolean(object.burnVoteVeto) : false,
            minDepositRatio: isSet(object.minDepositRatio) ? globalThis.String(object.minDepositRatio) : "",
            proposalCancelMaxPeriod: isSet(object.proposalCancelMaxPeriod)
                ? globalThis.String(object.proposalCancelMaxPeriod)
                : "",
            optimisticAuthorizedAddresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.optimisticAuthorizedAddresses)
                ? object.optimisticAuthorizedAddresses.map((e) => globalThis.String(e))
                : [],
            optimisticRejectedThreshold: isSet(object.optimisticRejectedThreshold)
                ? globalThis.String(object.optimisticRejectedThreshold)
                : "",
            yesQuorum: isSet(object.yesQuorum) ? globalThis.String(object.yesQuorum) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if ((_a = message.minDeposit) === null || _a === void 0 ? void 0 : _a.length) {
            obj.minDeposit = message.minDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.maxDepositPeriod !== undefined) {
            obj.maxDepositPeriod = duration_1.Duration.toJSON(message.maxDepositPeriod);
        }
        if (message.votingPeriod !== undefined) {
            obj.votingPeriod = duration_1.Duration.toJSON(message.votingPeriod);
        }
        if (message.quorum !== "") {
            obj.quorum = message.quorum;
        }
        if (message.threshold !== "") {
            obj.threshold = message.threshold;
        }
        if (message.vetoThreshold !== "") {
            obj.vetoThreshold = message.vetoThreshold;
        }
        if (message.minInitialDepositRatio !== "") {
            obj.minInitialDepositRatio = message.minInitialDepositRatio;
        }
        if (message.proposalCancelRatio !== "") {
            obj.proposalCancelRatio = message.proposalCancelRatio;
        }
        if (message.proposalCancelDest !== "") {
            obj.proposalCancelDest = message.proposalCancelDest;
        }
        if (message.expeditedVotingPeriod !== undefined) {
            obj.expeditedVotingPeriod = duration_1.Duration.toJSON(message.expeditedVotingPeriod);
        }
        if (message.expeditedThreshold !== "") {
            obj.expeditedThreshold = message.expeditedThreshold;
        }
        if ((_b = message.expeditedMinDeposit) === null || _b === void 0 ? void 0 : _b.length) {
            obj.expeditedMinDeposit = message.expeditedMinDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.burnVoteQuorum !== false) {
            obj.burnVoteQuorum = message.burnVoteQuorum;
        }
        if (message.burnProposalDepositPrevote !== false) {
            obj.burnProposalDepositPrevote = message.burnProposalDepositPrevote;
        }
        if (message.burnVoteVeto !== false) {
            obj.burnVoteVeto = message.burnVoteVeto;
        }
        if (message.minDepositRatio !== "") {
            obj.minDepositRatio = message.minDepositRatio;
        }
        if (message.proposalCancelMaxPeriod !== "") {
            obj.proposalCancelMaxPeriod = message.proposalCancelMaxPeriod;
        }
        if ((_c = message.optimisticAuthorizedAddresses) === null || _c === void 0 ? void 0 : _c.length) {
            obj.optimisticAuthorizedAddresses = message.optimisticAuthorizedAddresses;
        }
        if (message.optimisticRejectedThreshold !== "") {
            obj.optimisticRejectedThreshold = message.optimisticRejectedThreshold;
        }
        if (message.yesQuorum !== "") {
            obj.yesQuorum = message.yesQuorum;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        const message = createBaseParams();
        message.minDeposit = ((_a = object.minDeposit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.maxDepositPeriod = (object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null)
            ? duration_1.Duration.fromPartial(object.maxDepositPeriod)
            : undefined;
        message.votingPeriod = (object.votingPeriod !== undefined && object.votingPeriod !== null)
            ? duration_1.Duration.fromPartial(object.votingPeriod)
            : undefined;
        message.quorum = (_b = object.quorum) !== null && _b !== void 0 ? _b : "";
        message.threshold = (_c = object.threshold) !== null && _c !== void 0 ? _c : "";
        message.vetoThreshold = (_d = object.vetoThreshold) !== null && _d !== void 0 ? _d : "";
        message.minInitialDepositRatio = (_e = object.minInitialDepositRatio) !== null && _e !== void 0 ? _e : "";
        message.proposalCancelRatio = (_f = object.proposalCancelRatio) !== null && _f !== void 0 ? _f : "";
        message.proposalCancelDest = (_g = object.proposalCancelDest) !== null && _g !== void 0 ? _g : "";
        message.expeditedVotingPeriod =
            (object.expeditedVotingPeriod !== undefined && object.expeditedVotingPeriod !== null)
                ? duration_1.Duration.fromPartial(object.expeditedVotingPeriod)
                : undefined;
        message.expeditedThreshold = (_h = object.expeditedThreshold) !== null && _h !== void 0 ? _h : "";
        message.expeditedMinDeposit = ((_j = object.expeditedMinDeposit) === null || _j === void 0 ? void 0 : _j.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.burnVoteQuorum = (_k = object.burnVoteQuorum) !== null && _k !== void 0 ? _k : false;
        message.burnProposalDepositPrevote = (_l = object.burnProposalDepositPrevote) !== null && _l !== void 0 ? _l : false;
        message.burnVoteVeto = (_m = object.burnVoteVeto) !== null && _m !== void 0 ? _m : false;
        message.minDepositRatio = (_o = object.minDepositRatio) !== null && _o !== void 0 ? _o : "";
        message.proposalCancelMaxPeriod = (_p = object.proposalCancelMaxPeriod) !== null && _p !== void 0 ? _p : "";
        message.optimisticAuthorizedAddresses = ((_q = object.optimisticAuthorizedAddresses) === null || _q === void 0 ? void 0 : _q.map((e) => e)) || [];
        message.optimisticRejectedThreshold = (_r = object.optimisticRejectedThreshold) !== null && _r !== void 0 ? _r : "";
        message.yesQuorum = (_s = object.yesQuorum) !== null && _s !== void 0 ? _s : "";
        return message;
    },
};
function createBaseMessageBasedParams() {
    return { votingPeriod: undefined, quorum: "", yesQuorum: "", threshold: "", vetoThreshold: "" };
}
exports.MessageBasedParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.votingPeriod !== undefined) {
            duration_1.Duration.encode(message.votingPeriod, writer.uint32(10).fork()).join();
        }
        if (message.quorum !== "") {
            writer.uint32(18).string(message.quorum);
        }
        if (message.yesQuorum !== "") {
            writer.uint32(162).string(message.yesQuorum);
        }
        if (message.threshold !== "") {
            writer.uint32(26).string(message.threshold);
        }
        if (message.vetoThreshold !== "") {
            writer.uint32(34).string(message.vetoThreshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageBasedParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.quorum = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.yesQuorum = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.threshold = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.vetoThreshold = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            votingPeriod: isSet(object.votingPeriod) ? duration_1.Duration.fromJSON(object.votingPeriod) : undefined,
            quorum: isSet(object.quorum) ? globalThis.String(object.quorum) : "",
            yesQuorum: isSet(object.yesQuorum) ? globalThis.String(object.yesQuorum) : "",
            threshold: isSet(object.threshold) ? globalThis.String(object.threshold) : "",
            vetoThreshold: isSet(object.vetoThreshold) ? globalThis.String(object.vetoThreshold) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.votingPeriod !== undefined) {
            obj.votingPeriod = duration_1.Duration.toJSON(message.votingPeriod);
        }
        if (message.quorum !== "") {
            obj.quorum = message.quorum;
        }
        if (message.yesQuorum !== "") {
            obj.yesQuorum = message.yesQuorum;
        }
        if (message.threshold !== "") {
            obj.threshold = message.threshold;
        }
        if (message.vetoThreshold !== "") {
            obj.vetoThreshold = message.vetoThreshold;
        }
        return obj;
    },
    create(base) {
        return exports.MessageBasedParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMessageBasedParams();
        message.votingPeriod = (object.votingPeriod !== undefined && object.votingPeriod !== null)
            ? duration_1.Duration.fromPartial(object.votingPeriod)
            : undefined;
        message.quorum = (_a = object.quorum) !== null && _a !== void 0 ? _a : "";
        message.yesQuorum = (_b = object.yesQuorum) !== null && _b !== void 0 ? _b : "";
        message.threshold = (_c = object.threshold) !== null && _c !== void 0 ? _c : "";
        message.vetoThreshold = (_d = object.vetoThreshold) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

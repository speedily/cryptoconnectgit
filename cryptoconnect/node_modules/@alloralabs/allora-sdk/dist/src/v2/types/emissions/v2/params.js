"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/params.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "emissions.v2";
function createBaseParams() {
    return {
        version: "",
        maxSerializedMsgLength: "0",
        minTopicWeight: "",
        maxTopicsPerBlock: "0",
        requiredMinimumStake: "",
        removeStakeDelayWindow: "0",
        minEpochLength: "0",
        betaEntropy: "",
        learningRate: "",
        maxGradientThreshold: "",
        minStakeFraction: "",
        maxUnfulfilledWorkerRequests: "0",
        maxUnfulfilledReputerRequests: "0",
        topicRewardStakeImportance: "",
        topicRewardFeeRevenueImportance: "",
        topicRewardAlpha: "",
        taskRewardAlpha: "",
        validatorsVsAlloraPercentReward: "",
        maxSamplesToScaleScores: "0",
        maxTopInferersToReward: "0",
        maxTopForecastersToReward: "0",
        maxTopReputersToReward: "0",
        createTopicFee: "",
        gradientDescentMaxIters: "0",
        maxRetriesToFulfilNoncesWorker: "0",
        maxRetriesToFulfilNoncesReputer: "0",
        registrationFee: "",
        defaultPageLimit: "0",
        maxPageLimit: "0",
        minEpochLengthRecordLimit: "0",
        blocksPerMonth: "0",
        pRewardInference: "",
        pRewardForecast: "",
        pRewardReputer: "",
        cRewardInference: "",
        cRewardForecast: "",
        cNorm: "",
        topicFeeRevenueDecayRate: "",
        epsilonReputer: "",
        minEffectiveTopicRevenue: "",
        halfMaxProcessStakeRemovalsEndBlock: "0",
        epsilonSafeDiv: "",
        dataSendingFee: "",
    };
}
exports.Params = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.maxSerializedMsgLength !== "0") {
            writer.uint32(16).int64(message.maxSerializedMsgLength);
        }
        if (message.minTopicWeight !== "") {
            writer.uint32(26).string(message.minTopicWeight);
        }
        if (message.maxTopicsPerBlock !== "0") {
            writer.uint32(32).uint64(message.maxTopicsPerBlock);
        }
        if (message.requiredMinimumStake !== "") {
            writer.uint32(42).string(message.requiredMinimumStake);
        }
        if (message.removeStakeDelayWindow !== "0") {
            writer.uint32(48).int64(message.removeStakeDelayWindow);
        }
        if (message.minEpochLength !== "0") {
            writer.uint32(56).int64(message.minEpochLength);
        }
        if (message.betaEntropy !== "") {
            writer.uint32(66).string(message.betaEntropy);
        }
        if (message.learningRate !== "") {
            writer.uint32(74).string(message.learningRate);
        }
        if (message.maxGradientThreshold !== "") {
            writer.uint32(82).string(message.maxGradientThreshold);
        }
        if (message.minStakeFraction !== "") {
            writer.uint32(90).string(message.minStakeFraction);
        }
        if (message.maxUnfulfilledWorkerRequests !== "0") {
            writer.uint32(104).uint64(message.maxUnfulfilledWorkerRequests);
        }
        if (message.maxUnfulfilledReputerRequests !== "0") {
            writer.uint32(112).uint64(message.maxUnfulfilledReputerRequests);
        }
        if (message.topicRewardStakeImportance !== "") {
            writer.uint32(122).string(message.topicRewardStakeImportance);
        }
        if (message.topicRewardFeeRevenueImportance !== "") {
            writer.uint32(130).string(message.topicRewardFeeRevenueImportance);
        }
        if (message.topicRewardAlpha !== "") {
            writer.uint32(138).string(message.topicRewardAlpha);
        }
        if (message.taskRewardAlpha !== "") {
            writer.uint32(146).string(message.taskRewardAlpha);
        }
        if (message.validatorsVsAlloraPercentReward !== "") {
            writer.uint32(154).string(message.validatorsVsAlloraPercentReward);
        }
        if (message.maxSamplesToScaleScores !== "0") {
            writer.uint32(160).uint64(message.maxSamplesToScaleScores);
        }
        if (message.maxTopInferersToReward !== "0") {
            writer.uint32(168).uint64(message.maxTopInferersToReward);
        }
        if (message.maxTopForecastersToReward !== "0") {
            writer.uint32(176).uint64(message.maxTopForecastersToReward);
        }
        if (message.maxTopReputersToReward !== "0") {
            writer.uint32(184).uint64(message.maxTopReputersToReward);
        }
        if (message.createTopicFee !== "") {
            writer.uint32(194).string(message.createTopicFee);
        }
        if (message.gradientDescentMaxIters !== "0") {
            writer.uint32(200).uint64(message.gradientDescentMaxIters);
        }
        if (message.maxRetriesToFulfilNoncesWorker !== "0") {
            writer.uint32(208).int64(message.maxRetriesToFulfilNoncesWorker);
        }
        if (message.maxRetriesToFulfilNoncesReputer !== "0") {
            writer.uint32(216).int64(message.maxRetriesToFulfilNoncesReputer);
        }
        if (message.registrationFee !== "") {
            writer.uint32(226).string(message.registrationFee);
        }
        if (message.defaultPageLimit !== "0") {
            writer.uint32(232).uint64(message.defaultPageLimit);
        }
        if (message.maxPageLimit !== "0") {
            writer.uint32(240).uint64(message.maxPageLimit);
        }
        if (message.minEpochLengthRecordLimit !== "0") {
            writer.uint32(248).int64(message.minEpochLengthRecordLimit);
        }
        if (message.blocksPerMonth !== "0") {
            writer.uint32(256).uint64(message.blocksPerMonth);
        }
        if (message.pRewardInference !== "") {
            writer.uint32(266).string(message.pRewardInference);
        }
        if (message.pRewardForecast !== "") {
            writer.uint32(274).string(message.pRewardForecast);
        }
        if (message.pRewardReputer !== "") {
            writer.uint32(282).string(message.pRewardReputer);
        }
        if (message.cRewardInference !== "") {
            writer.uint32(290).string(message.cRewardInference);
        }
        if (message.cRewardForecast !== "") {
            writer.uint32(298).string(message.cRewardForecast);
        }
        if (message.cNorm !== "") {
            writer.uint32(306).string(message.cNorm);
        }
        if (message.topicFeeRevenueDecayRate !== "") {
            writer.uint32(314).string(message.topicFeeRevenueDecayRate);
        }
        if (message.epsilonReputer !== "") {
            writer.uint32(322).string(message.epsilonReputer);
        }
        if (message.minEffectiveTopicRevenue !== "") {
            writer.uint32(330).string(message.minEffectiveTopicRevenue);
        }
        if (message.halfMaxProcessStakeRemovalsEndBlock !== "0") {
            writer.uint32(336).uint64(message.halfMaxProcessStakeRemovalsEndBlock);
        }
        if (message.epsilonSafeDiv !== "") {
            writer.uint32(346).string(message.epsilonSafeDiv);
        }
        if (message.dataSendingFee !== "") {
            writer.uint32(354).string(message.dataSendingFee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.maxSerializedMsgLength = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.minTopicWeight = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.maxTopicsPerBlock = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.requiredMinimumStake = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.removeStakeDelayWindow = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.minEpochLength = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.betaEntropy = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.learningRate = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.maxGradientThreshold = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.minStakeFraction = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.maxUnfulfilledWorkerRequests = reader.uint64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.maxUnfulfilledReputerRequests = reader.uint64().toString();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.topicRewardStakeImportance = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.topicRewardFeeRevenueImportance = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.topicRewardAlpha = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.taskRewardAlpha = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.validatorsVsAlloraPercentReward = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.maxSamplesToScaleScores = reader.uint64().toString();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.maxTopInferersToReward = reader.uint64().toString();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.maxTopForecastersToReward = reader.uint64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.maxTopReputersToReward = reader.uint64().toString();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.createTopicFee = reader.string();
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.gradientDescentMaxIters = reader.uint64().toString();
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.maxRetriesToFulfilNoncesWorker = reader.int64().toString();
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.maxRetriesToFulfilNoncesReputer = reader.int64().toString();
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.registrationFee = reader.string();
                    continue;
                }
                case 29: {
                    if (tag !== 232) {
                        break;
                    }
                    message.defaultPageLimit = reader.uint64().toString();
                    continue;
                }
                case 30: {
                    if (tag !== 240) {
                        break;
                    }
                    message.maxPageLimit = reader.uint64().toString();
                    continue;
                }
                case 31: {
                    if (tag !== 248) {
                        break;
                    }
                    message.minEpochLengthRecordLimit = reader.int64().toString();
                    continue;
                }
                case 32: {
                    if (tag !== 256) {
                        break;
                    }
                    message.blocksPerMonth = reader.uint64().toString();
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.pRewardInference = reader.string();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.pRewardForecast = reader.string();
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.pRewardReputer = reader.string();
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.cRewardInference = reader.string();
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.cRewardForecast = reader.string();
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.cNorm = reader.string();
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.topicFeeRevenueDecayRate = reader.string();
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.epsilonReputer = reader.string();
                    continue;
                }
                case 41: {
                    if (tag !== 330) {
                        break;
                    }
                    message.minEffectiveTopicRevenue = reader.string();
                    continue;
                }
                case 42: {
                    if (tag !== 336) {
                        break;
                    }
                    message.halfMaxProcessStakeRemovalsEndBlock = reader.uint64().toString();
                    continue;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.epsilonSafeDiv = reader.string();
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.dataSendingFee = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            maxSerializedMsgLength: isSet(object.maxSerializedMsgLength)
                ? globalThis.String(object.maxSerializedMsgLength)
                : "0",
            minTopicWeight: isSet(object.minTopicWeight) ? globalThis.String(object.minTopicWeight) : "",
            maxTopicsPerBlock: isSet(object.maxTopicsPerBlock) ? globalThis.String(object.maxTopicsPerBlock) : "0",
            requiredMinimumStake: isSet(object.requiredMinimumStake) ? globalThis.String(object.requiredMinimumStake) : "",
            removeStakeDelayWindow: isSet(object.removeStakeDelayWindow)
                ? globalThis.String(object.removeStakeDelayWindow)
                : "0",
            minEpochLength: isSet(object.minEpochLength) ? globalThis.String(object.minEpochLength) : "0",
            betaEntropy: isSet(object.betaEntropy) ? globalThis.String(object.betaEntropy) : "",
            learningRate: isSet(object.learningRate) ? globalThis.String(object.learningRate) : "",
            maxGradientThreshold: isSet(object.maxGradientThreshold) ? globalThis.String(object.maxGradientThreshold) : "",
            minStakeFraction: isSet(object.minStakeFraction) ? globalThis.String(object.minStakeFraction) : "",
            maxUnfulfilledWorkerRequests: isSet(object.maxUnfulfilledWorkerRequests)
                ? globalThis.String(object.maxUnfulfilledWorkerRequests)
                : "0",
            maxUnfulfilledReputerRequests: isSet(object.maxUnfulfilledReputerRequests)
                ? globalThis.String(object.maxUnfulfilledReputerRequests)
                : "0",
            topicRewardStakeImportance: isSet(object.topicRewardStakeImportance)
                ? globalThis.String(object.topicRewardStakeImportance)
                : "",
            topicRewardFeeRevenueImportance: isSet(object.topicRewardFeeRevenueImportance)
                ? globalThis.String(object.topicRewardFeeRevenueImportance)
                : "",
            topicRewardAlpha: isSet(object.topicRewardAlpha) ? globalThis.String(object.topicRewardAlpha) : "",
            taskRewardAlpha: isSet(object.taskRewardAlpha) ? globalThis.String(object.taskRewardAlpha) : "",
            validatorsVsAlloraPercentReward: isSet(object.validatorsVsAlloraPercentReward)
                ? globalThis.String(object.validatorsVsAlloraPercentReward)
                : "",
            maxSamplesToScaleScores: isSet(object.maxSamplesToScaleScores)
                ? globalThis.String(object.maxSamplesToScaleScores)
                : "0",
            maxTopInferersToReward: isSet(object.maxTopInferersToReward)
                ? globalThis.String(object.maxTopInferersToReward)
                : "0",
            maxTopForecastersToReward: isSet(object.maxTopForecastersToReward)
                ? globalThis.String(object.maxTopForecastersToReward)
                : "0",
            maxTopReputersToReward: isSet(object.maxTopReputersToReward)
                ? globalThis.String(object.maxTopReputersToReward)
                : "0",
            createTopicFee: isSet(object.createTopicFee) ? globalThis.String(object.createTopicFee) : "",
            gradientDescentMaxIters: isSet(object.gradientDescentMaxIters)
                ? globalThis.String(object.gradientDescentMaxIters)
                : "0",
            maxRetriesToFulfilNoncesWorker: isSet(object.maxRetriesToFulfilNoncesWorker)
                ? globalThis.String(object.maxRetriesToFulfilNoncesWorker)
                : "0",
            maxRetriesToFulfilNoncesReputer: isSet(object.maxRetriesToFulfilNoncesReputer)
                ? globalThis.String(object.maxRetriesToFulfilNoncesReputer)
                : "0",
            registrationFee: isSet(object.registrationFee) ? globalThis.String(object.registrationFee) : "",
            defaultPageLimit: isSet(object.defaultPageLimit) ? globalThis.String(object.defaultPageLimit) : "0",
            maxPageLimit: isSet(object.maxPageLimit) ? globalThis.String(object.maxPageLimit) : "0",
            minEpochLengthRecordLimit: isSet(object.minEpochLengthRecordLimit)
                ? globalThis.String(object.minEpochLengthRecordLimit)
                : "0",
            blocksPerMonth: isSet(object.blocksPerMonth) ? globalThis.String(object.blocksPerMonth) : "0",
            pRewardInference: isSet(object.pRewardInference) ? globalThis.String(object.pRewardInference) : "",
            pRewardForecast: isSet(object.pRewardForecast) ? globalThis.String(object.pRewardForecast) : "",
            pRewardReputer: isSet(object.pRewardReputer) ? globalThis.String(object.pRewardReputer) : "",
            cRewardInference: isSet(object.cRewardInference) ? globalThis.String(object.cRewardInference) : "",
            cRewardForecast: isSet(object.cRewardForecast) ? globalThis.String(object.cRewardForecast) : "",
            cNorm: isSet(object.cNorm) ? globalThis.String(object.cNorm) : "",
            topicFeeRevenueDecayRate: isSet(object.topicFeeRevenueDecayRate)
                ? globalThis.String(object.topicFeeRevenueDecayRate)
                : "",
            epsilonReputer: isSet(object.epsilonReputer) ? globalThis.String(object.epsilonReputer) : "",
            minEffectiveTopicRevenue: isSet(object.minEffectiveTopicRevenue)
                ? globalThis.String(object.minEffectiveTopicRevenue)
                : "",
            halfMaxProcessStakeRemovalsEndBlock: isSet(object.halfMaxProcessStakeRemovalsEndBlock)
                ? globalThis.String(object.halfMaxProcessStakeRemovalsEndBlock)
                : "0",
            epsilonSafeDiv: isSet(object.epsilonSafeDiv) ? globalThis.String(object.epsilonSafeDiv) : "",
            dataSendingFee: isSet(object.dataSendingFee) ? globalThis.String(object.dataSendingFee) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.maxSerializedMsgLength !== "0") {
            obj.maxSerializedMsgLength = message.maxSerializedMsgLength;
        }
        if (message.minTopicWeight !== "") {
            obj.minTopicWeight = message.minTopicWeight;
        }
        if (message.maxTopicsPerBlock !== "0") {
            obj.maxTopicsPerBlock = message.maxTopicsPerBlock;
        }
        if (message.requiredMinimumStake !== "") {
            obj.requiredMinimumStake = message.requiredMinimumStake;
        }
        if (message.removeStakeDelayWindow !== "0") {
            obj.removeStakeDelayWindow = message.removeStakeDelayWindow;
        }
        if (message.minEpochLength !== "0") {
            obj.minEpochLength = message.minEpochLength;
        }
        if (message.betaEntropy !== "") {
            obj.betaEntropy = message.betaEntropy;
        }
        if (message.learningRate !== "") {
            obj.learningRate = message.learningRate;
        }
        if (message.maxGradientThreshold !== "") {
            obj.maxGradientThreshold = message.maxGradientThreshold;
        }
        if (message.minStakeFraction !== "") {
            obj.minStakeFraction = message.minStakeFraction;
        }
        if (message.maxUnfulfilledWorkerRequests !== "0") {
            obj.maxUnfulfilledWorkerRequests = message.maxUnfulfilledWorkerRequests;
        }
        if (message.maxUnfulfilledReputerRequests !== "0") {
            obj.maxUnfulfilledReputerRequests = message.maxUnfulfilledReputerRequests;
        }
        if (message.topicRewardStakeImportance !== "") {
            obj.topicRewardStakeImportance = message.topicRewardStakeImportance;
        }
        if (message.topicRewardFeeRevenueImportance !== "") {
            obj.topicRewardFeeRevenueImportance = message.topicRewardFeeRevenueImportance;
        }
        if (message.topicRewardAlpha !== "") {
            obj.topicRewardAlpha = message.topicRewardAlpha;
        }
        if (message.taskRewardAlpha !== "") {
            obj.taskRewardAlpha = message.taskRewardAlpha;
        }
        if (message.validatorsVsAlloraPercentReward !== "") {
            obj.validatorsVsAlloraPercentReward = message.validatorsVsAlloraPercentReward;
        }
        if (message.maxSamplesToScaleScores !== "0") {
            obj.maxSamplesToScaleScores = message.maxSamplesToScaleScores;
        }
        if (message.maxTopInferersToReward !== "0") {
            obj.maxTopInferersToReward = message.maxTopInferersToReward;
        }
        if (message.maxTopForecastersToReward !== "0") {
            obj.maxTopForecastersToReward = message.maxTopForecastersToReward;
        }
        if (message.maxTopReputersToReward !== "0") {
            obj.maxTopReputersToReward = message.maxTopReputersToReward;
        }
        if (message.createTopicFee !== "") {
            obj.createTopicFee = message.createTopicFee;
        }
        if (message.gradientDescentMaxIters !== "0") {
            obj.gradientDescentMaxIters = message.gradientDescentMaxIters;
        }
        if (message.maxRetriesToFulfilNoncesWorker !== "0") {
            obj.maxRetriesToFulfilNoncesWorker = message.maxRetriesToFulfilNoncesWorker;
        }
        if (message.maxRetriesToFulfilNoncesReputer !== "0") {
            obj.maxRetriesToFulfilNoncesReputer = message.maxRetriesToFulfilNoncesReputer;
        }
        if (message.registrationFee !== "") {
            obj.registrationFee = message.registrationFee;
        }
        if (message.defaultPageLimit !== "0") {
            obj.defaultPageLimit = message.defaultPageLimit;
        }
        if (message.maxPageLimit !== "0") {
            obj.maxPageLimit = message.maxPageLimit;
        }
        if (message.minEpochLengthRecordLimit !== "0") {
            obj.minEpochLengthRecordLimit = message.minEpochLengthRecordLimit;
        }
        if (message.blocksPerMonth !== "0") {
            obj.blocksPerMonth = message.blocksPerMonth;
        }
        if (message.pRewardInference !== "") {
            obj.pRewardInference = message.pRewardInference;
        }
        if (message.pRewardForecast !== "") {
            obj.pRewardForecast = message.pRewardForecast;
        }
        if (message.pRewardReputer !== "") {
            obj.pRewardReputer = message.pRewardReputer;
        }
        if (message.cRewardInference !== "") {
            obj.cRewardInference = message.cRewardInference;
        }
        if (message.cRewardForecast !== "") {
            obj.cRewardForecast = message.cRewardForecast;
        }
        if (message.cNorm !== "") {
            obj.cNorm = message.cNorm;
        }
        if (message.topicFeeRevenueDecayRate !== "") {
            obj.topicFeeRevenueDecayRate = message.topicFeeRevenueDecayRate;
        }
        if (message.epsilonReputer !== "") {
            obj.epsilonReputer = message.epsilonReputer;
        }
        if (message.minEffectiveTopicRevenue !== "") {
            obj.minEffectiveTopicRevenue = message.minEffectiveTopicRevenue;
        }
        if (message.halfMaxProcessStakeRemovalsEndBlock !== "0") {
            obj.halfMaxProcessStakeRemovalsEndBlock = message.halfMaxProcessStakeRemovalsEndBlock;
        }
        if (message.epsilonSafeDiv !== "") {
            obj.epsilonSafeDiv = message.epsilonSafeDiv;
        }
        if (message.dataSendingFee !== "") {
            obj.dataSendingFee = message.dataSendingFee;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18;
        const message = createBaseParams();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "";
        message.maxSerializedMsgLength = (_b = object.maxSerializedMsgLength) !== null && _b !== void 0 ? _b : "0";
        message.minTopicWeight = (_c = object.minTopicWeight) !== null && _c !== void 0 ? _c : "";
        message.maxTopicsPerBlock = (_d = object.maxTopicsPerBlock) !== null && _d !== void 0 ? _d : "0";
        message.requiredMinimumStake = (_e = object.requiredMinimumStake) !== null && _e !== void 0 ? _e : "";
        message.removeStakeDelayWindow = (_f = object.removeStakeDelayWindow) !== null && _f !== void 0 ? _f : "0";
        message.minEpochLength = (_g = object.minEpochLength) !== null && _g !== void 0 ? _g : "0";
        message.betaEntropy = (_h = object.betaEntropy) !== null && _h !== void 0 ? _h : "";
        message.learningRate = (_j = object.learningRate) !== null && _j !== void 0 ? _j : "";
        message.maxGradientThreshold = (_k = object.maxGradientThreshold) !== null && _k !== void 0 ? _k : "";
        message.minStakeFraction = (_l = object.minStakeFraction) !== null && _l !== void 0 ? _l : "";
        message.maxUnfulfilledWorkerRequests = (_m = object.maxUnfulfilledWorkerRequests) !== null && _m !== void 0 ? _m : "0";
        message.maxUnfulfilledReputerRequests = (_o = object.maxUnfulfilledReputerRequests) !== null && _o !== void 0 ? _o : "0";
        message.topicRewardStakeImportance = (_p = object.topicRewardStakeImportance) !== null && _p !== void 0 ? _p : "";
        message.topicRewardFeeRevenueImportance = (_q = object.topicRewardFeeRevenueImportance) !== null && _q !== void 0 ? _q : "";
        message.topicRewardAlpha = (_r = object.topicRewardAlpha) !== null && _r !== void 0 ? _r : "";
        message.taskRewardAlpha = (_s = object.taskRewardAlpha) !== null && _s !== void 0 ? _s : "";
        message.validatorsVsAlloraPercentReward = (_t = object.validatorsVsAlloraPercentReward) !== null && _t !== void 0 ? _t : "";
        message.maxSamplesToScaleScores = (_u = object.maxSamplesToScaleScores) !== null && _u !== void 0 ? _u : "0";
        message.maxTopInferersToReward = (_v = object.maxTopInferersToReward) !== null && _v !== void 0 ? _v : "0";
        message.maxTopForecastersToReward = (_w = object.maxTopForecastersToReward) !== null && _w !== void 0 ? _w : "0";
        message.maxTopReputersToReward = (_x = object.maxTopReputersToReward) !== null && _x !== void 0 ? _x : "0";
        message.createTopicFee = (_y = object.createTopicFee) !== null && _y !== void 0 ? _y : "";
        message.gradientDescentMaxIters = (_z = object.gradientDescentMaxIters) !== null && _z !== void 0 ? _z : "0";
        message.maxRetriesToFulfilNoncesWorker = (_0 = object.maxRetriesToFulfilNoncesWorker) !== null && _0 !== void 0 ? _0 : "0";
        message.maxRetriesToFulfilNoncesReputer = (_1 = object.maxRetriesToFulfilNoncesReputer) !== null && _1 !== void 0 ? _1 : "0";
        message.registrationFee = (_2 = object.registrationFee) !== null && _2 !== void 0 ? _2 : "";
        message.defaultPageLimit = (_3 = object.defaultPageLimit) !== null && _3 !== void 0 ? _3 : "0";
        message.maxPageLimit = (_4 = object.maxPageLimit) !== null && _4 !== void 0 ? _4 : "0";
        message.minEpochLengthRecordLimit = (_5 = object.minEpochLengthRecordLimit) !== null && _5 !== void 0 ? _5 : "0";
        message.blocksPerMonth = (_6 = object.blocksPerMonth) !== null && _6 !== void 0 ? _6 : "0";
        message.pRewardInference = (_7 = object.pRewardInference) !== null && _7 !== void 0 ? _7 : "";
        message.pRewardForecast = (_8 = object.pRewardForecast) !== null && _8 !== void 0 ? _8 : "";
        message.pRewardReputer = (_9 = object.pRewardReputer) !== null && _9 !== void 0 ? _9 : "";
        message.cRewardInference = (_10 = object.cRewardInference) !== null && _10 !== void 0 ? _10 : "";
        message.cRewardForecast = (_11 = object.cRewardForecast) !== null && _11 !== void 0 ? _11 : "";
        message.cNorm = (_12 = object.cNorm) !== null && _12 !== void 0 ? _12 : "";
        message.topicFeeRevenueDecayRate = (_13 = object.topicFeeRevenueDecayRate) !== null && _13 !== void 0 ? _13 : "";
        message.epsilonReputer = (_14 = object.epsilonReputer) !== null && _14 !== void 0 ? _14 : "";
        message.minEffectiveTopicRevenue = (_15 = object.minEffectiveTopicRevenue) !== null && _15 !== void 0 ? _15 : "";
        message.halfMaxProcessStakeRemovalsEndBlock = (_16 = object.halfMaxProcessStakeRemovalsEndBlock) !== null && _16 !== void 0 ? _16 : "0";
        message.epsilonSafeDiv = (_17 = object.epsilonSafeDiv) !== null && _17 !== void 0 ? _17 : "";
        message.dataSendingFee = (_18 = object.dataSendingFee) !== null && _18 !== void 0 ? _18 : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

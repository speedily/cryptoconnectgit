import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Nonce } from "./nonce";
export declare const protobufPackage = "emissions.v2";
export interface Topic {
    id: string;
    creator: string;
    metadata: string;
    lossMethod: string;
    epochLastEnded: string;
    epochLength: string;
    groundTruthLag: string;
    pNorm: string;
    alphaRegret: string;
    allowNegative: boolean;
    epsilon: string;
    initialRegret: string;
    workerSubmissionWindow: string;
}
export interface TopicList {
    topics: Topic[];
}
export interface TimestampedActorNonce {
    /** height at which value calculated or received */
    blockHeight: string;
    nonce?: Nonce | undefined;
}
export interface TopicIds {
    topicIds: string[];
}
export declare const Topic: MessageFns<Topic>;
export declare const TopicList: MessageFns<TopicList>;
export declare const TimestampedActorNonce: MessageFns<TimestampedActorNonce>;
export declare const TopicIds: MessageFns<TopicIds>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=topic.d.ts.map
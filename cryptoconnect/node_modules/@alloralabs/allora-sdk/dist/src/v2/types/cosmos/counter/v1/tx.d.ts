import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "cosmos.counter.v1";
/** MsgIncreaseCounter defines a count Msg service counter. */
export interface MsgIncreaseCounter {
    /** signer is the address that controls the module (defaults to x/gov unless overwritten). */
    signer: string;
    /** count is the number of times to increment the counter. */
    count: string;
}
/** MsgIncreaseCountResponse is the Msg/Counter response type. */
export interface MsgIncreaseCountResponse {
    /** new_count is the number of times the counter was incremented. */
    newCount: string;
}
export declare const MsgIncreaseCounter: MessageFns<MsgIncreaseCounter>;
export declare const MsgIncreaseCountResponse: MessageFns<MsgIncreaseCountResponse>;
/** Msg defines the counter Msg service. */
export interface Msg {
    /** IncreaseCount increments the counter by the specified amount. */
    IncreaseCount(request: MsgIncreaseCounter): Promise<MsgIncreaseCountResponse>;
}
export declare const MsgServiceName = "cosmos.counter.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    IncreaseCount(request: MsgIncreaseCounter): Promise<MsgIncreaseCountResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=tx.d.ts.map
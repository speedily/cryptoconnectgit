import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RegretInformedWeight } from "./inference";
import { OffchainNode } from "./node";
import { Nonces, ReputerRequestNonces } from "./nonce";
import { Params } from "./params";
import { ReputerValueBundles, ValueBundle, WorkerAttributedValue } from "./reputer";
import { Score, Scores } from "./score";
import { DelegateStakeRemovalInfo, DelegatorInfo, StakeInfo, StakeRemovalInfo } from "./stake";
import { TimestampedActorNonce, Topic } from "./topic";
import { ListeningCoefficient, SimpleCursorPaginationRequest, SimpleCursorPaginationResponse } from "./types";
import { Forecasts, Inference, Inferences, TimestampedValue } from "./worker";
export declare const protobufPackage = "emissions.v3";
export interface QueryNaiveInfererNetworkRegretRequest {
    topicId: string;
    inferer: string;
}
export interface QueryNaiveInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryOneOutInfererInfererNetworkRegretRequest {
    topicId: string;
    oneOutInferer: string;
    inferer: string;
}
export interface QueryOneOutInfererInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryOneOutInfererForecasterNetworkRegretRequest {
    topicId: string;
    oneOutInferer: string;
    forecaster: string;
}
export interface QueryOneOutInfererForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryOneOutForecasterInfererNetworkRegretRequest {
    topicId: string;
    oneOutForecaster: string;
    inferer: string;
}
export interface QueryOneOutForecasterInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryOneOutForecasterForecasterNetworkRegretRequest {
    topicId: string;
    oneOutForecaster: string;
    forecaster: string;
}
export interface QueryOneOutForecasterForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
}
/** Total Stake returns the total amount of stake in the system */
export interface QueryTotalStakeRequest {
}
/**
 * Total Stake returns the total amount of stake in the system
 *
 * NOTE: The amount field is an Int which implements the custom method
 * signatures required by gogoproto.
 */
export interface QueryTotalStakeResponse {
    amount: string;
}
export interface QueryReputerStakeInTopicRequest {
    address: string;
    topicId: string;
}
export interface QueryReputerStakeInTopicResponse {
    amount: string;
}
export interface QueryMultiReputerStakeInTopicRequest {
    addresses: string[];
    topicId: string;
}
export interface QueryMultiReputerStakeInTopicResponse {
    amounts: StakeInfo[];
}
export interface QueryStakeFromReputerInTopicInSelfRequest {
    reputerAddress: string;
    topicId: string;
}
export interface QueryStakeFromReputerInTopicInSelfResponse {
    amount: string;
}
export interface QueryDelegateStakeInTopicInReputerRequest {
    reputerAddress: string;
    topicId: string;
}
export interface QueryDelegateStakeInTopicInReputerResponse {
    amount: string;
}
export interface QueryStakeFromDelegatorInTopicInReputerRequest {
    delegatorAddress: string;
    reputerAddress: string;
    topicId: string;
}
export interface QueryStakeFromDelegatorInTopicInReputerResponse {
    amount: string;
}
export interface QueryStakeFromDelegatorInTopicRequest {
    delegatorAddress: string;
    topicId: string;
}
export interface QueryStakeFromDelegatorInTopicResponse {
    amount: string;
}
export interface QueryTopicStakeRequest {
    topicId: string;
}
export interface QueryTopicStakeResponse {
    amount: string;
}
export interface QueryNetworkLossBundleAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryNetworkLossBundleAtBlockResponse {
    lossBundle?: ValueBundle | undefined;
}
export interface QueryNextTopicIdRequest {
}
export interface QueryNextTopicIdResponse {
    nextTopicId: string;
}
export interface QueryTopicRequest {
    topicId: string;
}
export interface QueryTopicResponse {
    topic?: Topic | undefined;
    weight: string;
    effectiveRevenue: string;
}
export interface QueryActiveTopicsRequest {
    pagination?: SimpleCursorPaginationRequest | undefined;
}
export interface QueryActiveTopicsResponse {
    topics: Topic[];
    pagination?: SimpleCursorPaginationResponse | undefined;
}
/** Returns the inferences on a topic posted at a block height */
export interface QueryInferencesAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
/**
 * Returns the inferences on a topic posted at a block height
 *
 * NOTE: The amount field is a Uint which implements the custom method
 * signatures required by gogoproto.
 */
export interface QueryInferencesAtBlockResponse {
    inferences?: Inferences | undefined;
}
export interface QueryLatestTopicInferencesRequest {
    topicId: string;
}
export interface QueryLatestTopicInferencesResponse {
    inferences?: Inferences | undefined;
    blockHeight: string;
}
/** Returns the forecasts on a topic posted at a block height */
export interface QueryForecastsAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
/**
 * Returns the forecasts on a topic posted at a block height
 *
 * NOTE: The amount field is a Uint which implements the custom method
 * signatures required by gogoproto.
 */
export interface QueryForecastsAtBlockResponse {
    forecasts?: Forecasts | undefined;
}
export interface QueryWorkerLatestInferenceRequest {
    topicId: string;
    workerAddress: string;
}
export interface QueryWorkerLatestInferenceResponse {
    latestInference?: Inference | undefined;
}
export interface QueryWorkerNodeInfoRequest {
    address: string;
}
export interface QueryWorkerNodeInfoResponse {
    nodeInfo?: OffchainNode | undefined;
}
export interface QueryReputerNodeInfoRequest {
    address: string;
}
export interface QueryReputerNodeInfoResponse {
    nodeInfo?: OffchainNode | undefined;
}
export interface QueryNetworkInferencesAtBlockRequest {
    topicId: string;
    blockHeightLastInference: string;
}
export interface QueryLatestNetworkInferencesRequest {
    topicId: string;
}
export interface QueryLatestAvailableNetworkInferencesRequest {
    topicId: string;
}
export interface QueryIsWorkerNonceUnfulfilledRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryIsWorkerNonceUnfulfilledResponse {
    isWorkerNonceUnfulfilled: boolean;
}
export interface QueryUnfulfilledReputerNoncesRequest {
    topicId: string;
}
export interface QueryUnfulfilledReputerNoncesResponse {
    nonces?: ReputerRequestNonces | undefined;
}
export interface QueryUnfulfilledWorkerNoncesRequest {
    topicId: string;
}
export interface QueryUnfulfilledWorkerNoncesResponse {
    nonces?: Nonces | undefined;
}
export interface QueryInfererNetworkRegretRequest {
    topicId: string;
    actorId: string;
}
export interface QueryInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryForecasterNetworkRegretRequest {
    topicId: string;
    worker: string;
}
export interface QueryForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryOneInForecasterNetworkRegretRequest {
    topicId: string;
    forecaster: string;
    inferer: string;
}
export interface QueryOneInForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface QueryIsReputerNonceUnfulfilledRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryIsReputerNonceUnfulfilledResponse {
    isReputerNonceUnfulfilled: boolean;
}
export interface QueryNetworkInferencesAtBlockResponse {
    networkInferences?: ValueBundle | undefined;
}
export interface QueryLatestNetworkInferencesResponse {
    networkInferences?: ValueBundle | undefined;
    infererWeights: RegretInformedWeight[];
    forecasterWeights: RegretInformedWeight[];
    forecastImpliedInferences: WorkerAttributedValue[];
    inferenceBlockHeight: string;
    lossBlockHeight: string;
    confidenceIntervalRawPercentiles: string[];
    confidenceIntervalValues: string[];
}
export interface QueryLatestAvailableNetworkInferencesResponse {
    networkInferences?: ValueBundle | undefined;
    infererWeights: RegretInformedWeight[];
    forecasterWeights: RegretInformedWeight[];
    forecastImpliedInferences: WorkerAttributedValue[];
    inferenceBlockHeight: string;
    lossBlockHeight: string;
    confidenceIntervalRawPercentiles: string[];
    confidenceIntervalValues: string[];
}
export interface QueryIsWorkerRegisteredInTopicIdRequest {
    topicId: string;
    address: string;
}
export interface QueryIsWorkerRegisteredInTopicIdResponse {
    isRegistered: boolean;
}
export interface QueryIsReputerRegisteredInTopicIdRequest {
    topicId: string;
    address: string;
}
export interface QueryIsReputerRegisteredInTopicIdResponse {
    isRegistered: boolean;
}
export interface QueryIsWhitelistAdminRequest {
    address: string;
}
export interface QueryIsWhitelistAdminResponse {
    isAdmin: boolean;
}
export interface QueryStakeRemovalsUpUntilBlockRequest {
    blockHeight: string;
}
export interface QueryStakeRemovalsUpUntilBlockResponse {
    removals: StakeRemovalInfo[];
}
export interface QueryDelegateStakeRemovalsUpUntilBlockRequest {
    blockHeight: string;
}
export interface QueryDelegateStakeRemovalsUpUntilBlockResponse {
    removals: DelegateStakeRemovalInfo[];
}
export interface QueryStakeRemovalInfoRequest {
    topicId: string;
    reputer: string;
}
export interface QueryStakeRemovalInfoResponse {
    removal?: StakeRemovalInfo | undefined;
}
export interface QueryDelegateStakeRemovalInfoRequest {
    topicId: string;
    delegator: string;
    reputer: string;
}
export interface QueryDelegateStakeRemovalInfoResponse {
    removal?: DelegateStakeRemovalInfo | undefined;
}
export interface QueryTopicLastWorkerCommitInfoRequest {
    topicId: string;
}
export interface QueryTopicLastWorkerCommitInfoResponse {
    lastCommit?: TimestampedActorNonce | undefined;
}
export interface QueryTopicLastReputerCommitInfoRequest {
    topicId: string;
}
export interface QueryTopicLastReputerCommitInfoResponse {
    lastCommit?: TimestampedActorNonce | undefined;
}
export interface QueryTopicRewardNonceRequest {
    topicId: string;
}
export interface QueryTopicRewardNonceResponse {
    nonce: string;
}
export interface QueryReputerLossBundlesAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryReputerLossBundlesAtBlockResponse {
    lossBundles?: ReputerValueBundles | undefined;
}
export interface QueryStakeReputerAuthorityRequest {
    topicId: string;
    reputer: string;
}
export interface QueryStakeReputerAuthorityResponse {
    authority: string;
}
export interface QueryDelegateStakePlacementRequest {
    topicId: string;
    delegator: string;
    target: string;
}
export interface QueryDelegateStakePlacementResponse {
    delegatorInfo?: DelegatorInfo | undefined;
}
export interface QueryDelegateStakeUponReputerRequest {
    topicId: string;
    target: string;
}
export interface QueryDelegateStakeUponReputerResponse {
    stake: string;
}
export interface QueryDelegateRewardPerShareRequest {
    topicId: string;
    reputer: string;
}
export interface QueryDelegateRewardPerShareResponse {
    rewardPerShare: string;
}
export interface QueryStakeRemovalForReputerAndTopicIdRequest {
    reputer: string;
    topicId: string;
}
export interface QueryStakeRemovalForReputerAndTopicIdResponse {
    stakeRemovalInfo?: StakeRemovalInfo | undefined;
}
export interface QueryDelegateStakeRemovalRequest {
    blockHeight: string;
    topicId: string;
    delegator: string;
    reputer: string;
}
export interface QueryDelegateStakeRemovalResponse {
    stakeRemovalInfo?: DelegateStakeRemovalInfo | undefined;
}
export interface QueryPreviousTopicWeightRequest {
    topicId: string;
}
export interface QueryPreviousTopicWeightResponse {
    weight: string;
    notFound: boolean;
}
export interface QueryTopicExistsRequest {
    topicId: string;
}
export interface QueryTopicExistsResponse {
    exists: boolean;
}
export interface QueryIsTopicActiveRequest {
    topicId: string;
}
export interface QueryIsTopicActiveResponse {
    isActive: boolean;
}
export interface QueryTopicFeeRevenueRequest {
    topicId: string;
}
export interface QueryTopicFeeRevenueResponse {
    feeRevenue: string;
}
export interface QueryRewardableTopicsRequest {
}
export interface QueryRewardableTopicsResponse {
    rewardableTopicIds: string[];
}
export interface QueryGetInfererScoreEmaRequest {
    topicId: string;
    inferer: string;
}
export interface QueryGetInfererScoreEmaResponse {
    score?: Score | undefined;
}
export interface QueryGetForecasterScoreEmaRequest {
    topicId: string;
    forecaster: string;
}
export interface QueryGetForecasterScoreEmaResponse {
    score?: Score | undefined;
}
export interface QueryGetReputerScoreEmaRequest {
    topicId: string;
    reputer: string;
}
export interface QueryGetReputerScoreEmaResponse {
    score?: Score | undefined;
}
export interface QueryInferenceScoresUntilBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryInferenceScoresUntilBlockResponse {
    scores: Score[];
}
export interface QueryGetPreviousTopicQuantileForecasterScoreEmaRequest {
    topicId: string;
}
export interface QueryGetPreviousTopicQuantileForecasterScoreEmaResponse {
    value: string;
}
export interface QueryGetPreviousTopicQuantileInfererScoreEmaRequest {
    topicId: string;
}
export interface QueryGetPreviousTopicQuantileInfererScoreEmaResponse {
    value: string;
}
export interface QueryGetPreviousTopicQuantileReputerScoreEmaRequest {
    topicId: string;
}
export interface QueryGetPreviousTopicQuantileReputerScoreEmaResponse {
    value: string;
}
export interface QueryWorkerInferenceScoresAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryWorkerInferenceScoresAtBlockResponse {
    scores?: Scores | undefined;
}
export interface QueryCurrentLowestInfererScoreRequest {
    topicId: string;
}
export interface QueryCurrentLowestInfererScoreResponse {
    score?: Score | undefined;
}
export interface QueryForecastScoresUntilBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryForecastScoresUntilBlockResponse {
    scores: Score[];
}
export interface QueryWorkerForecastScoresAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryWorkerForecastScoresAtBlockResponse {
    scores?: Scores | undefined;
}
export interface QueryCurrentLowestForecasterScoreRequest {
    topicId: string;
}
export interface QueryCurrentLowestForecasterScoreResponse {
    score?: Score | undefined;
}
export interface QueryReputersScoresAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface QueryReputersScoresAtBlockResponse {
    scores?: Scores | undefined;
}
export interface QueryCurrentLowestReputerScoreRequest {
    topicId: string;
}
export interface QueryCurrentLowestReputerScoreResponse {
    score?: Score | undefined;
}
export interface QueryListeningCoefficientRequest {
    topicId: string;
    reputer: string;
}
export interface QueryListeningCoefficientResponse {
    listeningCoefficient?: ListeningCoefficient | undefined;
}
export interface QueryPreviousReputerRewardFractionRequest {
    topicId: string;
    reputer: string;
}
export interface QueryPreviousReputerRewardFractionResponse {
    rewardFraction: string;
    notFound: boolean;
}
export interface QueryPreviousInferenceRewardFractionRequest {
    topicId: string;
    worker: string;
}
export interface QueryPreviousInferenceRewardFractionResponse {
    rewardFraction: string;
    notFound: boolean;
}
export interface QueryPreviousForecastRewardFractionRequest {
    topicId: string;
    worker: string;
}
export interface QueryPreviousForecastRewardFractionResponse {
    rewardFraction: string;
    notFound: boolean;
}
export interface QueryPreviousPercentageRewardToStakedReputersRequest {
}
export interface QueryPreviousPercentageRewardToStakedReputersResponse {
    percentageReward: string;
}
export interface QueryTotalRewardToDistributeRequest {
}
export interface QueryTotalRewardToDistributeResponse {
    totalReward: string;
}
export interface QueryActiveTopicsAtBlockRequest {
    blockHeight: string;
}
export interface QueryActiveTopicsAtBlockResponse {
    topics: Topic[];
    pagination?: SimpleCursorPaginationResponse | undefined;
}
export interface QueryNextChurningBlockByTopicIdRequest {
    topicId: string;
}
export interface QueryNextChurningBlockByTopicIdResponse {
    blockHeight: string;
}
export declare const QueryNaiveInfererNetworkRegretRequest: MessageFns<QueryNaiveInfererNetworkRegretRequest>;
export declare const QueryNaiveInfererNetworkRegretResponse: MessageFns<QueryNaiveInfererNetworkRegretResponse>;
export declare const QueryOneOutInfererInfererNetworkRegretRequest: MessageFns<QueryOneOutInfererInfererNetworkRegretRequest>;
export declare const QueryOneOutInfererInfererNetworkRegretResponse: MessageFns<QueryOneOutInfererInfererNetworkRegretResponse>;
export declare const QueryOneOutInfererForecasterNetworkRegretRequest: MessageFns<QueryOneOutInfererForecasterNetworkRegretRequest>;
export declare const QueryOneOutInfererForecasterNetworkRegretResponse: MessageFns<QueryOneOutInfererForecasterNetworkRegretResponse>;
export declare const QueryOneOutForecasterInfererNetworkRegretRequest: MessageFns<QueryOneOutForecasterInfererNetworkRegretRequest>;
export declare const QueryOneOutForecasterInfererNetworkRegretResponse: MessageFns<QueryOneOutForecasterInfererNetworkRegretResponse>;
export declare const QueryOneOutForecasterForecasterNetworkRegretRequest: MessageFns<QueryOneOutForecasterForecasterNetworkRegretRequest>;
export declare const QueryOneOutForecasterForecasterNetworkRegretResponse: MessageFns<QueryOneOutForecasterForecasterNetworkRegretResponse>;
export declare const QueryParamsRequest: MessageFns<QueryParamsRequest>;
export declare const QueryParamsResponse: MessageFns<QueryParamsResponse>;
export declare const QueryTotalStakeRequest: MessageFns<QueryTotalStakeRequest>;
export declare const QueryTotalStakeResponse: MessageFns<QueryTotalStakeResponse>;
export declare const QueryReputerStakeInTopicRequest: MessageFns<QueryReputerStakeInTopicRequest>;
export declare const QueryReputerStakeInTopicResponse: MessageFns<QueryReputerStakeInTopicResponse>;
export declare const QueryMultiReputerStakeInTopicRequest: MessageFns<QueryMultiReputerStakeInTopicRequest>;
export declare const QueryMultiReputerStakeInTopicResponse: MessageFns<QueryMultiReputerStakeInTopicResponse>;
export declare const QueryStakeFromReputerInTopicInSelfRequest: MessageFns<QueryStakeFromReputerInTopicInSelfRequest>;
export declare const QueryStakeFromReputerInTopicInSelfResponse: MessageFns<QueryStakeFromReputerInTopicInSelfResponse>;
export declare const QueryDelegateStakeInTopicInReputerRequest: MessageFns<QueryDelegateStakeInTopicInReputerRequest>;
export declare const QueryDelegateStakeInTopicInReputerResponse: MessageFns<QueryDelegateStakeInTopicInReputerResponse>;
export declare const QueryStakeFromDelegatorInTopicInReputerRequest: MessageFns<QueryStakeFromDelegatorInTopicInReputerRequest>;
export declare const QueryStakeFromDelegatorInTopicInReputerResponse: MessageFns<QueryStakeFromDelegatorInTopicInReputerResponse>;
export declare const QueryStakeFromDelegatorInTopicRequest: MessageFns<QueryStakeFromDelegatorInTopicRequest>;
export declare const QueryStakeFromDelegatorInTopicResponse: MessageFns<QueryStakeFromDelegatorInTopicResponse>;
export declare const QueryTopicStakeRequest: MessageFns<QueryTopicStakeRequest>;
export declare const QueryTopicStakeResponse: MessageFns<QueryTopicStakeResponse>;
export declare const QueryNetworkLossBundleAtBlockRequest: MessageFns<QueryNetworkLossBundleAtBlockRequest>;
export declare const QueryNetworkLossBundleAtBlockResponse: MessageFns<QueryNetworkLossBundleAtBlockResponse>;
export declare const QueryNextTopicIdRequest: MessageFns<QueryNextTopicIdRequest>;
export declare const QueryNextTopicIdResponse: MessageFns<QueryNextTopicIdResponse>;
export declare const QueryTopicRequest: MessageFns<QueryTopicRequest>;
export declare const QueryTopicResponse: MessageFns<QueryTopicResponse>;
export declare const QueryActiveTopicsRequest: MessageFns<QueryActiveTopicsRequest>;
export declare const QueryActiveTopicsResponse: MessageFns<QueryActiveTopicsResponse>;
export declare const QueryInferencesAtBlockRequest: MessageFns<QueryInferencesAtBlockRequest>;
export declare const QueryInferencesAtBlockResponse: MessageFns<QueryInferencesAtBlockResponse>;
export declare const QueryLatestTopicInferencesRequest: MessageFns<QueryLatestTopicInferencesRequest>;
export declare const QueryLatestTopicInferencesResponse: MessageFns<QueryLatestTopicInferencesResponse>;
export declare const QueryForecastsAtBlockRequest: MessageFns<QueryForecastsAtBlockRequest>;
export declare const QueryForecastsAtBlockResponse: MessageFns<QueryForecastsAtBlockResponse>;
export declare const QueryWorkerLatestInferenceRequest: MessageFns<QueryWorkerLatestInferenceRequest>;
export declare const QueryWorkerLatestInferenceResponse: MessageFns<QueryWorkerLatestInferenceResponse>;
export declare const QueryWorkerNodeInfoRequest: MessageFns<QueryWorkerNodeInfoRequest>;
export declare const QueryWorkerNodeInfoResponse: MessageFns<QueryWorkerNodeInfoResponse>;
export declare const QueryReputerNodeInfoRequest: MessageFns<QueryReputerNodeInfoRequest>;
export declare const QueryReputerNodeInfoResponse: MessageFns<QueryReputerNodeInfoResponse>;
export declare const QueryNetworkInferencesAtBlockRequest: MessageFns<QueryNetworkInferencesAtBlockRequest>;
export declare const QueryLatestNetworkInferencesRequest: MessageFns<QueryLatestNetworkInferencesRequest>;
export declare const QueryLatestAvailableNetworkInferencesRequest: MessageFns<QueryLatestAvailableNetworkInferencesRequest>;
export declare const QueryIsWorkerNonceUnfulfilledRequest: MessageFns<QueryIsWorkerNonceUnfulfilledRequest>;
export declare const QueryIsWorkerNonceUnfulfilledResponse: MessageFns<QueryIsWorkerNonceUnfulfilledResponse>;
export declare const QueryUnfulfilledReputerNoncesRequest: MessageFns<QueryUnfulfilledReputerNoncesRequest>;
export declare const QueryUnfulfilledReputerNoncesResponse: MessageFns<QueryUnfulfilledReputerNoncesResponse>;
export declare const QueryUnfulfilledWorkerNoncesRequest: MessageFns<QueryUnfulfilledWorkerNoncesRequest>;
export declare const QueryUnfulfilledWorkerNoncesResponse: MessageFns<QueryUnfulfilledWorkerNoncesResponse>;
export declare const QueryInfererNetworkRegretRequest: MessageFns<QueryInfererNetworkRegretRequest>;
export declare const QueryInfererNetworkRegretResponse: MessageFns<QueryInfererNetworkRegretResponse>;
export declare const QueryForecasterNetworkRegretRequest: MessageFns<QueryForecasterNetworkRegretRequest>;
export declare const QueryForecasterNetworkRegretResponse: MessageFns<QueryForecasterNetworkRegretResponse>;
export declare const QueryOneInForecasterNetworkRegretRequest: MessageFns<QueryOneInForecasterNetworkRegretRequest>;
export declare const QueryOneInForecasterNetworkRegretResponse: MessageFns<QueryOneInForecasterNetworkRegretResponse>;
export declare const QueryIsReputerNonceUnfulfilledRequest: MessageFns<QueryIsReputerNonceUnfulfilledRequest>;
export declare const QueryIsReputerNonceUnfulfilledResponse: MessageFns<QueryIsReputerNonceUnfulfilledResponse>;
export declare const QueryNetworkInferencesAtBlockResponse: MessageFns<QueryNetworkInferencesAtBlockResponse>;
export declare const QueryLatestNetworkInferencesResponse: MessageFns<QueryLatestNetworkInferencesResponse>;
export declare const QueryLatestAvailableNetworkInferencesResponse: MessageFns<QueryLatestAvailableNetworkInferencesResponse>;
export declare const QueryIsWorkerRegisteredInTopicIdRequest: MessageFns<QueryIsWorkerRegisteredInTopicIdRequest>;
export declare const QueryIsWorkerRegisteredInTopicIdResponse: MessageFns<QueryIsWorkerRegisteredInTopicIdResponse>;
export declare const QueryIsReputerRegisteredInTopicIdRequest: MessageFns<QueryIsReputerRegisteredInTopicIdRequest>;
export declare const QueryIsReputerRegisteredInTopicIdResponse: MessageFns<QueryIsReputerRegisteredInTopicIdResponse>;
export declare const QueryIsWhitelistAdminRequest: MessageFns<QueryIsWhitelistAdminRequest>;
export declare const QueryIsWhitelistAdminResponse: MessageFns<QueryIsWhitelistAdminResponse>;
export declare const QueryStakeRemovalsUpUntilBlockRequest: MessageFns<QueryStakeRemovalsUpUntilBlockRequest>;
export declare const QueryStakeRemovalsUpUntilBlockResponse: MessageFns<QueryStakeRemovalsUpUntilBlockResponse>;
export declare const QueryDelegateStakeRemovalsUpUntilBlockRequest: MessageFns<QueryDelegateStakeRemovalsUpUntilBlockRequest>;
export declare const QueryDelegateStakeRemovalsUpUntilBlockResponse: MessageFns<QueryDelegateStakeRemovalsUpUntilBlockResponse>;
export declare const QueryStakeRemovalInfoRequest: MessageFns<QueryStakeRemovalInfoRequest>;
export declare const QueryStakeRemovalInfoResponse: MessageFns<QueryStakeRemovalInfoResponse>;
export declare const QueryDelegateStakeRemovalInfoRequest: MessageFns<QueryDelegateStakeRemovalInfoRequest>;
export declare const QueryDelegateStakeRemovalInfoResponse: MessageFns<QueryDelegateStakeRemovalInfoResponse>;
export declare const QueryTopicLastWorkerCommitInfoRequest: MessageFns<QueryTopicLastWorkerCommitInfoRequest>;
export declare const QueryTopicLastWorkerCommitInfoResponse: MessageFns<QueryTopicLastWorkerCommitInfoResponse>;
export declare const QueryTopicLastReputerCommitInfoRequest: MessageFns<QueryTopicLastReputerCommitInfoRequest>;
export declare const QueryTopicLastReputerCommitInfoResponse: MessageFns<QueryTopicLastReputerCommitInfoResponse>;
export declare const QueryTopicRewardNonceRequest: MessageFns<QueryTopicRewardNonceRequest>;
export declare const QueryTopicRewardNonceResponse: MessageFns<QueryTopicRewardNonceResponse>;
export declare const QueryReputerLossBundlesAtBlockRequest: MessageFns<QueryReputerLossBundlesAtBlockRequest>;
export declare const QueryReputerLossBundlesAtBlockResponse: MessageFns<QueryReputerLossBundlesAtBlockResponse>;
export declare const QueryStakeReputerAuthorityRequest: MessageFns<QueryStakeReputerAuthorityRequest>;
export declare const QueryStakeReputerAuthorityResponse: MessageFns<QueryStakeReputerAuthorityResponse>;
export declare const QueryDelegateStakePlacementRequest: MessageFns<QueryDelegateStakePlacementRequest>;
export declare const QueryDelegateStakePlacementResponse: MessageFns<QueryDelegateStakePlacementResponse>;
export declare const QueryDelegateStakeUponReputerRequest: MessageFns<QueryDelegateStakeUponReputerRequest>;
export declare const QueryDelegateStakeUponReputerResponse: MessageFns<QueryDelegateStakeUponReputerResponse>;
export declare const QueryDelegateRewardPerShareRequest: MessageFns<QueryDelegateRewardPerShareRequest>;
export declare const QueryDelegateRewardPerShareResponse: MessageFns<QueryDelegateRewardPerShareResponse>;
export declare const QueryStakeRemovalForReputerAndTopicIdRequest: MessageFns<QueryStakeRemovalForReputerAndTopicIdRequest>;
export declare const QueryStakeRemovalForReputerAndTopicIdResponse: MessageFns<QueryStakeRemovalForReputerAndTopicIdResponse>;
export declare const QueryDelegateStakeRemovalRequest: MessageFns<QueryDelegateStakeRemovalRequest>;
export declare const QueryDelegateStakeRemovalResponse: MessageFns<QueryDelegateStakeRemovalResponse>;
export declare const QueryPreviousTopicWeightRequest: MessageFns<QueryPreviousTopicWeightRequest>;
export declare const QueryPreviousTopicWeightResponse: MessageFns<QueryPreviousTopicWeightResponse>;
export declare const QueryTopicExistsRequest: MessageFns<QueryTopicExistsRequest>;
export declare const QueryTopicExistsResponse: MessageFns<QueryTopicExistsResponse>;
export declare const QueryIsTopicActiveRequest: MessageFns<QueryIsTopicActiveRequest>;
export declare const QueryIsTopicActiveResponse: MessageFns<QueryIsTopicActiveResponse>;
export declare const QueryTopicFeeRevenueRequest: MessageFns<QueryTopicFeeRevenueRequest>;
export declare const QueryTopicFeeRevenueResponse: MessageFns<QueryTopicFeeRevenueResponse>;
export declare const QueryRewardableTopicsRequest: MessageFns<QueryRewardableTopicsRequest>;
export declare const QueryRewardableTopicsResponse: MessageFns<QueryRewardableTopicsResponse>;
export declare const QueryGetInfererScoreEmaRequest: MessageFns<QueryGetInfererScoreEmaRequest>;
export declare const QueryGetInfererScoreEmaResponse: MessageFns<QueryGetInfererScoreEmaResponse>;
export declare const QueryGetForecasterScoreEmaRequest: MessageFns<QueryGetForecasterScoreEmaRequest>;
export declare const QueryGetForecasterScoreEmaResponse: MessageFns<QueryGetForecasterScoreEmaResponse>;
export declare const QueryGetReputerScoreEmaRequest: MessageFns<QueryGetReputerScoreEmaRequest>;
export declare const QueryGetReputerScoreEmaResponse: MessageFns<QueryGetReputerScoreEmaResponse>;
export declare const QueryInferenceScoresUntilBlockRequest: MessageFns<QueryInferenceScoresUntilBlockRequest>;
export declare const QueryInferenceScoresUntilBlockResponse: MessageFns<QueryInferenceScoresUntilBlockResponse>;
export declare const QueryGetPreviousTopicQuantileForecasterScoreEmaRequest: MessageFns<QueryGetPreviousTopicQuantileForecasterScoreEmaRequest>;
export declare const QueryGetPreviousTopicQuantileForecasterScoreEmaResponse: MessageFns<QueryGetPreviousTopicQuantileForecasterScoreEmaResponse>;
export declare const QueryGetPreviousTopicQuantileInfererScoreEmaRequest: MessageFns<QueryGetPreviousTopicQuantileInfererScoreEmaRequest>;
export declare const QueryGetPreviousTopicQuantileInfererScoreEmaResponse: MessageFns<QueryGetPreviousTopicQuantileInfererScoreEmaResponse>;
export declare const QueryGetPreviousTopicQuantileReputerScoreEmaRequest: MessageFns<QueryGetPreviousTopicQuantileReputerScoreEmaRequest>;
export declare const QueryGetPreviousTopicQuantileReputerScoreEmaResponse: MessageFns<QueryGetPreviousTopicQuantileReputerScoreEmaResponse>;
export declare const QueryWorkerInferenceScoresAtBlockRequest: MessageFns<QueryWorkerInferenceScoresAtBlockRequest>;
export declare const QueryWorkerInferenceScoresAtBlockResponse: MessageFns<QueryWorkerInferenceScoresAtBlockResponse>;
export declare const QueryCurrentLowestInfererScoreRequest: MessageFns<QueryCurrentLowestInfererScoreRequest>;
export declare const QueryCurrentLowestInfererScoreResponse: MessageFns<QueryCurrentLowestInfererScoreResponse>;
export declare const QueryForecastScoresUntilBlockRequest: MessageFns<QueryForecastScoresUntilBlockRequest>;
export declare const QueryForecastScoresUntilBlockResponse: MessageFns<QueryForecastScoresUntilBlockResponse>;
export declare const QueryWorkerForecastScoresAtBlockRequest: MessageFns<QueryWorkerForecastScoresAtBlockRequest>;
export declare const QueryWorkerForecastScoresAtBlockResponse: MessageFns<QueryWorkerForecastScoresAtBlockResponse>;
export declare const QueryCurrentLowestForecasterScoreRequest: MessageFns<QueryCurrentLowestForecasterScoreRequest>;
export declare const QueryCurrentLowestForecasterScoreResponse: MessageFns<QueryCurrentLowestForecasterScoreResponse>;
export declare const QueryReputersScoresAtBlockRequest: MessageFns<QueryReputersScoresAtBlockRequest>;
export declare const QueryReputersScoresAtBlockResponse: MessageFns<QueryReputersScoresAtBlockResponse>;
export declare const QueryCurrentLowestReputerScoreRequest: MessageFns<QueryCurrentLowestReputerScoreRequest>;
export declare const QueryCurrentLowestReputerScoreResponse: MessageFns<QueryCurrentLowestReputerScoreResponse>;
export declare const QueryListeningCoefficientRequest: MessageFns<QueryListeningCoefficientRequest>;
export declare const QueryListeningCoefficientResponse: MessageFns<QueryListeningCoefficientResponse>;
export declare const QueryPreviousReputerRewardFractionRequest: MessageFns<QueryPreviousReputerRewardFractionRequest>;
export declare const QueryPreviousReputerRewardFractionResponse: MessageFns<QueryPreviousReputerRewardFractionResponse>;
export declare const QueryPreviousInferenceRewardFractionRequest: MessageFns<QueryPreviousInferenceRewardFractionRequest>;
export declare const QueryPreviousInferenceRewardFractionResponse: MessageFns<QueryPreviousInferenceRewardFractionResponse>;
export declare const QueryPreviousForecastRewardFractionRequest: MessageFns<QueryPreviousForecastRewardFractionRequest>;
export declare const QueryPreviousForecastRewardFractionResponse: MessageFns<QueryPreviousForecastRewardFractionResponse>;
export declare const QueryPreviousPercentageRewardToStakedReputersRequest: MessageFns<QueryPreviousPercentageRewardToStakedReputersRequest>;
export declare const QueryPreviousPercentageRewardToStakedReputersResponse: MessageFns<QueryPreviousPercentageRewardToStakedReputersResponse>;
export declare const QueryTotalRewardToDistributeRequest: MessageFns<QueryTotalRewardToDistributeRequest>;
export declare const QueryTotalRewardToDistributeResponse: MessageFns<QueryTotalRewardToDistributeResponse>;
export declare const QueryActiveTopicsAtBlockRequest: MessageFns<QueryActiveTopicsAtBlockRequest>;
export declare const QueryActiveTopicsAtBlockResponse: MessageFns<QueryActiveTopicsAtBlockResponse>;
export declare const QueryNextChurningBlockByTopicIdRequest: MessageFns<QueryNextChurningBlockByTopicIdRequest>;
export declare const QueryNextChurningBlockByTopicIdResponse: MessageFns<QueryNextChurningBlockByTopicIdResponse>;
/** Msg defines the module Msg service. */
export interface Query {
    /** Params returns the module parameters. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    GetNextTopicId(request: QueryNextTopicIdRequest): Promise<QueryNextTopicIdResponse>;
    GetTopic(request: QueryTopicRequest): Promise<QueryTopicResponse>;
    GetWorkerLatestInferenceByTopicId(request: QueryWorkerLatestInferenceRequest): Promise<QueryWorkerLatestInferenceResponse>;
    GetInferencesAtBlock(request: QueryInferencesAtBlockRequest): Promise<QueryInferencesAtBlockResponse>;
    GetLatestTopicInferences(request: QueryLatestTopicInferencesRequest): Promise<QueryLatestTopicInferencesResponse>;
    GetForecastsAtBlock(request: QueryForecastsAtBlockRequest): Promise<QueryForecastsAtBlockResponse>;
    GetNetworkLossBundleAtBlock(request: QueryNetworkLossBundleAtBlockRequest): Promise<QueryNetworkLossBundleAtBlockResponse>;
    GetTotalStake(request: QueryTotalStakeRequest): Promise<QueryTotalStakeResponse>;
    GetReputerStakeInTopic(request: QueryReputerStakeInTopicRequest): Promise<QueryReputerStakeInTopicResponse>;
    GetMultiReputerStakeInTopic(request: QueryMultiReputerStakeInTopicRequest): Promise<QueryMultiReputerStakeInTopicResponse>;
    GetStakeFromReputerInTopicInSelf(request: QueryStakeFromReputerInTopicInSelfRequest): Promise<QueryStakeFromReputerInTopicInSelfResponse>;
    GetDelegateStakeInTopicInReputer(request: QueryDelegateStakeInTopicInReputerRequest): Promise<QueryDelegateStakeInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopicInReputer(request: QueryStakeFromDelegatorInTopicInReputerRequest): Promise<QueryStakeFromDelegatorInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopic(request: QueryStakeFromDelegatorInTopicRequest): Promise<QueryStakeFromDelegatorInTopicResponse>;
    GetTopicStake(request: QueryTopicStakeRequest): Promise<QueryTopicStakeResponse>;
    GetStakeRemovalsUpUntilBlock(request: QueryStakeRemovalsUpUntilBlockRequest): Promise<QueryStakeRemovalsUpUntilBlockResponse>;
    GetDelegateStakeRemovalsUpUntilBlock(request: QueryDelegateStakeRemovalsUpUntilBlockRequest): Promise<QueryDelegateStakeRemovalsUpUntilBlockResponse>;
    GetStakeRemovalInfo(request: QueryStakeRemovalInfoRequest): Promise<QueryStakeRemovalInfoResponse>;
    GetDelegateStakeRemovalInfo(request: QueryDelegateStakeRemovalInfoRequest): Promise<QueryDelegateStakeRemovalInfoResponse>;
    GetWorkerNodeInfo(request: QueryWorkerNodeInfoRequest): Promise<QueryWorkerNodeInfoResponse>;
    GetReputerNodeInfo(request: QueryReputerNodeInfoRequest): Promise<QueryReputerNodeInfoResponse>;
    IsWorkerRegisteredInTopicId(request: QueryIsWorkerRegisteredInTopicIdRequest): Promise<QueryIsWorkerRegisteredInTopicIdResponse>;
    IsReputerRegisteredInTopicId(request: QueryIsReputerRegisteredInTopicIdRequest): Promise<QueryIsReputerRegisteredInTopicIdResponse>;
    GetNetworkInferencesAtBlock(request: QueryNetworkInferencesAtBlockRequest): Promise<QueryNetworkInferencesAtBlockResponse>;
    GetLatestNetworkInference(request: QueryLatestNetworkInferencesRequest): Promise<QueryLatestNetworkInferencesResponse>;
    GetLatestAvailableNetworkInference(request: QueryLatestAvailableNetworkInferencesRequest): Promise<QueryLatestAvailableNetworkInferencesResponse>;
    IsWorkerNonceUnfulfilled(request: QueryIsWorkerNonceUnfulfilledRequest): Promise<QueryIsWorkerNonceUnfulfilledResponse>;
    IsReputerNonceUnfulfilled(request: QueryIsReputerNonceUnfulfilledRequest): Promise<QueryIsReputerNonceUnfulfilledResponse>;
    GetUnfulfilledWorkerNonces(request: QueryUnfulfilledWorkerNoncesRequest): Promise<QueryUnfulfilledWorkerNoncesResponse>;
    GetUnfulfilledReputerNonces(request: QueryUnfulfilledReputerNoncesRequest): Promise<QueryUnfulfilledReputerNoncesResponse>;
    GetInfererNetworkRegret(request: QueryInfererNetworkRegretRequest): Promise<QueryInfererNetworkRegretResponse>;
    GetForecasterNetworkRegret(request: QueryForecasterNetworkRegretRequest): Promise<QueryForecasterNetworkRegretResponse>;
    GetOneInForecasterNetworkRegret(request: QueryOneInForecasterNetworkRegretRequest): Promise<QueryOneInForecasterNetworkRegretResponse>;
    IsWhitelistAdmin(request: QueryIsWhitelistAdminRequest): Promise<QueryIsWhitelistAdminResponse>;
    GetTopicLastWorkerCommitInfo(request: QueryTopicLastWorkerCommitInfoRequest): Promise<QueryTopicLastWorkerCommitInfoResponse>;
    GetTopicLastReputerCommitInfo(request: QueryTopicLastReputerCommitInfoRequest): Promise<QueryTopicLastReputerCommitInfoResponse>;
    GetTopicRewardNonce(request: QueryTopicRewardNonceRequest): Promise<QueryTopicRewardNonceResponse>;
    GetReputerLossBundlesAtBlock(request: QueryReputerLossBundlesAtBlockRequest): Promise<QueryReputerLossBundlesAtBlockResponse>;
    GetStakeReputerAuthority(request: QueryStakeReputerAuthorityRequest): Promise<QueryStakeReputerAuthorityResponse>;
    GetDelegateStakePlacement(request: QueryDelegateStakePlacementRequest): Promise<QueryDelegateStakePlacementResponse>;
    GetDelegateStakeUponReputer(request: QueryDelegateStakeUponReputerRequest): Promise<QueryDelegateStakeUponReputerResponse>;
    GetDelegateRewardPerShare(request: QueryDelegateRewardPerShareRequest): Promise<QueryDelegateRewardPerShareResponse>;
    GetStakeRemovalForReputerAndTopicId(request: QueryStakeRemovalForReputerAndTopicIdRequest): Promise<QueryStakeRemovalForReputerAndTopicIdResponse>;
    GetDelegateStakeRemoval(request: QueryDelegateStakeRemovalRequest): Promise<QueryDelegateStakeRemovalResponse>;
    GetPreviousTopicWeight(request: QueryPreviousTopicWeightRequest): Promise<QueryPreviousTopicWeightResponse>;
    TopicExists(request: QueryTopicExistsRequest): Promise<QueryTopicExistsResponse>;
    IsTopicActive(request: QueryIsTopicActiveRequest): Promise<QueryIsTopicActiveResponse>;
    GetTopicFeeRevenue(request: QueryTopicFeeRevenueRequest): Promise<QueryTopicFeeRevenueResponse>;
    GetRewardableTopics(request: QueryRewardableTopicsRequest): Promise<QueryRewardableTopicsResponse>;
    GetInfererScoreEma(request: QueryGetInfererScoreEmaRequest): Promise<QueryGetInfererScoreEmaResponse>;
    GetForecasterScoreEma(request: QueryGetForecasterScoreEmaRequest): Promise<QueryGetForecasterScoreEmaResponse>;
    GetReputerScoreEma(request: QueryGetReputerScoreEmaRequest): Promise<QueryGetReputerScoreEmaResponse>;
    GetInferenceScoresUntilBlock(request: QueryInferenceScoresUntilBlockRequest): Promise<QueryInferenceScoresUntilBlockResponse>;
    GetPreviousTopicQuantileForecasterScoreEma(request: QueryGetPreviousTopicQuantileForecasterScoreEmaRequest): Promise<QueryGetPreviousTopicQuantileForecasterScoreEmaResponse>;
    GetPreviousTopicQuantileInfererScoreEma(request: QueryGetPreviousTopicQuantileInfererScoreEmaRequest): Promise<QueryGetPreviousTopicQuantileInfererScoreEmaResponse>;
    GetPreviousTopicQuantileReputerScoreEma(request: QueryGetPreviousTopicQuantileReputerScoreEmaRequest): Promise<QueryGetPreviousTopicQuantileReputerScoreEmaResponse>;
    GetWorkerInferenceScoresAtBlock(request: QueryWorkerInferenceScoresAtBlockRequest): Promise<QueryWorkerInferenceScoresAtBlockResponse>;
    GetCurrentLowestInfererScore(request: QueryCurrentLowestInfererScoreRequest): Promise<QueryCurrentLowestInfererScoreResponse>;
    GetForecastScoresUntilBlock(request: QueryForecastScoresUntilBlockRequest): Promise<QueryForecastScoresUntilBlockResponse>;
    GetWorkerForecastScoresAtBlock(request: QueryWorkerForecastScoresAtBlockRequest): Promise<QueryWorkerForecastScoresAtBlockResponse>;
    GetCurrentLowestForecasterScore(request: QueryCurrentLowestForecasterScoreRequest): Promise<QueryCurrentLowestForecasterScoreResponse>;
    GetReputersScoresAtBlock(request: QueryReputersScoresAtBlockRequest): Promise<QueryReputersScoresAtBlockResponse>;
    GetCurrentLowestReputerScore(request: QueryCurrentLowestReputerScoreRequest): Promise<QueryCurrentLowestReputerScoreResponse>;
    GetListeningCoefficient(request: QueryListeningCoefficientRequest): Promise<QueryListeningCoefficientResponse>;
    GetPreviousReputerRewardFraction(request: QueryPreviousReputerRewardFractionRequest): Promise<QueryPreviousReputerRewardFractionResponse>;
    GetPreviousInferenceRewardFraction(request: QueryPreviousInferenceRewardFractionRequest): Promise<QueryPreviousInferenceRewardFractionResponse>;
    GetPreviousForecastRewardFraction(request: QueryPreviousForecastRewardFractionRequest): Promise<QueryPreviousForecastRewardFractionResponse>;
    GetPreviousPercentageRewardToStakedReputers(request: QueryPreviousPercentageRewardToStakedReputersRequest): Promise<QueryPreviousPercentageRewardToStakedReputersResponse>;
    GetTotalRewardToDistribute(request: QueryTotalRewardToDistributeRequest): Promise<QueryTotalRewardToDistributeResponse>;
    GetNaiveInfererNetworkRegret(request: QueryNaiveInfererNetworkRegretRequest): Promise<QueryNaiveInfererNetworkRegretResponse>;
    GetOneOutInfererInfererNetworkRegret(request: QueryOneOutInfererInfererNetworkRegretRequest): Promise<QueryOneOutInfererInfererNetworkRegretResponse>;
    GetOneOutInfererForecasterNetworkRegret(request: QueryOneOutInfererForecasterNetworkRegretRequest): Promise<QueryOneOutInfererForecasterNetworkRegretResponse>;
    GetOneOutForecasterInfererNetworkRegret(request: QueryOneOutForecasterInfererNetworkRegretRequest): Promise<QueryOneOutForecasterInfererNetworkRegretResponse>;
    GetOneOutForecasterForecasterNetworkRegret(request: QueryOneOutForecasterForecasterNetworkRegretRequest): Promise<QueryOneOutForecasterForecasterNetworkRegretResponse>;
    GetActiveTopicsAtBlock(request: QueryActiveTopicsAtBlockRequest): Promise<QueryActiveTopicsAtBlockResponse>;
    GetNextChurningBlockByTopicId(request: QueryNextChurningBlockByTopicIdRequest): Promise<QueryNextChurningBlockByTopicIdResponse>;
}
export declare const QueryServiceName = "emissions.v3.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    GetNextTopicId(request: QueryNextTopicIdRequest): Promise<QueryNextTopicIdResponse>;
    GetTopic(request: QueryTopicRequest): Promise<QueryTopicResponse>;
    GetWorkerLatestInferenceByTopicId(request: QueryWorkerLatestInferenceRequest): Promise<QueryWorkerLatestInferenceResponse>;
    GetInferencesAtBlock(request: QueryInferencesAtBlockRequest): Promise<QueryInferencesAtBlockResponse>;
    GetLatestTopicInferences(request: QueryLatestTopicInferencesRequest): Promise<QueryLatestTopicInferencesResponse>;
    GetForecastsAtBlock(request: QueryForecastsAtBlockRequest): Promise<QueryForecastsAtBlockResponse>;
    GetNetworkLossBundleAtBlock(request: QueryNetworkLossBundleAtBlockRequest): Promise<QueryNetworkLossBundleAtBlockResponse>;
    GetTotalStake(request: QueryTotalStakeRequest): Promise<QueryTotalStakeResponse>;
    GetReputerStakeInTopic(request: QueryReputerStakeInTopicRequest): Promise<QueryReputerStakeInTopicResponse>;
    GetMultiReputerStakeInTopic(request: QueryMultiReputerStakeInTopicRequest): Promise<QueryMultiReputerStakeInTopicResponse>;
    GetStakeFromReputerInTopicInSelf(request: QueryStakeFromReputerInTopicInSelfRequest): Promise<QueryStakeFromReputerInTopicInSelfResponse>;
    GetDelegateStakeInTopicInReputer(request: QueryDelegateStakeInTopicInReputerRequest): Promise<QueryDelegateStakeInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopicInReputer(request: QueryStakeFromDelegatorInTopicInReputerRequest): Promise<QueryStakeFromDelegatorInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopic(request: QueryStakeFromDelegatorInTopicRequest): Promise<QueryStakeFromDelegatorInTopicResponse>;
    GetTopicStake(request: QueryTopicStakeRequest): Promise<QueryTopicStakeResponse>;
    GetStakeRemovalsUpUntilBlock(request: QueryStakeRemovalsUpUntilBlockRequest): Promise<QueryStakeRemovalsUpUntilBlockResponse>;
    GetDelegateStakeRemovalsUpUntilBlock(request: QueryDelegateStakeRemovalsUpUntilBlockRequest): Promise<QueryDelegateStakeRemovalsUpUntilBlockResponse>;
    GetStakeRemovalInfo(request: QueryStakeRemovalInfoRequest): Promise<QueryStakeRemovalInfoResponse>;
    GetDelegateStakeRemovalInfo(request: QueryDelegateStakeRemovalInfoRequest): Promise<QueryDelegateStakeRemovalInfoResponse>;
    GetWorkerNodeInfo(request: QueryWorkerNodeInfoRequest): Promise<QueryWorkerNodeInfoResponse>;
    GetReputerNodeInfo(request: QueryReputerNodeInfoRequest): Promise<QueryReputerNodeInfoResponse>;
    IsWorkerRegisteredInTopicId(request: QueryIsWorkerRegisteredInTopicIdRequest): Promise<QueryIsWorkerRegisteredInTopicIdResponse>;
    IsReputerRegisteredInTopicId(request: QueryIsReputerRegisteredInTopicIdRequest): Promise<QueryIsReputerRegisteredInTopicIdResponse>;
    GetNetworkInferencesAtBlock(request: QueryNetworkInferencesAtBlockRequest): Promise<QueryNetworkInferencesAtBlockResponse>;
    GetLatestNetworkInference(request: QueryLatestNetworkInferencesRequest): Promise<QueryLatestNetworkInferencesResponse>;
    GetLatestAvailableNetworkInference(request: QueryLatestAvailableNetworkInferencesRequest): Promise<QueryLatestAvailableNetworkInferencesResponse>;
    IsWorkerNonceUnfulfilled(request: QueryIsWorkerNonceUnfulfilledRequest): Promise<QueryIsWorkerNonceUnfulfilledResponse>;
    IsReputerNonceUnfulfilled(request: QueryIsReputerNonceUnfulfilledRequest): Promise<QueryIsReputerNonceUnfulfilledResponse>;
    GetUnfulfilledWorkerNonces(request: QueryUnfulfilledWorkerNoncesRequest): Promise<QueryUnfulfilledWorkerNoncesResponse>;
    GetUnfulfilledReputerNonces(request: QueryUnfulfilledReputerNoncesRequest): Promise<QueryUnfulfilledReputerNoncesResponse>;
    GetInfererNetworkRegret(request: QueryInfererNetworkRegretRequest): Promise<QueryInfererNetworkRegretResponse>;
    GetForecasterNetworkRegret(request: QueryForecasterNetworkRegretRequest): Promise<QueryForecasterNetworkRegretResponse>;
    GetOneInForecasterNetworkRegret(request: QueryOneInForecasterNetworkRegretRequest): Promise<QueryOneInForecasterNetworkRegretResponse>;
    IsWhitelistAdmin(request: QueryIsWhitelistAdminRequest): Promise<QueryIsWhitelistAdminResponse>;
    GetTopicLastWorkerCommitInfo(request: QueryTopicLastWorkerCommitInfoRequest): Promise<QueryTopicLastWorkerCommitInfoResponse>;
    GetTopicLastReputerCommitInfo(request: QueryTopicLastReputerCommitInfoRequest): Promise<QueryTopicLastReputerCommitInfoResponse>;
    GetTopicRewardNonce(request: QueryTopicRewardNonceRequest): Promise<QueryTopicRewardNonceResponse>;
    GetReputerLossBundlesAtBlock(request: QueryReputerLossBundlesAtBlockRequest): Promise<QueryReputerLossBundlesAtBlockResponse>;
    GetStakeReputerAuthority(request: QueryStakeReputerAuthorityRequest): Promise<QueryStakeReputerAuthorityResponse>;
    GetDelegateStakePlacement(request: QueryDelegateStakePlacementRequest): Promise<QueryDelegateStakePlacementResponse>;
    GetDelegateStakeUponReputer(request: QueryDelegateStakeUponReputerRequest): Promise<QueryDelegateStakeUponReputerResponse>;
    GetDelegateRewardPerShare(request: QueryDelegateRewardPerShareRequest): Promise<QueryDelegateRewardPerShareResponse>;
    GetStakeRemovalForReputerAndTopicId(request: QueryStakeRemovalForReputerAndTopicIdRequest): Promise<QueryStakeRemovalForReputerAndTopicIdResponse>;
    GetDelegateStakeRemoval(request: QueryDelegateStakeRemovalRequest): Promise<QueryDelegateStakeRemovalResponse>;
    GetPreviousTopicWeight(request: QueryPreviousTopicWeightRequest): Promise<QueryPreviousTopicWeightResponse>;
    TopicExists(request: QueryTopicExistsRequest): Promise<QueryTopicExistsResponse>;
    IsTopicActive(request: QueryIsTopicActiveRequest): Promise<QueryIsTopicActiveResponse>;
    GetTopicFeeRevenue(request: QueryTopicFeeRevenueRequest): Promise<QueryTopicFeeRevenueResponse>;
    GetRewardableTopics(request: QueryRewardableTopicsRequest): Promise<QueryRewardableTopicsResponse>;
    GetInfererScoreEma(request: QueryGetInfererScoreEmaRequest): Promise<QueryGetInfererScoreEmaResponse>;
    GetForecasterScoreEma(request: QueryGetForecasterScoreEmaRequest): Promise<QueryGetForecasterScoreEmaResponse>;
    GetReputerScoreEma(request: QueryGetReputerScoreEmaRequest): Promise<QueryGetReputerScoreEmaResponse>;
    GetInferenceScoresUntilBlock(request: QueryInferenceScoresUntilBlockRequest): Promise<QueryInferenceScoresUntilBlockResponse>;
    GetPreviousTopicQuantileForecasterScoreEma(request: QueryGetPreviousTopicQuantileForecasterScoreEmaRequest): Promise<QueryGetPreviousTopicQuantileForecasterScoreEmaResponse>;
    GetPreviousTopicQuantileInfererScoreEma(request: QueryGetPreviousTopicQuantileInfererScoreEmaRequest): Promise<QueryGetPreviousTopicQuantileInfererScoreEmaResponse>;
    GetPreviousTopicQuantileReputerScoreEma(request: QueryGetPreviousTopicQuantileReputerScoreEmaRequest): Promise<QueryGetPreviousTopicQuantileReputerScoreEmaResponse>;
    GetWorkerInferenceScoresAtBlock(request: QueryWorkerInferenceScoresAtBlockRequest): Promise<QueryWorkerInferenceScoresAtBlockResponse>;
    GetCurrentLowestInfererScore(request: QueryCurrentLowestInfererScoreRequest): Promise<QueryCurrentLowestInfererScoreResponse>;
    GetForecastScoresUntilBlock(request: QueryForecastScoresUntilBlockRequest): Promise<QueryForecastScoresUntilBlockResponse>;
    GetWorkerForecastScoresAtBlock(request: QueryWorkerForecastScoresAtBlockRequest): Promise<QueryWorkerForecastScoresAtBlockResponse>;
    GetCurrentLowestForecasterScore(request: QueryCurrentLowestForecasterScoreRequest): Promise<QueryCurrentLowestForecasterScoreResponse>;
    GetReputersScoresAtBlock(request: QueryReputersScoresAtBlockRequest): Promise<QueryReputersScoresAtBlockResponse>;
    GetCurrentLowestReputerScore(request: QueryCurrentLowestReputerScoreRequest): Promise<QueryCurrentLowestReputerScoreResponse>;
    GetListeningCoefficient(request: QueryListeningCoefficientRequest): Promise<QueryListeningCoefficientResponse>;
    GetPreviousReputerRewardFraction(request: QueryPreviousReputerRewardFractionRequest): Promise<QueryPreviousReputerRewardFractionResponse>;
    GetPreviousInferenceRewardFraction(request: QueryPreviousInferenceRewardFractionRequest): Promise<QueryPreviousInferenceRewardFractionResponse>;
    GetPreviousForecastRewardFraction(request: QueryPreviousForecastRewardFractionRequest): Promise<QueryPreviousForecastRewardFractionResponse>;
    GetPreviousPercentageRewardToStakedReputers(request: QueryPreviousPercentageRewardToStakedReputersRequest): Promise<QueryPreviousPercentageRewardToStakedReputersResponse>;
    GetTotalRewardToDistribute(request: QueryTotalRewardToDistributeRequest): Promise<QueryTotalRewardToDistributeResponse>;
    GetNaiveInfererNetworkRegret(request: QueryNaiveInfererNetworkRegretRequest): Promise<QueryNaiveInfererNetworkRegretResponse>;
    GetOneOutInfererInfererNetworkRegret(request: QueryOneOutInfererInfererNetworkRegretRequest): Promise<QueryOneOutInfererInfererNetworkRegretResponse>;
    GetOneOutInfererForecasterNetworkRegret(request: QueryOneOutInfererForecasterNetworkRegretRequest): Promise<QueryOneOutInfererForecasterNetworkRegretResponse>;
    GetOneOutForecasterInfererNetworkRegret(request: QueryOneOutForecasterInfererNetworkRegretRequest): Promise<QueryOneOutForecasterInfererNetworkRegretResponse>;
    GetOneOutForecasterForecasterNetworkRegret(request: QueryOneOutForecasterForecasterNetworkRegretRequest): Promise<QueryOneOutForecasterForecasterNetworkRegretResponse>;
    GetActiveTopicsAtBlock(request: QueryActiveTopicsAtBlockRequest): Promise<QueryActiveTopicsAtBlockResponse>;
    GetNextChurningBlockByTopicId(request: QueryNextChurningBlockByTopicIdRequest): Promise<QueryNextChurningBlockByTopicIdResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=query.d.ts.map
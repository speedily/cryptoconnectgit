"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: mint/v2/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEcosystemTokenMintSet = exports.EventTokenomicsSet = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "mint.v2";
function createBaseEventTokenomicsSet() {
    return { stakedTokenAmount: "", circulatingSupply: "", emissionsAmount: "" };
}
exports.EventTokenomicsSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stakedTokenAmount !== "") {
            writer.uint32(10).string(message.stakedTokenAmount);
        }
        if (message.circulatingSupply !== "") {
            writer.uint32(18).string(message.circulatingSupply);
        }
        if (message.emissionsAmount !== "") {
            writer.uint32(26).string(message.emissionsAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTokenomicsSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakedTokenAmount = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.circulatingSupply = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.emissionsAmount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stakedTokenAmount: isSet(object.stakedTokenAmount) ? globalThis.String(object.stakedTokenAmount) : "",
            circulatingSupply: isSet(object.circulatingSupply) ? globalThis.String(object.circulatingSupply) : "",
            emissionsAmount: isSet(object.emissionsAmount) ? globalThis.String(object.emissionsAmount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stakedTokenAmount !== "") {
            obj.stakedTokenAmount = message.stakedTokenAmount;
        }
        if (message.circulatingSupply !== "") {
            obj.circulatingSupply = message.circulatingSupply;
        }
        if (message.emissionsAmount !== "") {
            obj.emissionsAmount = message.emissionsAmount;
        }
        return obj;
    },
    create(base) {
        return exports.EventTokenomicsSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventTokenomicsSet();
        message.stakedTokenAmount = (_a = object.stakedTokenAmount) !== null && _a !== void 0 ? _a : "";
        message.circulatingSupply = (_b = object.circulatingSupply) !== null && _b !== void 0 ? _b : "";
        message.emissionsAmount = (_c = object.emissionsAmount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventEcosystemTokenMintSet() {
    return { blockHeight: "0", tokenAmount: "" };
}
exports.EventEcosystemTokenMintSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).uint64(message.blockHeight);
        }
        if (message.tokenAmount !== "") {
            writer.uint32(18).string(message.tokenAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEcosystemTokenMintSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenAmount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            tokenAmount: isSet(object.tokenAmount) ? globalThis.String(object.tokenAmount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.tokenAmount !== "") {
            obj.tokenAmount = message.tokenAmount;
        }
        return obj;
    },
    create(base) {
        return exports.EventEcosystemTokenMintSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventEcosystemTokenMintSet();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.tokenAmount = (_b = object.tokenAmount) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

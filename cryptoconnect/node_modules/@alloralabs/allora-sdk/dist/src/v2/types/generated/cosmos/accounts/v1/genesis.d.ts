import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "cosmos.accounts.v1";
/** GenesisState defines the accounts' module's genesis state. */
export interface GenesisState {
    /** account_number is the latest account number. */
    accountNumber: string;
    /** accounts are the genesis accounts. */
    accounts: GenesisAccount[];
}
/** GenesisAccount defines an account to be initialized in the genesis state. */
export interface GenesisAccount {
    /** address is the address of the account. */
    address: string;
    /** account_type is the account type of the account. */
    accountType: string;
    /** account_number is the account number of the account. */
    accountNumber: string;
    /** state is the account state represented as a slice of raw key value byte pairs. */
    state: KVPair[];
}
/** KVPair defines a key value pair. */
export interface KVPair {
    /** key is the key of the pair. */
    key: Uint8Array;
    /** value is the value of the pair. */
    value: Uint8Array;
}
export declare const GenesisState: MessageFns<GenesisState>;
export declare const GenesisAccount: MessageFns<GenesisAccount>;
export declare const KVPair: MessageFns<KVPair>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=genesis.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../base/v1beta1/coin";
export declare const protobufPackage = "cosmos.gov.v1";
/** Since: cosmos-sdk 0.46 */
/**
 * ProposalType enumerates the valid proposal types.
 * All proposal types are v1.Proposal which have different voting periods or tallying logic.
 */
export declare enum ProposalType {
    /** PROPOSAL_TYPE_UNSPECIFIED - PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD. */
    PROPOSAL_TYPE_UNSPECIFIED = 0,
    /** PROPOSAL_TYPE_STANDARD - PROPOSAL_TYPE_STANDARD defines the type for a standard proposal. */
    PROPOSAL_TYPE_STANDARD = 1,
    /** PROPOSAL_TYPE_MULTIPLE_CHOICE - PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal. */
    PROPOSAL_TYPE_MULTIPLE_CHOICE = 2,
    /** PROPOSAL_TYPE_OPTIMISTIC - PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal. */
    PROPOSAL_TYPE_OPTIMISTIC = 3,
    /** PROPOSAL_TYPE_EXPEDITED - PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal. */
    PROPOSAL_TYPE_EXPEDITED = 4,
    UNRECOGNIZED = -1
}
export declare function proposalTypeFromJSON(object: any): ProposalType;
export declare function proposalTypeToJSON(object: ProposalType): string;
/** VoteOption enumerates the valid vote options for a given governance proposal. */
export declare enum VoteOption {
    /** VOTE_OPTION_UNSPECIFIED - VOTE_OPTION_UNSPECIFIED defines a no-op vote option. */
    VOTE_OPTION_UNSPECIFIED = 0,
    /** VOTE_OPTION_ONE - VOTE_OPTION_ONE defines the first proposal vote option. */
    VOTE_OPTION_ONE = 1,
    /** VOTE_OPTION_YES - VOTE_OPTION_YES defines the yes proposal vote option. */
    VOTE_OPTION_YES = 1,
    /** VOTE_OPTION_TWO - VOTE_OPTION_TWO defines the second proposal vote option. */
    VOTE_OPTION_TWO = 2,
    /** VOTE_OPTION_ABSTAIN - VOTE_OPTION_ABSTAIN defines the abstain proposal vote option. */
    VOTE_OPTION_ABSTAIN = 2,
    /** VOTE_OPTION_THREE - VOTE_OPTION_THREE defines the third proposal vote option. */
    VOTE_OPTION_THREE = 3,
    /** VOTE_OPTION_NO - VOTE_OPTION_NO defines the no proposal vote option. */
    VOTE_OPTION_NO = 3,
    /** VOTE_OPTION_FOUR - VOTE_OPTION_FOUR defines the fourth proposal vote option. */
    VOTE_OPTION_FOUR = 4,
    /** VOTE_OPTION_NO_WITH_VETO - VOTE_OPTION_NO_WITH_VETO defines the no with veto proposal vote option. */
    VOTE_OPTION_NO_WITH_VETO = 4,
    /** VOTE_OPTION_SPAM - VOTE_OPTION_SPAM defines the spam proposal vote option. */
    VOTE_OPTION_SPAM = 5,
    UNRECOGNIZED = -1
}
export declare function voteOptionFromJSON(object: any): VoteOption;
export declare function voteOptionToJSON(object: VoteOption): string;
/** ProposalStatus enumerates the valid statuses of a proposal. */
export declare enum ProposalStatus {
    /** PROPOSAL_STATUS_UNSPECIFIED - PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status. */
    PROPOSAL_STATUS_UNSPECIFIED = 0,
    /**
     * PROPOSAL_STATUS_DEPOSIT_PERIOD - PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
     * period.
     */
    PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
    /**
     * PROPOSAL_STATUS_VOTING_PERIOD - PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
     * period.
     */
    PROPOSAL_STATUS_VOTING_PERIOD = 2,
    /**
     * PROPOSAL_STATUS_PASSED - PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
     * passed.
     */
    PROPOSAL_STATUS_PASSED = 3,
    /**
     * PROPOSAL_STATUS_REJECTED - PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
     * been rejected.
     */
    PROPOSAL_STATUS_REJECTED = 4,
    /**
     * PROPOSAL_STATUS_FAILED - PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
     * failed.
     */
    PROPOSAL_STATUS_FAILED = 5,
    UNRECOGNIZED = -1
}
export declare function proposalStatusFromJSON(object: any): ProposalStatus;
export declare function proposalStatusToJSON(object: ProposalStatus): string;
/** WeightedVoteOption defines a unit of vote for vote split. */
export interface WeightedVoteOption {
    /** option defines the valid vote options, it must not contain duplicate vote options. */
    option: VoteOption;
    /** weight is the vote weight associated with the vote option. */
    weight: string;
}
/**
 * Deposit defines an amount deposited by an account address to an active
 * proposal.
 */
export interface Deposit {
    /** proposal_id defines the unique id of the proposal. */
    proposalId: string;
    /** depositor defines the deposit addresses from the proposals. */
    depositor: string;
    /** amount to be deposited by depositor. */
    amount: Coin[];
}
/** Proposal defines the core field members of a governance proposal. */
export interface Proposal {
    /** id defines the unique id of the proposal. */
    id: string;
    /** messages are the arbitrary messages to be executed if the proposal passes. */
    messages: Any[];
    /** status defines the proposal status. */
    status: ProposalStatus;
    /**
     * final_tally_result is the final tally result of the proposal. When
     * querying a proposal via gRPC, this field is not populated until the
     * proposal's voting period has ended.
     */
    finalTallyResult?: TallyResult | undefined;
    /** submit_time is the time of proposal submission. */
    submitTime?: Date | undefined;
    /** deposit_end_time is the end time for deposition. */
    depositEndTime?: Date | undefined;
    /** total_deposit is the total deposit on the proposal. */
    totalDeposit: Coin[];
    /** voting_start_time is the starting time to vote on a proposal. */
    votingStartTime?: Date | undefined;
    /** voting_end_time is the end time of voting on a proposal. */
    votingEndTime?: Date | undefined;
    /**
     * metadata is any arbitrary metadata attached to the proposal.
     * the recommended format of the metadata is to be found here:
     * https://docs.cosmos.network/v0.47/modules/gov#proposal-3
     */
    metadata: string;
    /**
     * title is the title of the proposal
     *
     * Since: cosmos-sdk 0.47
     */
    title: string;
    /**
     * summary is a short summary of the proposal
     *
     * Since: cosmos-sdk 0.47
     */
    summary: string;
    /**
     * proposer is the address of the proposal sumbitter
     *
     * Since: cosmos-sdk 0.47
     */
    proposer: string;
    /**
     * expedited defines if the proposal is expedited
     *
     * Since: cosmos-sdk 0.50
     * Deprecated: Use ProposalType instead.
     *
     * @deprecated
     */
    expedited: boolean;
    /**
     * failed_reason defines the reason why the proposal failed
     *
     * Since: cosmos-sdk 0.50
     */
    failedReason: string;
    /**
     * proposal_type defines the type of the proposal
     *
     * Since: x/gov v1.0.0
     */
    proposalType: ProposalType;
}
/**
 * ProposalVoteOptions defines the stringified vote options for proposals.
 * This allows to support multiple choice options for a given proposal.
 *
 * Since: x/gov v1.0.0
 */
export interface ProposalVoteOptions {
    /** option_one is the first option of the proposal */
    optionOne: string;
    /** option_two is the second option of the proposal */
    optionTwo: string;
    /** option_three is the third option of the proposal */
    optionThree: string;
    /** option_four is the fourth option of the proposal */
    optionFour: string;
    /** option_spam is always present for all proposals. */
    optionSpam: string;
}
/** TallyResult defines a standard tally for a governance proposal. */
export interface TallyResult {
    /**
     * yes_count is the number of yes votes on a proposal.
     *
     * @deprecated
     */
    yesCount: string;
    /**
     * abstain_count is the number of abstain votes on a proposal.
     *
     * @deprecated
     */
    abstainCount: string;
    /**
     * no_count is the number of no votes on a proposal.
     *
     * @deprecated
     */
    noCount: string;
    /**
     * no_with_veto_count is the number of no with veto votes on a proposal.
     *
     * @deprecated
     */
    noWithVetoCount: string;
    /** option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals). */
    optionOneCount: string;
    /**
     * option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice
     * proposals).
     */
    optionTwoCount: string;
    /**
     * option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice
     * proposals).
     */
    optionThreeCount: string;
    /**
     * option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice
     * proposals).
     */
    optionFourCount: string;
    /** spam_count is the number of spam votes on a proposal. */
    spamCount: string;
}
/**
 * Vote defines a vote on a governance proposal.
 * A Vote consists of a proposal ID, the voter, and the vote option.
 */
export interface Vote {
    /** proposal_id defines the unique id of the proposal. */
    proposalId: string;
    /** voter is the voter address of the proposal. */
    voter: string;
    /** options is the weighted vote options. */
    options: WeightedVoteOption[];
    /**
     * metadata is any arbitrary metadata attached to the vote.
     * the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5
     */
    metadata: string;
}
/**
 * DepositParams defines the params for deposits on governance proposals.
 *
 * @deprecated
 */
export interface DepositParams {
    /** Minimum deposit for a proposal to enter voting period. */
    minDeposit: Coin[];
    /**
     * Maximum period for Atom holders to deposit on a proposal. Initial value: 2
     * months.
     */
    maxDepositPeriod?: Duration | undefined;
}
/**
 * VotingParams defines the params for voting on governance proposals.
 *
 * @deprecated
 */
export interface VotingParams {
    /** Duration of the voting period. */
    votingPeriod?: Duration | undefined;
}
/**
 * TallyParams defines the params for tallying votes on governance proposals.
 *
 * @deprecated
 */
export interface TallyParams {
    /**
     * Minimum percentage of total stake needed to vote for a result to be
     * considered valid.
     */
    quorum: string;
    /** Minimum proportion of Yes votes for proposal to pass. Default value: 0.5. */
    threshold: string;
    /**
     * Minimum value of Veto votes to Total votes ratio for proposal to be
     * vetoed. Default value: 1/3.
     */
    vetoThreshold: string;
}
/**
 * Params defines the parameters for the x/gov module.
 *
 * Since: cosmos-sdk 0.47
 */
export interface Params {
    /** Minimum deposit for a proposal to enter voting period. */
    minDeposit: Coin[];
    /**
     * Maximum period for stake holders to deposit on a proposal. Initial value: 2
     * months.
     */
    maxDepositPeriod?: Duration | undefined;
    /** Duration of the voting period. */
    votingPeriod?: Duration | undefined;
    /**
     * Minimum percentage of total stake needed to vote for a result to be
     *  considered valid.
     */
    quorum: string;
    /** Minimum proportion of Yes votes for proposal to pass. Default value: 0.5. */
    threshold: string;
    /**
     * Minimum value of Veto votes to Total votes ratio for proposal to be
     *  vetoed. Default value: 1/3.
     */
    vetoThreshold: string;
    /** The ratio representing the proportion of the deposit value that must be paid at proposal submission. */
    minInitialDepositRatio: string;
    /**
     * The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.
     *
     * Since: cosmos-sdk 0.50
     */
    proposalCancelRatio: string;
    /**
     * The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.
     * If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.
     *
     * Since: cosmos-sdk 0.50
     */
    proposalCancelDest: string;
    /**
     * Duration of the voting period of an expedited proposal.
     *
     * Since: cosmos-sdk 0.50
     */
    expeditedVotingPeriod?: Duration | undefined;
    /**
     * Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
     *
     * Since: cosmos-sdk 0.50
     */
    expeditedThreshold: string;
    /** Minimum expedited deposit for a proposal to enter voting period. */
    expeditedMinDeposit: Coin[];
    /**
     * burn deposits if a proposal does not meet quorum
     *
     * Since: cosmos-sdk 0.47
     */
    burnVoteQuorum: boolean;
    /**
     * burn deposits if the proposal does not enter voting period
     *
     * Since: cosmos-sdk 0.47
     */
    burnProposalDepositPrevote: boolean;
    /**
     * burn deposits if quorum with vote type no_veto is met
     *
     * Since: cosmos-sdk 0.47
     */
    burnVoteVeto: boolean;
    /**
     * The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.
     * Default value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be
     * required.
     *
     * Since: cosmos-sdk 0.50
     */
    minDepositRatio: string;
    /**
     * proposal_cancel_max_period defines how far in the voting period a proposer can cancel a proposal.
     * If the proposal is cancelled before the max cancel period, the deposit will be returned/burn to the
     * depositors, according to the proposal_cancel_ratio and proposal_cancel_dest parameters.
     * After the max cancel period, the proposal cannot be cancelled anymore.
     *
     * Since: x/gov v1.0.0
     */
    proposalCancelMaxPeriod: string;
    /**
     * optimistic_authorized_addresses is an optional governance parameter that limits the authorized accounts than can
     * submit optimistic proposals
     *
     * Since: x/gov v1.0.0
     */
    optimisticAuthorizedAddresses: string[];
    /**
     * optimistic rejected threshold defines at which percentage of NO votes, the optimistic proposal should fail and be
     * converted to a standard proposal. The threshold is expressed as a percentage of the total bonded tokens.
     *
     * Since: x/gov v1.0.0
     */
    optimisticRejectedThreshold: string;
    /**
     * yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.
     * Default value: 0 (disabled).
     *
     * Since: x/gov v1.0.0
     */
    yesQuorum: string;
}
/**
 * MessageBasedParams defines the parameters of specific messages in a proposal.
 * It is used to define the parameters of a proposal that is based on a specific message.
 * Once a message has message based params, it only supports a standard proposal type.
 *
 * Since: x/gov v1.0.0
 */
export interface MessageBasedParams {
    /** Duration of the voting period. */
    votingPeriod?: Duration | undefined;
    /** Minimum percentage of total stake needed to vote for a result to be considered valid. */
    quorum: string;
    /**
     * yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.
     * If zero then the yes_quorum is disabled.
     */
    yesQuorum: string;
    /** Minimum proportion of Yes votes for proposal to pass. */
    threshold: string;
    /** Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. */
    vetoThreshold: string;
}
export declare const WeightedVoteOption: MessageFns<WeightedVoteOption>;
export declare const Deposit: MessageFns<Deposit>;
export declare const Proposal: MessageFns<Proposal>;
export declare const ProposalVoteOptions: MessageFns<ProposalVoteOptions>;
export declare const TallyResult: MessageFns<TallyResult>;
export declare const Vote: MessageFns<Vote>;
export declare const DepositParams: MessageFns<DepositParams>;
export declare const VotingParams: MessageFns<VotingParams>;
export declare const TallyParams: MessageFns<TallyParams>;
export declare const Params: MessageFns<Params>;
export declare const MessageBasedParams: MessageFns<MessageBasedParams>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=gov.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ValueBundle } from "./reputer";
export declare const protobufPackage = "emissions.v2";
export declare enum ActorType {
    INFERER = 0,
    FORECASTER = 1,
    REPUTER = 2,
    UNRECOGNIZED = -1
}
export declare function actorTypeFromJSON(object: any): ActorType;
export declare function actorTypeToJSON(object: ActorType): string;
export interface EventScoresSet {
    actorType: ActorType;
    topicId: string;
    blockHeight: string;
    addresses: string[];
    scores: string[];
}
export interface EventRewardsSettled {
    actorType: ActorType;
    topicId: string;
    blockHeight: string;
    addresses: string[];
    rewards: string[];
}
export interface EventNetworkLossSet {
    topicId: string;
    blockHeight: string;
    valueBundle?: ValueBundle | undefined;
}
export declare const EventScoresSet: MessageFns<EventScoresSet>;
export declare const EventRewardsSettled: MessageFns<EventRewardsSettled>;
export declare const EventNetworkLossSet: MessageFns<EventNetworkLossSet>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=events.d.ts.map
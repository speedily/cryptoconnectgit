"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/autocli/v1/options.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PositionalArgDescriptor = exports.FlagOptions = exports.RpcCommandOptions_FlagOptionsEntry = exports.RpcCommandOptions = exports.ServiceCommandDescriptor_SubCommandsEntry = exports.ServiceCommandDescriptor = exports.ModuleOptions = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "cosmos.autocli.v1";
function createBaseModuleOptions() {
    return { tx: undefined, query: undefined };
}
exports.ModuleOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tx !== undefined) {
            exports.ServiceCommandDescriptor.encode(message.tx, writer.uint32(10).fork()).join();
        }
        if (message.query !== undefined) {
            exports.ServiceCommandDescriptor.encode(message.query, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tx = exports.ServiceCommandDescriptor.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.query = exports.ServiceCommandDescriptor.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tx: isSet(object.tx) ? exports.ServiceCommandDescriptor.fromJSON(object.tx) : undefined,
            query: isSet(object.query) ? exports.ServiceCommandDescriptor.fromJSON(object.query) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tx !== undefined) {
            obj.tx = exports.ServiceCommandDescriptor.toJSON(message.tx);
        }
        if (message.query !== undefined) {
            obj.query = exports.ServiceCommandDescriptor.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.ModuleOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseModuleOptions();
        message.tx = (object.tx !== undefined && object.tx !== null)
            ? exports.ServiceCommandDescriptor.fromPartial(object.tx)
            : undefined;
        message.query = (object.query !== undefined && object.query !== null)
            ? exports.ServiceCommandDescriptor.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseServiceCommandDescriptor() {
    return { service: "", rpcCommandOptions: [], subCommands: {}, enhanceCustomCommand: false };
}
exports.ServiceCommandDescriptor = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.service !== "") {
            writer.uint32(10).string(message.service);
        }
        for (const v of message.rpcCommandOptions) {
            exports.RpcCommandOptions.encode(v, writer.uint32(18).fork()).join();
        }
        Object.entries(message.subCommands).forEach(([key, value]) => {
            exports.ServiceCommandDescriptor_SubCommandsEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.enhanceCustomCommand !== false) {
            writer.uint32(32).bool(message.enhanceCustomCommand);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceCommandDescriptor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.service = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rpcCommandOptions.push(exports.RpcCommandOptions.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.ServiceCommandDescriptor_SubCommandsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.subCommands[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.enhanceCustomCommand = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            service: isSet(object.service) ? globalThis.String(object.service) : "",
            rpcCommandOptions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rpcCommandOptions)
                ? object.rpcCommandOptions.map((e) => exports.RpcCommandOptions.fromJSON(e))
                : [],
            subCommands: isObject(object.subCommands)
                ? Object.entries(object.subCommands).reduce((acc, [key, value]) => {
                    acc[key] = exports.ServiceCommandDescriptor.fromJSON(value);
                    return acc;
                }, {})
                : {},
            enhanceCustomCommand: isSet(object.enhanceCustomCommand)
                ? globalThis.Boolean(object.enhanceCustomCommand)
                : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.service !== "") {
            obj.service = message.service;
        }
        if ((_a = message.rpcCommandOptions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.rpcCommandOptions = message.rpcCommandOptions.map((e) => exports.RpcCommandOptions.toJSON(e));
        }
        if (message.subCommands) {
            const entries = Object.entries(message.subCommands);
            if (entries.length > 0) {
                obj.subCommands = {};
                entries.forEach(([k, v]) => {
                    obj.subCommands[k] = exports.ServiceCommandDescriptor.toJSON(v);
                });
            }
        }
        if (message.enhanceCustomCommand !== false) {
            obj.enhanceCustomCommand = message.enhanceCustomCommand;
        }
        return obj;
    },
    create(base) {
        return exports.ServiceCommandDescriptor.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseServiceCommandDescriptor();
        message.service = (_a = object.service) !== null && _a !== void 0 ? _a : "";
        message.rpcCommandOptions = ((_b = object.rpcCommandOptions) === null || _b === void 0 ? void 0 : _b.map((e) => exports.RpcCommandOptions.fromPartial(e))) || [];
        message.subCommands = Object.entries((_c = object.subCommands) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.ServiceCommandDescriptor.fromPartial(value);
            }
            return acc;
        }, {});
        message.enhanceCustomCommand = (_d = object.enhanceCustomCommand) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseServiceCommandDescriptor_SubCommandsEntry() {
    return { key: "", value: undefined };
}
exports.ServiceCommandDescriptor_SubCommandsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.ServiceCommandDescriptor.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceCommandDescriptor_SubCommandsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.ServiceCommandDescriptor.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.ServiceCommandDescriptor.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.ServiceCommandDescriptor.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.ServiceCommandDescriptor_SubCommandsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseServiceCommandDescriptor_SubCommandsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.ServiceCommandDescriptor.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseRpcCommandOptions() {
    return {
        rpcMethod: "",
        use: "",
        long: "",
        short: "",
        example: "",
        alias: [],
        suggestFor: [],
        deprecated: "",
        version: "",
        flagOptions: {},
        positionalArgs: [],
        skip: false,
        govProposal: false,
    };
}
exports.RpcCommandOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rpcMethod !== "") {
            writer.uint32(10).string(message.rpcMethod);
        }
        if (message.use !== "") {
            writer.uint32(18).string(message.use);
        }
        if (message.long !== "") {
            writer.uint32(26).string(message.long);
        }
        if (message.short !== "") {
            writer.uint32(34).string(message.short);
        }
        if (message.example !== "") {
            writer.uint32(42).string(message.example);
        }
        for (const v of message.alias) {
            writer.uint32(50).string(v);
        }
        for (const v of message.suggestFor) {
            writer.uint32(58).string(v);
        }
        if (message.deprecated !== "") {
            writer.uint32(66).string(message.deprecated);
        }
        if (message.version !== "") {
            writer.uint32(74).string(message.version);
        }
        Object.entries(message.flagOptions).forEach(([key, value]) => {
            exports.RpcCommandOptions_FlagOptionsEntry.encode({ key: key, value }, writer.uint32(82).fork()).join();
        });
        for (const v of message.positionalArgs) {
            exports.PositionalArgDescriptor.encode(v, writer.uint32(90).fork()).join();
        }
        if (message.skip !== false) {
            writer.uint32(96).bool(message.skip);
        }
        if (message.govProposal !== false) {
            writer.uint32(104).bool(message.govProposal);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpcCommandOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rpcMethod = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.use = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.long = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.short = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.example = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.alias.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.suggestFor.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.deprecated = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    const entry10 = exports.RpcCommandOptions_FlagOptionsEntry.decode(reader, reader.uint32());
                    if (entry10.value !== undefined) {
                        message.flagOptions[entry10.key] = entry10.value;
                    }
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.positionalArgs.push(exports.PositionalArgDescriptor.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.skip = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.govProposal = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rpcMethod: isSet(object.rpcMethod) ? globalThis.String(object.rpcMethod) : "",
            use: isSet(object.use) ? globalThis.String(object.use) : "",
            long: isSet(object.long) ? globalThis.String(object.long) : "",
            short: isSet(object.short) ? globalThis.String(object.short) : "",
            example: isSet(object.example) ? globalThis.String(object.example) : "",
            alias: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alias) ? object.alias.map((e) => globalThis.String(e)) : [],
            suggestFor: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.suggestFor)
                ? object.suggestFor.map((e) => globalThis.String(e))
                : [],
            deprecated: isSet(object.deprecated) ? globalThis.String(object.deprecated) : "",
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            flagOptions: isObject(object.flagOptions)
                ? Object.entries(object.flagOptions).reduce((acc, [key, value]) => {
                    acc[key] = exports.FlagOptions.fromJSON(value);
                    return acc;
                }, {})
                : {},
            positionalArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.positionalArgs)
                ? object.positionalArgs.map((e) => exports.PositionalArgDescriptor.fromJSON(e))
                : [],
            skip: isSet(object.skip) ? globalThis.Boolean(object.skip) : false,
            govProposal: isSet(object.govProposal) ? globalThis.Boolean(object.govProposal) : false,
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.rpcMethod !== "") {
            obj.rpcMethod = message.rpcMethod;
        }
        if (message.use !== "") {
            obj.use = message.use;
        }
        if (message.long !== "") {
            obj.long = message.long;
        }
        if (message.short !== "") {
            obj.short = message.short;
        }
        if (message.example !== "") {
            obj.example = message.example;
        }
        if ((_a = message.alias) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alias = message.alias;
        }
        if ((_b = message.suggestFor) === null || _b === void 0 ? void 0 : _b.length) {
            obj.suggestFor = message.suggestFor;
        }
        if (message.deprecated !== "") {
            obj.deprecated = message.deprecated;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.flagOptions) {
            const entries = Object.entries(message.flagOptions);
            if (entries.length > 0) {
                obj.flagOptions = {};
                entries.forEach(([k, v]) => {
                    obj.flagOptions[k] = exports.FlagOptions.toJSON(v);
                });
            }
        }
        if ((_c = message.positionalArgs) === null || _c === void 0 ? void 0 : _c.length) {
            obj.positionalArgs = message.positionalArgs.map((e) => exports.PositionalArgDescriptor.toJSON(e));
        }
        if (message.skip !== false) {
            obj.skip = message.skip;
        }
        if (message.govProposal !== false) {
            obj.govProposal = message.govProposal;
        }
        return obj;
    },
    create(base) {
        return exports.RpcCommandOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseRpcCommandOptions();
        message.rpcMethod = (_a = object.rpcMethod) !== null && _a !== void 0 ? _a : "";
        message.use = (_b = object.use) !== null && _b !== void 0 ? _b : "";
        message.long = (_c = object.long) !== null && _c !== void 0 ? _c : "";
        message.short = (_d = object.short) !== null && _d !== void 0 ? _d : "";
        message.example = (_e = object.example) !== null && _e !== void 0 ? _e : "";
        message.alias = ((_f = object.alias) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.suggestFor = ((_g = object.suggestFor) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.deprecated = (_h = object.deprecated) !== null && _h !== void 0 ? _h : "";
        message.version = (_j = object.version) !== null && _j !== void 0 ? _j : "";
        message.flagOptions = Object.entries((_k = object.flagOptions) !== null && _k !== void 0 ? _k : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.FlagOptions.fromPartial(value);
            }
            return acc;
        }, {});
        message.positionalArgs = ((_l = object.positionalArgs) === null || _l === void 0 ? void 0 : _l.map((e) => exports.PositionalArgDescriptor.fromPartial(e))) || [];
        message.skip = (_m = object.skip) !== null && _m !== void 0 ? _m : false;
        message.govProposal = (_o = object.govProposal) !== null && _o !== void 0 ? _o : false;
        return message;
    },
};
function createBaseRpcCommandOptions_FlagOptionsEntry() {
    return { key: "", value: undefined };
}
exports.RpcCommandOptions_FlagOptionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.FlagOptions.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpcCommandOptions_FlagOptionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.FlagOptions.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.FlagOptions.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.FlagOptions.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.RpcCommandOptions_FlagOptionsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRpcCommandOptions_FlagOptionsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.FlagOptions.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseFlagOptions() {
    return {
        name: "",
        shorthand: "",
        usage: "",
        defaultValue: "",
        deprecated: "",
        shorthandDeprecated: "",
        hidden: false,
    };
}
exports.FlagOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.shorthand !== "") {
            writer.uint32(18).string(message.shorthand);
        }
        if (message.usage !== "") {
            writer.uint32(26).string(message.usage);
        }
        if (message.defaultValue !== "") {
            writer.uint32(34).string(message.defaultValue);
        }
        if (message.deprecated !== "") {
            writer.uint32(50).string(message.deprecated);
        }
        if (message.shorthandDeprecated !== "") {
            writer.uint32(58).string(message.shorthandDeprecated);
        }
        if (message.hidden !== false) {
            writer.uint32(64).bool(message.hidden);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlagOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.shorthand = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.usage = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.defaultValue = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.deprecated = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.shorthandDeprecated = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.hidden = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            shorthand: isSet(object.shorthand) ? globalThis.String(object.shorthand) : "",
            usage: isSet(object.usage) ? globalThis.String(object.usage) : "",
            defaultValue: isSet(object.defaultValue) ? globalThis.String(object.defaultValue) : "",
            deprecated: isSet(object.deprecated) ? globalThis.String(object.deprecated) : "",
            shorthandDeprecated: isSet(object.shorthandDeprecated) ? globalThis.String(object.shorthandDeprecated) : "",
            hidden: isSet(object.hidden) ? globalThis.Boolean(object.hidden) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.shorthand !== "") {
            obj.shorthand = message.shorthand;
        }
        if (message.usage !== "") {
            obj.usage = message.usage;
        }
        if (message.defaultValue !== "") {
            obj.defaultValue = message.defaultValue;
        }
        if (message.deprecated !== "") {
            obj.deprecated = message.deprecated;
        }
        if (message.shorthandDeprecated !== "") {
            obj.shorthandDeprecated = message.shorthandDeprecated;
        }
        if (message.hidden !== false) {
            obj.hidden = message.hidden;
        }
        return obj;
    },
    create(base) {
        return exports.FlagOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseFlagOptions();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.shorthand = (_b = object.shorthand) !== null && _b !== void 0 ? _b : "";
        message.usage = (_c = object.usage) !== null && _c !== void 0 ? _c : "";
        message.defaultValue = (_d = object.defaultValue) !== null && _d !== void 0 ? _d : "";
        message.deprecated = (_e = object.deprecated) !== null && _e !== void 0 ? _e : "";
        message.shorthandDeprecated = (_f = object.shorthandDeprecated) !== null && _f !== void 0 ? _f : "";
        message.hidden = (_g = object.hidden) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBasePositionalArgDescriptor() {
    return { protoField: "", varargs: false, optional: false };
}
exports.PositionalArgDescriptor = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.protoField !== "") {
            writer.uint32(10).string(message.protoField);
        }
        if (message.varargs !== false) {
            writer.uint32(16).bool(message.varargs);
        }
        if (message.optional !== false) {
            writer.uint32(24).bool(message.optional);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionalArgDescriptor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.protoField = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.varargs = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.optional = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            protoField: isSet(object.protoField) ? globalThis.String(object.protoField) : "",
            varargs: isSet(object.varargs) ? globalThis.Boolean(object.varargs) : false,
            optional: isSet(object.optional) ? globalThis.Boolean(object.optional) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.protoField !== "") {
            obj.protoField = message.protoField;
        }
        if (message.varargs !== false) {
            obj.varargs = message.varargs;
        }
        if (message.optional !== false) {
            obj.optional = message.optional;
        }
        return obj;
    },
    create(base) {
        return exports.PositionalArgDescriptor.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePositionalArgDescriptor();
        message.protoField = (_a = object.protoField) !== null && _a !== void 0 ? _a : "";
        message.varargs = (_b = object.varargs) !== null && _b !== void 0 ? _b : false;
        message.optional = (_c = object.optional) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

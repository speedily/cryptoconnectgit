"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/v1/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgExecuteBundleResponse = exports.BundledTxResponse = exports.MsgExecuteBundle = exports.MsgExecuteResponse = exports.MsgExecute = exports.MsgInitResponse = exports.MsgInit = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const any_1 = require("../../../google/protobuf/any");
const coin_1 = require("../../base/v1beta1/coin");
const tx_1 = require("../../tx/v1beta1/tx");
exports.protobufPackage = "cosmos.accounts.v1";
function createBaseMsgInit() {
    return { sender: "", accountType: "", message: undefined, funds: [] };
}
exports.MsgInit = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.accountType !== "") {
            writer.uint32(18).string(message.accountType);
        }
        if (message.message !== undefined) {
            any_1.Any.encode(message.message, writer.uint32(26).fork()).join();
        }
        for (const v of message.funds) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            accountType: isSet(object.accountType) ? globalThis.String(object.accountType) : "",
            message: isSet(object.message) ? any_1.Any.fromJSON(object.message) : undefined,
            funds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.funds) ? object.funds.map((e) => coin_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.accountType !== "") {
            obj.accountType = message.accountType;
        }
        if (message.message !== undefined) {
            obj.message = any_1.Any.toJSON(message.message);
        }
        if ((_a = message.funds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.funds = message.funds.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgInit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgInit();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.accountType = (_b = object.accountType) !== null && _b !== void 0 ? _b : "";
        message.message = (object.message !== undefined && object.message !== null)
            ? any_1.Any.fromPartial(object.message)
            : undefined;
        message.funds = ((_c = object.funds) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgInitResponse() {
    return { accountAddress: "", response: undefined };
}
exports.MsgInitResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountAddress !== "") {
            writer.uint32(10).string(message.accountAddress);
        }
        if (message.response !== undefined) {
            any_1.Any.encode(message.response, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accountAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountAddress: isSet(object.accountAddress) ? globalThis.String(object.accountAddress) : "",
            response: isSet(object.response) ? any_1.Any.fromJSON(object.response) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountAddress !== "") {
            obj.accountAddress = message.accountAddress;
        }
        if (message.response !== undefined) {
            obj.response = any_1.Any.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.MsgInitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgInitResponse();
        message.accountAddress = (_a = object.accountAddress) !== null && _a !== void 0 ? _a : "";
        message.response = (object.response !== undefined && object.response !== null)
            ? any_1.Any.fromPartial(object.response)
            : undefined;
        return message;
    },
};
function createBaseMsgExecute() {
    return { sender: "", target: "", message: undefined, funds: [] };
}
exports.MsgExecute = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.target !== "") {
            writer.uint32(18).string(message.target);
        }
        if (message.message !== undefined) {
            any_1.Any.encode(message.message, writer.uint32(26).fork()).join();
        }
        for (const v of message.funds) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            target: isSet(object.target) ? globalThis.String(object.target) : "",
            message: isSet(object.message) ? any_1.Any.fromJSON(object.message) : undefined,
            funds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.funds) ? object.funds.map((e) => coin_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.target !== "") {
            obj.target = message.target;
        }
        if (message.message !== undefined) {
            obj.message = any_1.Any.toJSON(message.message);
        }
        if ((_a = message.funds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.funds = message.funds.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecute.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgExecute();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.target = (_b = object.target) !== null && _b !== void 0 ? _b : "";
        message.message = (object.message !== undefined && object.message !== null)
            ? any_1.Any.fromPartial(object.message)
            : undefined;
        message.funds = ((_c = object.funds) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgExecuteResponse() {
    return { response: undefined };
}
exports.MsgExecuteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== undefined) {
            any_1.Any.encode(message.response, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.response = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { response: isSet(object.response) ? any_1.Any.fromJSON(object.response) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== undefined) {
            obj.response = any_1.Any.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecuteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMsgExecuteResponse();
        message.response = (object.response !== undefined && object.response !== null)
            ? any_1.Any.fromPartial(object.response)
            : undefined;
        return message;
    },
};
function createBaseMsgExecuteBundle() {
    return { bundler: "", txs: [] };
}
exports.MsgExecuteBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bundler !== "") {
            writer.uint32(10).string(message.bundler);
        }
        for (const v of message.txs) {
            tx_1.TxRaw.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bundler = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.txs.push(tx_1.TxRaw.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundler: isSet(object.bundler) ? globalThis.String(object.bundler) : "",
            txs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.txs) ? object.txs.map((e) => tx_1.TxRaw.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.bundler !== "") {
            obj.bundler = message.bundler;
        }
        if ((_a = message.txs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.txs = message.txs.map((e) => tx_1.TxRaw.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecuteBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgExecuteBundle();
        message.bundler = (_a = object.bundler) !== null && _a !== void 0 ? _a : "";
        message.txs = ((_b = object.txs) === null || _b === void 0 ? void 0 : _b.map((e) => tx_1.TxRaw.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBundledTxResponse() {
    return { execResponses: undefined, error: "" };
}
exports.BundledTxResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.execResponses !== undefined) {
            any_1.Any.encode(message.execResponses, writer.uint32(10).fork()).join();
        }
        if (message.error !== "") {
            writer.uint32(18).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundledTxResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.execResponses = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            execResponses: isSet(object.execResponses) ? any_1.Any.fromJSON(object.execResponses) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.execResponses !== undefined) {
            obj.execResponses = any_1.Any.toJSON(message.execResponses);
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.BundledTxResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBundledTxResponse();
        message.execResponses = (object.execResponses !== undefined && object.execResponses !== null)
            ? any_1.Any.fromPartial(object.execResponses)
            : undefined;
        message.error = (_a = object.error) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMsgExecuteBundleResponse() {
    return { responses: [] };
}
exports.MsgExecuteBundleResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.responses) {
            exports.BundledTxResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteBundleResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.responses.push(exports.BundledTxResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.responses)
                ? object.responses.map((e) => exports.BundledTxResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.responses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.responses = message.responses.map((e) => exports.BundledTxResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecuteBundleResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgExecuteBundleResponse();
        message.responses = ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => exports.BundledTxResponse.fromPartial(e))) || [];
        return message;
    },
};
exports.MsgServiceName = "cosmos.accounts.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.Init = this.Init.bind(this);
        this.Execute = this.Execute.bind(this);
        this.ExecuteBundle = this.ExecuteBundle.bind(this);
    }
    Init(request) {
        const data = exports.MsgInit.encode(request).finish();
        const promise = this.rpc.request(this.service, "Init", data);
        return promise.then((data) => exports.MsgInitResponse.decode(new wire_1.BinaryReader(data)));
    }
    Execute(request) {
        const data = exports.MsgExecute.encode(request).finish();
        const promise = this.rpc.request(this.service, "Execute", data);
        return promise.then((data) => exports.MsgExecuteResponse.decode(new wire_1.BinaryReader(data)));
    }
    ExecuteBundle(request) {
        const data = exports.MsgExecuteBundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "ExecuteBundle", data);
        return promise.then((data) => exports.MsgExecuteBundleResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

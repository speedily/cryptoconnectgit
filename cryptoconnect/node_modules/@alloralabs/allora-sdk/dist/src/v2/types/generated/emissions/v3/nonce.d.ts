import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "emissions.v3";
export interface Nonce {
    /** block height of the request */
    blockHeight: string;
}
export interface Nonces {
    nonces: Nonce[];
}
export interface ReputerRequestNonce {
    /**
     * the reputers should respond to the reputer request with losses for work
     * found at this worker nonce
     */
    reputerNonce?: Nonce | undefined;
}
export interface ReputerRequestNonces {
    nonces: ReputerRequestNonce[];
}
export declare const Nonce: MessageFns<Nonce>;
export declare const Nonces: MessageFns<Nonces>;
export declare const ReputerRequestNonce: MessageFns<ReputerRequestNonce>;
export declare const ReputerRequestNonces: MessageFns<ReputerRequestNonces>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=nonce.d.ts.map
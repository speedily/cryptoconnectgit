"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v7/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicIdReputerReputerValueBundle = exports.BlockHeightTopicIdWeightPair = exports.BlockHeightTopicIds = exports.TopicIdTimestampedActorNonce = exports.TopicIdActorIdActorIdTimeStampedValue = exports.TopicIdActorIdTimeStampedValue = exports.TopicIdAndReputerRequestNonces = exports.TopicIdAndNonces = exports.TopicIdBlockHeightValueBundles = exports.TopicIdBlockHeightReputerValueBundles = exports.TopicIdBlockHeightForecasts = exports.TopicIdBlockHeightInferences = exports.TopicIdAndDec = exports.LibP2pKeyAndOffchainNode = exports.TopicIdActorIdForecast = exports.TopicIdActorIdInference = exports.DelegatorReputerTopicIdBlockHeight = exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo = exports.ActorIdTopicIdBlockHeight = exports.BlockHeightTopicIdReputerStakeRemovalInfo = exports.TopicIdDelegatorReputerDelegatorInfo = exports.TopicIdActorIdInt = exports.TopicIdAndInt = exports.TopicIdActorIdDec = exports.TopicIdActorIdListeningCoefficient = exports.TopicIdActorIdUint64 = exports.TopicIdActorIdScore = exports.TopicIdBlockHeightScores = exports.BlockHeightAndTopicIds = exports.TopicIdAndBlockHeight = exports.TopicAndActorId = exports.TopicIdAndTopic = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const node_1 = require("../v3/node");
const nonce_1 = require("../v3/nonce");
const reputer_1 = require("../v3/reputer");
const score_1 = require("../v3/score");
const stake_1 = require("../v3/stake");
const topic_1 = require("../v3/topic");
const types_1 = require("../v3/types");
const worker_1 = require("../v3/worker");
const params_1 = require("./params");
exports.protobufPackage = "emissions.v7";
function createBaseGenesisState() {
    return {
        params: undefined,
        coreTeamAddresses: [],
        nextTopicId: "0",
        topics: [],
        activeTopics: [],
        rewardableTopics: [],
        topicWorkers: [],
        topicReputers: [],
        topicRewardNonce: [],
        infererScoresByBlock: [],
        forecasterScoresByBlock: [],
        reputerScoresByBlock: [],
        reputerListeningCoefficient: [],
        previousReputerRewardFraction: [],
        previousInferenceRewardFraction: [],
        previousForecastRewardFraction: [],
        previousForecasterScoreRatio: [],
        totalStake: "",
        topicStake: [],
        stakeReputerAuthority: [],
        stakeSumFromDelegator: [],
        delegatedStakes: [],
        stakeFromDelegatorsUponReputer: [],
        delegateRewardPerShare: [],
        stakeRemovalsByBlock: [],
        stakeRemovalsByActor: [],
        delegateStakeRemovalsByBlock: [],
        delegateStakeRemovalsByActor: [],
        inferences: [],
        forecasts: [],
        workers: [],
        reputers: [],
        topicFeeRevenue: [],
        previousTopicWeight: [],
        allInferences: [],
        allForecasts: [],
        allLossBundles: [],
        networkLossBundles: [],
        previousPercentageRewardToStakedReputers: "",
        unfulfilledWorkerNonces: [],
        unfulfilledReputerNonces: [],
        latestInfererNetworkRegrets: [],
        latestForecasterNetworkRegrets: [],
        latestOneInForecasterNetworkRegrets: [],
        latestNaiveInfererNetworkRegrets: [],
        latestOneOutInfererInfererNetworkRegrets: [],
        latestOneOutInfererForecasterNetworkRegrets: [],
        latestOneOutForecasterInfererNetworkRegrets: [],
        latestOneOutForecasterForecasterNetworkRegrets: [],
        topicLastWorkerCommit: [],
        topicLastReputerCommit: [],
        openWorkerWindows: [],
        lastDripBlock: [],
        topicToNextPossibleChurningBlock: [],
        blockToActiveTopics: [],
        blockToLowestActiveTopicWeight: [],
        infererScoreEmas: [],
        forecasterScoreEmas: [],
        reputerScoreEmas: [],
        previousTopicQuantileInfererScoreEma: [],
        previousTopicQuantileForecasterScoreEma: [],
        previousTopicQuantileReputerScoreEma: [],
        countInfererInclusionsInTopicActiveSet: [],
        countForecasterInclusionsInTopicActiveSet: [],
        activeInferers: [],
        activeForecasters: [],
        lowestInfererScoreEma: [],
        lowestForecasterScoreEma: [],
        activeReputers: [],
        lowestReputerScoreEma: [],
        lossBundles: [],
        totalSumPreviousTopicWeights: "",
        rewardCurrentBlockEmission: "",
        whitelistAdmins: [],
        globalWhitelist: [],
        topicCreatorWhitelist: [],
        topicWorkerWhitelist: [],
        topicReputerWhitelist: [],
        topicWorkerWhitelistEnabled: [],
        topicReputerWhitelistEnabled: [],
        lastMedianInferences: [],
        madInferences: [],
        initialInfererEmaScore: [],
        initialForecasterEmaScore: [],
        initialReputerEmaScore: [],
        globalWorkerWhitelist: [],
        globalReputerWhitelist: [],
        globalAdminWhitelist: [],
    };
}
exports.GenesisState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        for (const v of message.coreTeamAddresses) {
            writer.uint32(18).string(v);
        }
        if (message.nextTopicId !== "0") {
            writer.uint32(24).uint64(message.nextTopicId);
        }
        for (const v of message.topics) {
            exports.TopicIdAndTopic.encode(v, writer.uint32(34).fork()).join();
        }
        writer.uint32(42).fork();
        for (const v of message.activeTopics) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(50).fork();
        for (const v of message.rewardableTopics) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.topicWorkers) {
            exports.TopicAndActorId.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.topicReputers) {
            exports.TopicAndActorId.encode(v, writer.uint32(66).fork()).join();
        }
        for (const v of message.topicRewardNonce) {
            exports.TopicIdAndBlockHeight.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.infererScoresByBlock) {
            exports.TopicIdBlockHeightScores.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.forecasterScoresByBlock) {
            exports.TopicIdBlockHeightScores.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.reputerScoresByBlock) {
            exports.TopicIdBlockHeightScores.encode(v, writer.uint32(98).fork()).join();
        }
        for (const v of message.reputerListeningCoefficient) {
            exports.TopicIdActorIdListeningCoefficient.encode(v, writer.uint32(130).fork()).join();
        }
        for (const v of message.previousReputerRewardFraction) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.previousInferenceRewardFraction) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.previousForecastRewardFraction) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(154).fork()).join();
        }
        for (const v of message.previousForecasterScoreRatio) {
            exports.TopicIdAndDec.encode(v, writer.uint32(162).fork()).join();
        }
        if (message.totalStake !== "") {
            writer.uint32(170).string(message.totalStake);
        }
        for (const v of message.topicStake) {
            exports.TopicIdAndInt.encode(v, writer.uint32(178).fork()).join();
        }
        for (const v of message.stakeReputerAuthority) {
            exports.TopicIdActorIdInt.encode(v, writer.uint32(186).fork()).join();
        }
        for (const v of message.stakeSumFromDelegator) {
            exports.TopicIdActorIdInt.encode(v, writer.uint32(194).fork()).join();
        }
        for (const v of message.delegatedStakes) {
            exports.TopicIdDelegatorReputerDelegatorInfo.encode(v, writer.uint32(202).fork()).join();
        }
        for (const v of message.stakeFromDelegatorsUponReputer) {
            exports.TopicIdActorIdInt.encode(v, writer.uint32(210).fork()).join();
        }
        for (const v of message.delegateRewardPerShare) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(218).fork()).join();
        }
        for (const v of message.stakeRemovalsByBlock) {
            exports.BlockHeightTopicIdReputerStakeRemovalInfo.encode(v, writer.uint32(226).fork()).join();
        }
        for (const v of message.stakeRemovalsByActor) {
            exports.ActorIdTopicIdBlockHeight.encode(v, writer.uint32(234).fork()).join();
        }
        for (const v of message.delegateStakeRemovalsByBlock) {
            exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.encode(v, writer.uint32(242).fork()).join();
        }
        for (const v of message.delegateStakeRemovalsByActor) {
            exports.DelegatorReputerTopicIdBlockHeight.encode(v, writer.uint32(250).fork()).join();
        }
        for (const v of message.inferences) {
            exports.TopicIdActorIdInference.encode(v, writer.uint32(258).fork()).join();
        }
        for (const v of message.forecasts) {
            exports.TopicIdActorIdForecast.encode(v, writer.uint32(266).fork()).join();
        }
        for (const v of message.workers) {
            exports.LibP2pKeyAndOffchainNode.encode(v, writer.uint32(274).fork()).join();
        }
        for (const v of message.reputers) {
            exports.LibP2pKeyAndOffchainNode.encode(v, writer.uint32(282).fork()).join();
        }
        for (const v of message.topicFeeRevenue) {
            exports.TopicIdAndInt.encode(v, writer.uint32(290).fork()).join();
        }
        for (const v of message.previousTopicWeight) {
            exports.TopicIdAndDec.encode(v, writer.uint32(298).fork()).join();
        }
        for (const v of message.allInferences) {
            exports.TopicIdBlockHeightInferences.encode(v, writer.uint32(306).fork()).join();
        }
        for (const v of message.allForecasts) {
            exports.TopicIdBlockHeightForecasts.encode(v, writer.uint32(314).fork()).join();
        }
        for (const v of message.allLossBundles) {
            exports.TopicIdBlockHeightReputerValueBundles.encode(v, writer.uint32(322).fork()).join();
        }
        for (const v of message.networkLossBundles) {
            exports.TopicIdBlockHeightValueBundles.encode(v, writer.uint32(330).fork()).join();
        }
        if (message.previousPercentageRewardToStakedReputers !== "") {
            writer.uint32(338).string(message.previousPercentageRewardToStakedReputers);
        }
        for (const v of message.unfulfilledWorkerNonces) {
            exports.TopicIdAndNonces.encode(v, writer.uint32(346).fork()).join();
        }
        for (const v of message.unfulfilledReputerNonces) {
            exports.TopicIdAndReputerRequestNonces.encode(v, writer.uint32(354).fork()).join();
        }
        for (const v of message.latestInfererNetworkRegrets) {
            exports.TopicIdActorIdTimeStampedValue.encode(v, writer.uint32(362).fork()).join();
        }
        for (const v of message.latestForecasterNetworkRegrets) {
            exports.TopicIdActorIdTimeStampedValue.encode(v, writer.uint32(370).fork()).join();
        }
        for (const v of message.latestOneInForecasterNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(378).fork()).join();
        }
        for (const v of message.latestNaiveInfererNetworkRegrets) {
            exports.TopicIdActorIdTimeStampedValue.encode(v, writer.uint32(386).fork()).join();
        }
        for (const v of message.latestOneOutInfererInfererNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(394).fork()).join();
        }
        for (const v of message.latestOneOutInfererForecasterNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(402).fork()).join();
        }
        for (const v of message.latestOneOutForecasterInfererNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(410).fork()).join();
        }
        for (const v of message.latestOneOutForecasterForecasterNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(418).fork()).join();
        }
        for (const v of message.topicLastWorkerCommit) {
            exports.TopicIdTimestampedActorNonce.encode(v, writer.uint32(426).fork()).join();
        }
        for (const v of message.topicLastReputerCommit) {
            exports.TopicIdTimestampedActorNonce.encode(v, writer.uint32(434).fork()).join();
        }
        for (const v of message.openWorkerWindows) {
            exports.BlockHeightAndTopicIds.encode(v, writer.uint32(442).fork()).join();
        }
        for (const v of message.lastDripBlock) {
            exports.TopicIdAndBlockHeight.encode(v, writer.uint32(450).fork()).join();
        }
        for (const v of message.topicToNextPossibleChurningBlock) {
            exports.TopicIdAndBlockHeight.encode(v, writer.uint32(458).fork()).join();
        }
        for (const v of message.blockToActiveTopics) {
            exports.BlockHeightTopicIds.encode(v, writer.uint32(466).fork()).join();
        }
        for (const v of message.blockToLowestActiveTopicWeight) {
            exports.BlockHeightTopicIdWeightPair.encode(v, writer.uint32(474).fork()).join();
        }
        for (const v of message.infererScoreEmas) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(482).fork()).join();
        }
        for (const v of message.forecasterScoreEmas) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(490).fork()).join();
        }
        for (const v of message.reputerScoreEmas) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(498).fork()).join();
        }
        for (const v of message.previousTopicQuantileInfererScoreEma) {
            exports.TopicIdAndDec.encode(v, writer.uint32(506).fork()).join();
        }
        for (const v of message.previousTopicQuantileForecasterScoreEma) {
            exports.TopicIdAndDec.encode(v, writer.uint32(514).fork()).join();
        }
        for (const v of message.previousTopicQuantileReputerScoreEma) {
            exports.TopicIdAndDec.encode(v, writer.uint32(522).fork()).join();
        }
        for (const v of message.countInfererInclusionsInTopicActiveSet) {
            exports.TopicIdActorIdUint64.encode(v, writer.uint32(530).fork()).join();
        }
        for (const v of message.countForecasterInclusionsInTopicActiveSet) {
            exports.TopicIdActorIdUint64.encode(v, writer.uint32(538).fork()).join();
        }
        for (const v of message.activeInferers) {
            exports.TopicAndActorId.encode(v, writer.uint32(546).fork()).join();
        }
        for (const v of message.activeForecasters) {
            exports.TopicAndActorId.encode(v, writer.uint32(554).fork()).join();
        }
        for (const v of message.lowestInfererScoreEma) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(562).fork()).join();
        }
        for (const v of message.lowestForecasterScoreEma) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(570).fork()).join();
        }
        for (const v of message.activeReputers) {
            exports.TopicAndActorId.encode(v, writer.uint32(578).fork()).join();
        }
        for (const v of message.lowestReputerScoreEma) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(586).fork()).join();
        }
        for (const v of message.lossBundles) {
            exports.TopicIdReputerReputerValueBundle.encode(v, writer.uint32(594).fork()).join();
        }
        if (message.totalSumPreviousTopicWeights !== "") {
            writer.uint32(602).string(message.totalSumPreviousTopicWeights);
        }
        if (message.rewardCurrentBlockEmission !== "") {
            writer.uint32(610).string(message.rewardCurrentBlockEmission);
        }
        for (const v of message.whitelistAdmins) {
            writer.uint32(618).string(v);
        }
        for (const v of message.globalWhitelist) {
            writer.uint32(626).string(v);
        }
        for (const v of message.topicCreatorWhitelist) {
            writer.uint32(634).string(v);
        }
        for (const v of message.topicWorkerWhitelist) {
            exports.TopicAndActorId.encode(v, writer.uint32(642).fork()).join();
        }
        for (const v of message.topicReputerWhitelist) {
            exports.TopicAndActorId.encode(v, writer.uint32(650).fork()).join();
        }
        writer.uint32(658).fork();
        for (const v of message.topicWorkerWhitelistEnabled) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(666).fork();
        for (const v of message.topicReputerWhitelistEnabled) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.lastMedianInferences) {
            exports.TopicIdAndDec.encode(v, writer.uint32(674).fork()).join();
        }
        for (const v of message.madInferences) {
            exports.TopicIdAndDec.encode(v, writer.uint32(682).fork()).join();
        }
        for (const v of message.initialInfererEmaScore) {
            exports.TopicIdAndDec.encode(v, writer.uint32(690).fork()).join();
        }
        for (const v of message.initialForecasterEmaScore) {
            exports.TopicIdAndDec.encode(v, writer.uint32(698).fork()).join();
        }
        for (const v of message.initialReputerEmaScore) {
            exports.TopicIdAndDec.encode(v, writer.uint32(706).fork()).join();
        }
        for (const v of message.globalWorkerWhitelist) {
            writer.uint32(714).string(v);
        }
        for (const v of message.globalReputerWhitelist) {
            writer.uint32(722).string(v);
        }
        for (const v of message.globalAdminWhitelist) {
            writer.uint32(730).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.coreTeamAddresses.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nextTopicId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.topics.push(exports.TopicIdAndTopic.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag === 40) {
                        message.activeTopics.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.activeTopics.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 6: {
                    if (tag === 48) {
                        message.rewardableTopics.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.rewardableTopics.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.topicWorkers.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.topicReputers.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.topicRewardNonce.push(exports.TopicIdAndBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.infererScoresByBlock.push(exports.TopicIdBlockHeightScores.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.forecasterScoresByBlock.push(exports.TopicIdBlockHeightScores.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.reputerScoresByBlock.push(exports.TopicIdBlockHeightScores.decode(reader, reader.uint32()));
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.reputerListeningCoefficient.push(exports.TopicIdActorIdListeningCoefficient.decode(reader, reader.uint32()));
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.previousReputerRewardFraction.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.previousInferenceRewardFraction.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.previousForecastRewardFraction.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.previousForecasterScoreRatio.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.totalStake = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.topicStake.push(exports.TopicIdAndInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.stakeReputerAuthority.push(exports.TopicIdActorIdInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.stakeSumFromDelegator.push(exports.TopicIdActorIdInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.delegatedStakes.push(exports.TopicIdDelegatorReputerDelegatorInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.stakeFromDelegatorsUponReputer.push(exports.TopicIdActorIdInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.delegateRewardPerShare.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.stakeRemovalsByBlock.push(exports.BlockHeightTopicIdReputerStakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.stakeRemovalsByActor.push(exports.ActorIdTopicIdBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.delegateStakeRemovalsByBlock.push(exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.delegateStakeRemovalsByActor.push(exports.DelegatorReputerTopicIdBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.inferences.push(exports.TopicIdActorIdInference.decode(reader, reader.uint32()));
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.forecasts.push(exports.TopicIdActorIdForecast.decode(reader, reader.uint32()));
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.workers.push(exports.LibP2pKeyAndOffchainNode.decode(reader, reader.uint32()));
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.reputers.push(exports.LibP2pKeyAndOffchainNode.decode(reader, reader.uint32()));
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.topicFeeRevenue.push(exports.TopicIdAndInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.previousTopicWeight.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.allInferences.push(exports.TopicIdBlockHeightInferences.decode(reader, reader.uint32()));
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.allForecasts.push(exports.TopicIdBlockHeightForecasts.decode(reader, reader.uint32()));
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.allLossBundles.push(exports.TopicIdBlockHeightReputerValueBundles.decode(reader, reader.uint32()));
                    continue;
                }
                case 41: {
                    if (tag !== 330) {
                        break;
                    }
                    message.networkLossBundles.push(exports.TopicIdBlockHeightValueBundles.decode(reader, reader.uint32()));
                    continue;
                }
                case 42: {
                    if (tag !== 338) {
                        break;
                    }
                    message.previousPercentageRewardToStakedReputers = reader.string();
                    continue;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.unfulfilledWorkerNonces.push(exports.TopicIdAndNonces.decode(reader, reader.uint32()));
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.unfulfilledReputerNonces.push(exports.TopicIdAndReputerRequestNonces.decode(reader, reader.uint32()));
                    continue;
                }
                case 45: {
                    if (tag !== 362) {
                        break;
                    }
                    message.latestInfererNetworkRegrets.push(exports.TopicIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 46: {
                    if (tag !== 370) {
                        break;
                    }
                    message.latestForecasterNetworkRegrets.push(exports.TopicIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 47: {
                    if (tag !== 378) {
                        break;
                    }
                    message.latestOneInForecasterNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 48: {
                    if (tag !== 386) {
                        break;
                    }
                    message.latestNaiveInfererNetworkRegrets.push(exports.TopicIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 49: {
                    if (tag !== 394) {
                        break;
                    }
                    message.latestOneOutInfererInfererNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 50: {
                    if (tag !== 402) {
                        break;
                    }
                    message.latestOneOutInfererForecasterNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 51: {
                    if (tag !== 410) {
                        break;
                    }
                    message.latestOneOutForecasterInfererNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 52: {
                    if (tag !== 418) {
                        break;
                    }
                    message.latestOneOutForecasterForecasterNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 53: {
                    if (tag !== 426) {
                        break;
                    }
                    message.topicLastWorkerCommit.push(exports.TopicIdTimestampedActorNonce.decode(reader, reader.uint32()));
                    continue;
                }
                case 54: {
                    if (tag !== 434) {
                        break;
                    }
                    message.topicLastReputerCommit.push(exports.TopicIdTimestampedActorNonce.decode(reader, reader.uint32()));
                    continue;
                }
                case 55: {
                    if (tag !== 442) {
                        break;
                    }
                    message.openWorkerWindows.push(exports.BlockHeightAndTopicIds.decode(reader, reader.uint32()));
                    continue;
                }
                case 56: {
                    if (tag !== 450) {
                        break;
                    }
                    message.lastDripBlock.push(exports.TopicIdAndBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 57: {
                    if (tag !== 458) {
                        break;
                    }
                    message.topicToNextPossibleChurningBlock.push(exports.TopicIdAndBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 58: {
                    if (tag !== 466) {
                        break;
                    }
                    message.blockToActiveTopics.push(exports.BlockHeightTopicIds.decode(reader, reader.uint32()));
                    continue;
                }
                case 59: {
                    if (tag !== 474) {
                        break;
                    }
                    message.blockToLowestActiveTopicWeight.push(exports.BlockHeightTopicIdWeightPair.decode(reader, reader.uint32()));
                    continue;
                }
                case 60: {
                    if (tag !== 482) {
                        break;
                    }
                    message.infererScoreEmas.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 61: {
                    if (tag !== 490) {
                        break;
                    }
                    message.forecasterScoreEmas.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 62: {
                    if (tag !== 498) {
                        break;
                    }
                    message.reputerScoreEmas.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 63: {
                    if (tag !== 506) {
                        break;
                    }
                    message.previousTopicQuantileInfererScoreEma.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 64: {
                    if (tag !== 514) {
                        break;
                    }
                    message.previousTopicQuantileForecasterScoreEma.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 65: {
                    if (tag !== 522) {
                        break;
                    }
                    message.previousTopicQuantileReputerScoreEma.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 66: {
                    if (tag !== 530) {
                        break;
                    }
                    message.countInfererInclusionsInTopicActiveSet.push(exports.TopicIdActorIdUint64.decode(reader, reader.uint32()));
                    continue;
                }
                case 67: {
                    if (tag !== 538) {
                        break;
                    }
                    message.countForecasterInclusionsInTopicActiveSet.push(exports.TopicIdActorIdUint64.decode(reader, reader.uint32()));
                    continue;
                }
                case 68: {
                    if (tag !== 546) {
                        break;
                    }
                    message.activeInferers.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 69: {
                    if (tag !== 554) {
                        break;
                    }
                    message.activeForecasters.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 70: {
                    if (tag !== 562) {
                        break;
                    }
                    message.lowestInfererScoreEma.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 71: {
                    if (tag !== 570) {
                        break;
                    }
                    message.lowestForecasterScoreEma.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 72: {
                    if (tag !== 578) {
                        break;
                    }
                    message.activeReputers.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 73: {
                    if (tag !== 586) {
                        break;
                    }
                    message.lowestReputerScoreEma.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 74: {
                    if (tag !== 594) {
                        break;
                    }
                    message.lossBundles.push(exports.TopicIdReputerReputerValueBundle.decode(reader, reader.uint32()));
                    continue;
                }
                case 75: {
                    if (tag !== 602) {
                        break;
                    }
                    message.totalSumPreviousTopicWeights = reader.string();
                    continue;
                }
                case 76: {
                    if (tag !== 610) {
                        break;
                    }
                    message.rewardCurrentBlockEmission = reader.string();
                    continue;
                }
                case 77: {
                    if (tag !== 618) {
                        break;
                    }
                    message.whitelistAdmins.push(reader.string());
                    continue;
                }
                case 78: {
                    if (tag !== 626) {
                        break;
                    }
                    message.globalWhitelist.push(reader.string());
                    continue;
                }
                case 79: {
                    if (tag !== 634) {
                        break;
                    }
                    message.topicCreatorWhitelist.push(reader.string());
                    continue;
                }
                case 80: {
                    if (tag !== 642) {
                        break;
                    }
                    message.topicWorkerWhitelist.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 81: {
                    if (tag !== 650) {
                        break;
                    }
                    message.topicReputerWhitelist.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 82: {
                    if (tag === 656) {
                        message.topicWorkerWhitelistEnabled.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 658) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.topicWorkerWhitelistEnabled.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 83: {
                    if (tag === 664) {
                        message.topicReputerWhitelistEnabled.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 666) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.topicReputerWhitelistEnabled.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 84: {
                    if (tag !== 674) {
                        break;
                    }
                    message.lastMedianInferences.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 85: {
                    if (tag !== 682) {
                        break;
                    }
                    message.madInferences.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 86: {
                    if (tag !== 690) {
                        break;
                    }
                    message.initialInfererEmaScore.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 87: {
                    if (tag !== 698) {
                        break;
                    }
                    message.initialForecasterEmaScore.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 88: {
                    if (tag !== 706) {
                        break;
                    }
                    message.initialReputerEmaScore.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 89: {
                    if (tag !== 714) {
                        break;
                    }
                    message.globalWorkerWhitelist.push(reader.string());
                    continue;
                }
                case 90: {
                    if (tag !== 722) {
                        break;
                    }
                    message.globalReputerWhitelist.push(reader.string());
                    continue;
                }
                case 91: {
                    if (tag !== 730) {
                        break;
                    }
                    message.globalAdminWhitelist.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            coreTeamAddresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coreTeamAddresses)
                ? object.coreTeamAddresses.map((e) => globalThis.String(e))
                : [],
            nextTopicId: isSet(object.nextTopicId) ? globalThis.String(object.nextTopicId) : "0",
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics)
                ? object.topics.map((e) => exports.TopicIdAndTopic.fromJSON(e))
                : [],
            activeTopics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.activeTopics)
                ? object.activeTopics.map((e) => globalThis.String(e))
                : [],
            rewardableTopics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewardableTopics)
                ? object.rewardableTopics.map((e) => globalThis.String(e))
                : [],
            topicWorkers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicWorkers)
                ? object.topicWorkers.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            topicReputers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicReputers)
                ? object.topicReputers.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            topicRewardNonce: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicRewardNonce)
                ? object.topicRewardNonce.map((e) => exports.TopicIdAndBlockHeight.fromJSON(e))
                : [],
            infererScoresByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererScoresByBlock)
                ? object.infererScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.fromJSON(e))
                : [],
            forecasterScoresByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterScoresByBlock)
                ? object.forecasterScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.fromJSON(e))
                : [],
            reputerScoresByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerScoresByBlock)
                ? object.reputerScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.fromJSON(e))
                : [],
            reputerListeningCoefficient: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerListeningCoefficient)
                ? object.reputerListeningCoefficient.map((e) => exports.TopicIdActorIdListeningCoefficient.fromJSON(e))
                : [],
            previousReputerRewardFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousReputerRewardFraction)
                ? object.previousReputerRewardFraction.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            previousInferenceRewardFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousInferenceRewardFraction)
                ? object.previousInferenceRewardFraction.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            previousForecastRewardFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousForecastRewardFraction)
                ? object.previousForecastRewardFraction.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            previousForecasterScoreRatio: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousForecasterScoreRatio)
                ? object.previousForecasterScoreRatio.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            totalStake: isSet(object.totalStake) ? globalThis.String(object.totalStake) : "",
            topicStake: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicStake)
                ? object.topicStake.map((e) => exports.TopicIdAndInt.fromJSON(e))
                : [],
            stakeReputerAuthority: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeReputerAuthority)
                ? object.stakeReputerAuthority.map((e) => exports.TopicIdActorIdInt.fromJSON(e))
                : [],
            stakeSumFromDelegator: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeSumFromDelegator)
                ? object.stakeSumFromDelegator.map((e) => exports.TopicIdActorIdInt.fromJSON(e))
                : [],
            delegatedStakes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegatedStakes)
                ? object.delegatedStakes.map((e) => exports.TopicIdDelegatorReputerDelegatorInfo.fromJSON(e))
                : [],
            stakeFromDelegatorsUponReputer: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeFromDelegatorsUponReputer)
                ? object.stakeFromDelegatorsUponReputer.map((e) => exports.TopicIdActorIdInt.fromJSON(e))
                : [],
            delegateRewardPerShare: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegateRewardPerShare)
                ? object.delegateRewardPerShare.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            stakeRemovalsByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeRemovalsByBlock)
                ? object.stakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdReputerStakeRemovalInfo.fromJSON(e))
                : [],
            stakeRemovalsByActor: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeRemovalsByActor)
                ? object.stakeRemovalsByActor.map((e) => exports.ActorIdTopicIdBlockHeight.fromJSON(e))
                : [],
            delegateStakeRemovalsByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegateStakeRemovalsByBlock)
                ? object.delegateStakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.fromJSON(e))
                : [],
            delegateStakeRemovalsByActor: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegateStakeRemovalsByActor)
                ? object.delegateStakeRemovalsByActor.map((e) => exports.DelegatorReputerTopicIdBlockHeight.fromJSON(e))
                : [],
            inferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inferences)
                ? object.inferences.map((e) => exports.TopicIdActorIdInference.fromJSON(e))
                : [],
            forecasts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasts)
                ? object.forecasts.map((e) => exports.TopicIdActorIdForecast.fromJSON(e))
                : [],
            workers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.workers)
                ? object.workers.map((e) => exports.LibP2pKeyAndOffchainNode.fromJSON(e))
                : [],
            reputers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputers)
                ? object.reputers.map((e) => exports.LibP2pKeyAndOffchainNode.fromJSON(e))
                : [],
            topicFeeRevenue: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicFeeRevenue)
                ? object.topicFeeRevenue.map((e) => exports.TopicIdAndInt.fromJSON(e))
                : [],
            previousTopicWeight: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicWeight)
                ? object.previousTopicWeight.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            allInferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allInferences)
                ? object.allInferences.map((e) => exports.TopicIdBlockHeightInferences.fromJSON(e))
                : [],
            allForecasts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allForecasts)
                ? object.allForecasts.map((e) => exports.TopicIdBlockHeightForecasts.fromJSON(e))
                : [],
            allLossBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allLossBundles)
                ? object.allLossBundles.map((e) => exports.TopicIdBlockHeightReputerValueBundles.fromJSON(e))
                : [],
            networkLossBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.networkLossBundles)
                ? object.networkLossBundles.map((e) => exports.TopicIdBlockHeightValueBundles.fromJSON(e))
                : [],
            previousPercentageRewardToStakedReputers: isSet(object.previousPercentageRewardToStakedReputers)
                ? globalThis.String(object.previousPercentageRewardToStakedReputers)
                : "",
            unfulfilledWorkerNonces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.unfulfilledWorkerNonces)
                ? object.unfulfilledWorkerNonces.map((e) => exports.TopicIdAndNonces.fromJSON(e))
                : [],
            unfulfilledReputerNonces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.unfulfilledReputerNonces)
                ? object.unfulfilledReputerNonces.map((e) => exports.TopicIdAndReputerRequestNonces.fromJSON(e))
                : [],
            latestInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestInfererNetworkRegrets)
                ? object.latestInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestForecasterNetworkRegrets)
                ? object.latestForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneInForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneInForecasterNetworkRegrets)
                ? object.latestOneInForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestNaiveInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestNaiveInfererNetworkRegrets)
                ? object.latestNaiveInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutInfererInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutInfererInfererNetworkRegrets)
                ? object.latestOneOutInfererInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutInfererForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutInfererForecasterNetworkRegrets)
                ? object.latestOneOutInfererForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutForecasterInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutForecasterInfererNetworkRegrets)
                ? object.latestOneOutForecasterInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutForecasterForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutForecasterForecasterNetworkRegrets)
                ? object.latestOneOutForecasterForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            topicLastWorkerCommit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicLastWorkerCommit)
                ? object.topicLastWorkerCommit.map((e) => exports.TopicIdTimestampedActorNonce.fromJSON(e))
                : [],
            topicLastReputerCommit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicLastReputerCommit)
                ? object.topicLastReputerCommit.map((e) => exports.TopicIdTimestampedActorNonce.fromJSON(e))
                : [],
            openWorkerWindows: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.openWorkerWindows)
                ? object.openWorkerWindows.map((e) => exports.BlockHeightAndTopicIds.fromJSON(e))
                : [],
            lastDripBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lastDripBlock)
                ? object.lastDripBlock.map((e) => exports.TopicIdAndBlockHeight.fromJSON(e))
                : [],
            topicToNextPossibleChurningBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicToNextPossibleChurningBlock)
                ? object.topicToNextPossibleChurningBlock.map((e) => exports.TopicIdAndBlockHeight.fromJSON(e))
                : [],
            blockToActiveTopics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blockToActiveTopics)
                ? object.blockToActiveTopics.map((e) => exports.BlockHeightTopicIds.fromJSON(e))
                : [],
            blockToLowestActiveTopicWeight: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blockToLowestActiveTopicWeight)
                ? object.blockToLowestActiveTopicWeight.map((e) => exports.BlockHeightTopicIdWeightPair.fromJSON(e))
                : [],
            infererScoreEmas: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererScoreEmas)
                ? object.infererScoreEmas.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            forecasterScoreEmas: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterScoreEmas)
                ? object.forecasterScoreEmas.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            reputerScoreEmas: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerScoreEmas)
                ? object.reputerScoreEmas.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            previousTopicQuantileInfererScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicQuantileInfererScoreEma)
                ? object.previousTopicQuantileInfererScoreEma.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            previousTopicQuantileForecasterScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicQuantileForecasterScoreEma)
                ? object.previousTopicQuantileForecasterScoreEma.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            previousTopicQuantileReputerScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicQuantileReputerScoreEma)
                ? object.previousTopicQuantileReputerScoreEma.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            countInfererInclusionsInTopicActiveSet: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.countInfererInclusionsInTopicActiveSet)
                ? object.countInfererInclusionsInTopicActiveSet.map((e) => exports.TopicIdActorIdUint64.fromJSON(e))
                : [],
            countForecasterInclusionsInTopicActiveSet: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.countForecasterInclusionsInTopicActiveSet)
                ? object.countForecasterInclusionsInTopicActiveSet.map((e) => exports.TopicIdActorIdUint64.fromJSON(e))
                : [],
            activeInferers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.activeInferers)
                ? object.activeInferers.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            activeForecasters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.activeForecasters)
                ? object.activeForecasters.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            lowestInfererScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lowestInfererScoreEma)
                ? object.lowestInfererScoreEma.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            lowestForecasterScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lowestForecasterScoreEma)
                ? object.lowestForecasterScoreEma.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            activeReputers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.activeReputers)
                ? object.activeReputers.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            lowestReputerScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lowestReputerScoreEma)
                ? object.lowestReputerScoreEma.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            lossBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lossBundles)
                ? object.lossBundles.map((e) => exports.TopicIdReputerReputerValueBundle.fromJSON(e))
                : [],
            totalSumPreviousTopicWeights: isSet(object.totalSumPreviousTopicWeights)
                ? globalThis.String(object.totalSumPreviousTopicWeights)
                : "",
            rewardCurrentBlockEmission: isSet(object.rewardCurrentBlockEmission)
                ? globalThis.String(object.rewardCurrentBlockEmission)
                : "",
            whitelistAdmins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.whitelistAdmins)
                ? object.whitelistAdmins.map((e) => globalThis.String(e))
                : [],
            globalWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalWhitelist)
                ? object.globalWhitelist.map((e) => globalThis.String(e))
                : [],
            topicCreatorWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicCreatorWhitelist)
                ? object.topicCreatorWhitelist.map((e) => globalThis.String(e))
                : [],
            topicWorkerWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicWorkerWhitelist)
                ? object.topicWorkerWhitelist.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            topicReputerWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicReputerWhitelist)
                ? object.topicReputerWhitelist.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            topicWorkerWhitelistEnabled: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicWorkerWhitelistEnabled)
                ? object.topicWorkerWhitelistEnabled.map((e) => globalThis.String(e))
                : [],
            topicReputerWhitelistEnabled: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicReputerWhitelistEnabled)
                ? object.topicReputerWhitelistEnabled.map((e) => globalThis.String(e))
                : [],
            lastMedianInferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lastMedianInferences)
                ? object.lastMedianInferences.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            madInferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.madInferences)
                ? object.madInferences.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            initialInfererEmaScore: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.initialInfererEmaScore)
                ? object.initialInfererEmaScore.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            initialForecasterEmaScore: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.initialForecasterEmaScore)
                ? object.initialForecasterEmaScore.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            initialReputerEmaScore: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.initialReputerEmaScore)
                ? object.initialReputerEmaScore.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            globalWorkerWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalWorkerWhitelist)
                ? object.globalWorkerWhitelist.map((e) => globalThis.String(e))
                : [],
            globalReputerWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalReputerWhitelist)
                ? object.globalReputerWhitelist.map((e) => globalThis.String(e))
                : [],
            globalAdminWhitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.globalAdminWhitelist)
                ? object.globalAdminWhitelist.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57;
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if ((_a = message.coreTeamAddresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.coreTeamAddresses = message.coreTeamAddresses;
        }
        if (message.nextTopicId !== "0") {
            obj.nextTopicId = message.nextTopicId;
        }
        if ((_b = message.topics) === null || _b === void 0 ? void 0 : _b.length) {
            obj.topics = message.topics.map((e) => exports.TopicIdAndTopic.toJSON(e));
        }
        if ((_c = message.activeTopics) === null || _c === void 0 ? void 0 : _c.length) {
            obj.activeTopics = message.activeTopics;
        }
        if ((_d = message.rewardableTopics) === null || _d === void 0 ? void 0 : _d.length) {
            obj.rewardableTopics = message.rewardableTopics;
        }
        if ((_e = message.topicWorkers) === null || _e === void 0 ? void 0 : _e.length) {
            obj.topicWorkers = message.topicWorkers.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_f = message.topicReputers) === null || _f === void 0 ? void 0 : _f.length) {
            obj.topicReputers = message.topicReputers.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_g = message.topicRewardNonce) === null || _g === void 0 ? void 0 : _g.length) {
            obj.topicRewardNonce = message.topicRewardNonce.map((e) => exports.TopicIdAndBlockHeight.toJSON(e));
        }
        if ((_h = message.infererScoresByBlock) === null || _h === void 0 ? void 0 : _h.length) {
            obj.infererScoresByBlock = message.infererScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.toJSON(e));
        }
        if ((_j = message.forecasterScoresByBlock) === null || _j === void 0 ? void 0 : _j.length) {
            obj.forecasterScoresByBlock = message.forecasterScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.toJSON(e));
        }
        if ((_k = message.reputerScoresByBlock) === null || _k === void 0 ? void 0 : _k.length) {
            obj.reputerScoresByBlock = message.reputerScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.toJSON(e));
        }
        if ((_l = message.reputerListeningCoefficient) === null || _l === void 0 ? void 0 : _l.length) {
            obj.reputerListeningCoefficient = message.reputerListeningCoefficient.map((e) => exports.TopicIdActorIdListeningCoefficient.toJSON(e));
        }
        if ((_m = message.previousReputerRewardFraction) === null || _m === void 0 ? void 0 : _m.length) {
            obj.previousReputerRewardFraction = message.previousReputerRewardFraction.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_o = message.previousInferenceRewardFraction) === null || _o === void 0 ? void 0 : _o.length) {
            obj.previousInferenceRewardFraction = message.previousInferenceRewardFraction.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_p = message.previousForecastRewardFraction) === null || _p === void 0 ? void 0 : _p.length) {
            obj.previousForecastRewardFraction = message.previousForecastRewardFraction.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_q = message.previousForecasterScoreRatio) === null || _q === void 0 ? void 0 : _q.length) {
            obj.previousForecasterScoreRatio = message.previousForecasterScoreRatio.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if (message.totalStake !== "") {
            obj.totalStake = message.totalStake;
        }
        if ((_r = message.topicStake) === null || _r === void 0 ? void 0 : _r.length) {
            obj.topicStake = message.topicStake.map((e) => exports.TopicIdAndInt.toJSON(e));
        }
        if ((_s = message.stakeReputerAuthority) === null || _s === void 0 ? void 0 : _s.length) {
            obj.stakeReputerAuthority = message.stakeReputerAuthority.map((e) => exports.TopicIdActorIdInt.toJSON(e));
        }
        if ((_t = message.stakeSumFromDelegator) === null || _t === void 0 ? void 0 : _t.length) {
            obj.stakeSumFromDelegator = message.stakeSumFromDelegator.map((e) => exports.TopicIdActorIdInt.toJSON(e));
        }
        if ((_u = message.delegatedStakes) === null || _u === void 0 ? void 0 : _u.length) {
            obj.delegatedStakes = message.delegatedStakes.map((e) => exports.TopicIdDelegatorReputerDelegatorInfo.toJSON(e));
        }
        if ((_v = message.stakeFromDelegatorsUponReputer) === null || _v === void 0 ? void 0 : _v.length) {
            obj.stakeFromDelegatorsUponReputer = message.stakeFromDelegatorsUponReputer.map((e) => exports.TopicIdActorIdInt.toJSON(e));
        }
        if ((_w = message.delegateRewardPerShare) === null || _w === void 0 ? void 0 : _w.length) {
            obj.delegateRewardPerShare = message.delegateRewardPerShare.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_x = message.stakeRemovalsByBlock) === null || _x === void 0 ? void 0 : _x.length) {
            obj.stakeRemovalsByBlock = message.stakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdReputerStakeRemovalInfo.toJSON(e));
        }
        if ((_y = message.stakeRemovalsByActor) === null || _y === void 0 ? void 0 : _y.length) {
            obj.stakeRemovalsByActor = message.stakeRemovalsByActor.map((e) => exports.ActorIdTopicIdBlockHeight.toJSON(e));
        }
        if ((_z = message.delegateStakeRemovalsByBlock) === null || _z === void 0 ? void 0 : _z.length) {
            obj.delegateStakeRemovalsByBlock = message.delegateStakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.toJSON(e));
        }
        if ((_0 = message.delegateStakeRemovalsByActor) === null || _0 === void 0 ? void 0 : _0.length) {
            obj.delegateStakeRemovalsByActor = message.delegateStakeRemovalsByActor.map((e) => exports.DelegatorReputerTopicIdBlockHeight.toJSON(e));
        }
        if ((_1 = message.inferences) === null || _1 === void 0 ? void 0 : _1.length) {
            obj.inferences = message.inferences.map((e) => exports.TopicIdActorIdInference.toJSON(e));
        }
        if ((_2 = message.forecasts) === null || _2 === void 0 ? void 0 : _2.length) {
            obj.forecasts = message.forecasts.map((e) => exports.TopicIdActorIdForecast.toJSON(e));
        }
        if ((_3 = message.workers) === null || _3 === void 0 ? void 0 : _3.length) {
            obj.workers = message.workers.map((e) => exports.LibP2pKeyAndOffchainNode.toJSON(e));
        }
        if ((_4 = message.reputers) === null || _4 === void 0 ? void 0 : _4.length) {
            obj.reputers = message.reputers.map((e) => exports.LibP2pKeyAndOffchainNode.toJSON(e));
        }
        if ((_5 = message.topicFeeRevenue) === null || _5 === void 0 ? void 0 : _5.length) {
            obj.topicFeeRevenue = message.topicFeeRevenue.map((e) => exports.TopicIdAndInt.toJSON(e));
        }
        if ((_6 = message.previousTopicWeight) === null || _6 === void 0 ? void 0 : _6.length) {
            obj.previousTopicWeight = message.previousTopicWeight.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_7 = message.allInferences) === null || _7 === void 0 ? void 0 : _7.length) {
            obj.allInferences = message.allInferences.map((e) => exports.TopicIdBlockHeightInferences.toJSON(e));
        }
        if ((_8 = message.allForecasts) === null || _8 === void 0 ? void 0 : _8.length) {
            obj.allForecasts = message.allForecasts.map((e) => exports.TopicIdBlockHeightForecasts.toJSON(e));
        }
        if ((_9 = message.allLossBundles) === null || _9 === void 0 ? void 0 : _9.length) {
            obj.allLossBundles = message.allLossBundles.map((e) => exports.TopicIdBlockHeightReputerValueBundles.toJSON(e));
        }
        if ((_10 = message.networkLossBundles) === null || _10 === void 0 ? void 0 : _10.length) {
            obj.networkLossBundles = message.networkLossBundles.map((e) => exports.TopicIdBlockHeightValueBundles.toJSON(e));
        }
        if (message.previousPercentageRewardToStakedReputers !== "") {
            obj.previousPercentageRewardToStakedReputers = message.previousPercentageRewardToStakedReputers;
        }
        if ((_11 = message.unfulfilledWorkerNonces) === null || _11 === void 0 ? void 0 : _11.length) {
            obj.unfulfilledWorkerNonces = message.unfulfilledWorkerNonces.map((e) => exports.TopicIdAndNonces.toJSON(e));
        }
        if ((_12 = message.unfulfilledReputerNonces) === null || _12 === void 0 ? void 0 : _12.length) {
            obj.unfulfilledReputerNonces = message.unfulfilledReputerNonces.map((e) => exports.TopicIdAndReputerRequestNonces.toJSON(e));
        }
        if ((_13 = message.latestInfererNetworkRegrets) === null || _13 === void 0 ? void 0 : _13.length) {
            obj.latestInfererNetworkRegrets = message.latestInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_14 = message.latestForecasterNetworkRegrets) === null || _14 === void 0 ? void 0 : _14.length) {
            obj.latestForecasterNetworkRegrets = message.latestForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_15 = message.latestOneInForecasterNetworkRegrets) === null || _15 === void 0 ? void 0 : _15.length) {
            obj.latestOneInForecasterNetworkRegrets = message.latestOneInForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_16 = message.latestNaiveInfererNetworkRegrets) === null || _16 === void 0 ? void 0 : _16.length) {
            obj.latestNaiveInfererNetworkRegrets = message.latestNaiveInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_17 = message.latestOneOutInfererInfererNetworkRegrets) === null || _17 === void 0 ? void 0 : _17.length) {
            obj.latestOneOutInfererInfererNetworkRegrets = message.latestOneOutInfererInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_18 = message.latestOneOutInfererForecasterNetworkRegrets) === null || _18 === void 0 ? void 0 : _18.length) {
            obj.latestOneOutInfererForecasterNetworkRegrets = message.latestOneOutInfererForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_19 = message.latestOneOutForecasterInfererNetworkRegrets) === null || _19 === void 0 ? void 0 : _19.length) {
            obj.latestOneOutForecasterInfererNetworkRegrets = message.latestOneOutForecasterInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_20 = message.latestOneOutForecasterForecasterNetworkRegrets) === null || _20 === void 0 ? void 0 : _20.length) {
            obj.latestOneOutForecasterForecasterNetworkRegrets = message.latestOneOutForecasterForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_21 = message.topicLastWorkerCommit) === null || _21 === void 0 ? void 0 : _21.length) {
            obj.topicLastWorkerCommit = message.topicLastWorkerCommit.map((e) => exports.TopicIdTimestampedActorNonce.toJSON(e));
        }
        if ((_22 = message.topicLastReputerCommit) === null || _22 === void 0 ? void 0 : _22.length) {
            obj.topicLastReputerCommit = message.topicLastReputerCommit.map((e) => exports.TopicIdTimestampedActorNonce.toJSON(e));
        }
        if ((_23 = message.openWorkerWindows) === null || _23 === void 0 ? void 0 : _23.length) {
            obj.openWorkerWindows = message.openWorkerWindows.map((e) => exports.BlockHeightAndTopicIds.toJSON(e));
        }
        if ((_24 = message.lastDripBlock) === null || _24 === void 0 ? void 0 : _24.length) {
            obj.lastDripBlock = message.lastDripBlock.map((e) => exports.TopicIdAndBlockHeight.toJSON(e));
        }
        if ((_25 = message.topicToNextPossibleChurningBlock) === null || _25 === void 0 ? void 0 : _25.length) {
            obj.topicToNextPossibleChurningBlock = message.topicToNextPossibleChurningBlock.map((e) => exports.TopicIdAndBlockHeight.toJSON(e));
        }
        if ((_26 = message.blockToActiveTopics) === null || _26 === void 0 ? void 0 : _26.length) {
            obj.blockToActiveTopics = message.blockToActiveTopics.map((e) => exports.BlockHeightTopicIds.toJSON(e));
        }
        if ((_27 = message.blockToLowestActiveTopicWeight) === null || _27 === void 0 ? void 0 : _27.length) {
            obj.blockToLowestActiveTopicWeight = message.blockToLowestActiveTopicWeight.map((e) => exports.BlockHeightTopicIdWeightPair.toJSON(e));
        }
        if ((_28 = message.infererScoreEmas) === null || _28 === void 0 ? void 0 : _28.length) {
            obj.infererScoreEmas = message.infererScoreEmas.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_29 = message.forecasterScoreEmas) === null || _29 === void 0 ? void 0 : _29.length) {
            obj.forecasterScoreEmas = message.forecasterScoreEmas.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_30 = message.reputerScoreEmas) === null || _30 === void 0 ? void 0 : _30.length) {
            obj.reputerScoreEmas = message.reputerScoreEmas.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_31 = message.previousTopicQuantileInfererScoreEma) === null || _31 === void 0 ? void 0 : _31.length) {
            obj.previousTopicQuantileInfererScoreEma = message.previousTopicQuantileInfererScoreEma.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_32 = message.previousTopicQuantileForecasterScoreEma) === null || _32 === void 0 ? void 0 : _32.length) {
            obj.previousTopicQuantileForecasterScoreEma = message.previousTopicQuantileForecasterScoreEma.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_33 = message.previousTopicQuantileReputerScoreEma) === null || _33 === void 0 ? void 0 : _33.length) {
            obj.previousTopicQuantileReputerScoreEma = message.previousTopicQuantileReputerScoreEma.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_34 = message.countInfererInclusionsInTopicActiveSet) === null || _34 === void 0 ? void 0 : _34.length) {
            obj.countInfererInclusionsInTopicActiveSet = message.countInfererInclusionsInTopicActiveSet.map((e) => exports.TopicIdActorIdUint64.toJSON(e));
        }
        if ((_35 = message.countForecasterInclusionsInTopicActiveSet) === null || _35 === void 0 ? void 0 : _35.length) {
            obj.countForecasterInclusionsInTopicActiveSet = message.countForecasterInclusionsInTopicActiveSet.map((e) => exports.TopicIdActorIdUint64.toJSON(e));
        }
        if ((_36 = message.activeInferers) === null || _36 === void 0 ? void 0 : _36.length) {
            obj.activeInferers = message.activeInferers.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_37 = message.activeForecasters) === null || _37 === void 0 ? void 0 : _37.length) {
            obj.activeForecasters = message.activeForecasters.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_38 = message.lowestInfererScoreEma) === null || _38 === void 0 ? void 0 : _38.length) {
            obj.lowestInfererScoreEma = message.lowestInfererScoreEma.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_39 = message.lowestForecasterScoreEma) === null || _39 === void 0 ? void 0 : _39.length) {
            obj.lowestForecasterScoreEma = message.lowestForecasterScoreEma.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_40 = message.activeReputers) === null || _40 === void 0 ? void 0 : _40.length) {
            obj.activeReputers = message.activeReputers.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_41 = message.lowestReputerScoreEma) === null || _41 === void 0 ? void 0 : _41.length) {
            obj.lowestReputerScoreEma = message.lowestReputerScoreEma.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_42 = message.lossBundles) === null || _42 === void 0 ? void 0 : _42.length) {
            obj.lossBundles = message.lossBundles.map((e) => exports.TopicIdReputerReputerValueBundle.toJSON(e));
        }
        if (message.totalSumPreviousTopicWeights !== "") {
            obj.totalSumPreviousTopicWeights = message.totalSumPreviousTopicWeights;
        }
        if (message.rewardCurrentBlockEmission !== "") {
            obj.rewardCurrentBlockEmission = message.rewardCurrentBlockEmission;
        }
        if ((_43 = message.whitelistAdmins) === null || _43 === void 0 ? void 0 : _43.length) {
            obj.whitelistAdmins = message.whitelistAdmins;
        }
        if ((_44 = message.globalWhitelist) === null || _44 === void 0 ? void 0 : _44.length) {
            obj.globalWhitelist = message.globalWhitelist;
        }
        if ((_45 = message.topicCreatorWhitelist) === null || _45 === void 0 ? void 0 : _45.length) {
            obj.topicCreatorWhitelist = message.topicCreatorWhitelist;
        }
        if ((_46 = message.topicWorkerWhitelist) === null || _46 === void 0 ? void 0 : _46.length) {
            obj.topicWorkerWhitelist = message.topicWorkerWhitelist.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_47 = message.topicReputerWhitelist) === null || _47 === void 0 ? void 0 : _47.length) {
            obj.topicReputerWhitelist = message.topicReputerWhitelist.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_48 = message.topicWorkerWhitelistEnabled) === null || _48 === void 0 ? void 0 : _48.length) {
            obj.topicWorkerWhitelistEnabled = message.topicWorkerWhitelistEnabled;
        }
        if ((_49 = message.topicReputerWhitelistEnabled) === null || _49 === void 0 ? void 0 : _49.length) {
            obj.topicReputerWhitelistEnabled = message.topicReputerWhitelistEnabled;
        }
        if ((_50 = message.lastMedianInferences) === null || _50 === void 0 ? void 0 : _50.length) {
            obj.lastMedianInferences = message.lastMedianInferences.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_51 = message.madInferences) === null || _51 === void 0 ? void 0 : _51.length) {
            obj.madInferences = message.madInferences.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_52 = message.initialInfererEmaScore) === null || _52 === void 0 ? void 0 : _52.length) {
            obj.initialInfererEmaScore = message.initialInfererEmaScore.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_53 = message.initialForecasterEmaScore) === null || _53 === void 0 ? void 0 : _53.length) {
            obj.initialForecasterEmaScore = message.initialForecasterEmaScore.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_54 = message.initialReputerEmaScore) === null || _54 === void 0 ? void 0 : _54.length) {
            obj.initialReputerEmaScore = message.initialReputerEmaScore.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_55 = message.globalWorkerWhitelist) === null || _55 === void 0 ? void 0 : _55.length) {
            obj.globalWorkerWhitelist = message.globalWorkerWhitelist;
        }
        if ((_56 = message.globalReputerWhitelist) === null || _56 === void 0 ? void 0 : _56.length) {
            obj.globalReputerWhitelist = message.globalReputerWhitelist;
        }
        if ((_57 = message.globalAdminWhitelist) === null || _57 === void 0 ? void 0 : _57.length) {
            obj.globalAdminWhitelist = message.globalAdminWhitelist;
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62;
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        message.coreTeamAddresses = ((_a = object.coreTeamAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.nextTopicId = (_b = object.nextTopicId) !== null && _b !== void 0 ? _b : "0";
        message.topics = ((_c = object.topics) === null || _c === void 0 ? void 0 : _c.map((e) => exports.TopicIdAndTopic.fromPartial(e))) || [];
        message.activeTopics = ((_d = object.activeTopics) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.rewardableTopics = ((_e = object.rewardableTopics) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.topicWorkers = ((_f = object.topicWorkers) === null || _f === void 0 ? void 0 : _f.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.topicReputers = ((_g = object.topicReputers) === null || _g === void 0 ? void 0 : _g.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.topicRewardNonce = ((_h = object.topicRewardNonce) === null || _h === void 0 ? void 0 : _h.map((e) => exports.TopicIdAndBlockHeight.fromPartial(e))) || [];
        message.infererScoresByBlock = ((_j = object.infererScoresByBlock) === null || _j === void 0 ? void 0 : _j.map((e) => exports.TopicIdBlockHeightScores.fromPartial(e))) ||
            [];
        message.forecasterScoresByBlock =
            ((_k = object.forecasterScoresByBlock) === null || _k === void 0 ? void 0 : _k.map((e) => exports.TopicIdBlockHeightScores.fromPartial(e))) || [];
        message.reputerScoresByBlock = ((_l = object.reputerScoresByBlock) === null || _l === void 0 ? void 0 : _l.map((e) => exports.TopicIdBlockHeightScores.fromPartial(e))) ||
            [];
        message.reputerListeningCoefficient =
            ((_m = object.reputerListeningCoefficient) === null || _m === void 0 ? void 0 : _m.map((e) => exports.TopicIdActorIdListeningCoefficient.fromPartial(e))) || [];
        message.previousReputerRewardFraction =
            ((_o = object.previousReputerRewardFraction) === null || _o === void 0 ? void 0 : _o.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.previousInferenceRewardFraction =
            ((_p = object.previousInferenceRewardFraction) === null || _p === void 0 ? void 0 : _p.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.previousForecastRewardFraction =
            ((_q = object.previousForecastRewardFraction) === null || _q === void 0 ? void 0 : _q.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.previousForecasterScoreRatio =
            ((_r = object.previousForecasterScoreRatio) === null || _r === void 0 ? void 0 : _r.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.totalStake = (_s = object.totalStake) !== null && _s !== void 0 ? _s : "";
        message.topicStake = ((_t = object.topicStake) === null || _t === void 0 ? void 0 : _t.map((e) => exports.TopicIdAndInt.fromPartial(e))) || [];
        message.stakeReputerAuthority = ((_u = object.stakeReputerAuthority) === null || _u === void 0 ? void 0 : _u.map((e) => exports.TopicIdActorIdInt.fromPartial(e))) || [];
        message.stakeSumFromDelegator = ((_v = object.stakeSumFromDelegator) === null || _v === void 0 ? void 0 : _v.map((e) => exports.TopicIdActorIdInt.fromPartial(e))) || [];
        message.delegatedStakes = ((_w = object.delegatedStakes) === null || _w === void 0 ? void 0 : _w.map((e) => exports.TopicIdDelegatorReputerDelegatorInfo.fromPartial(e))) ||
            [];
        message.stakeFromDelegatorsUponReputer =
            ((_x = object.stakeFromDelegatorsUponReputer) === null || _x === void 0 ? void 0 : _x.map((e) => exports.TopicIdActorIdInt.fromPartial(e))) || [];
        message.delegateRewardPerShare = ((_y = object.delegateRewardPerShare) === null || _y === void 0 ? void 0 : _y.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.stakeRemovalsByBlock =
            ((_z = object.stakeRemovalsByBlock) === null || _z === void 0 ? void 0 : _z.map((e) => exports.BlockHeightTopicIdReputerStakeRemovalInfo.fromPartial(e))) || [];
        message.stakeRemovalsByActor = ((_0 = object.stakeRemovalsByActor) === null || _0 === void 0 ? void 0 : _0.map((e) => exports.ActorIdTopicIdBlockHeight.fromPartial(e))) ||
            [];
        message.delegateStakeRemovalsByBlock =
            ((_1 = object.delegateStakeRemovalsByBlock) === null || _1 === void 0 ? void 0 : _1.map((e) => exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.fromPartial(e))) || [];
        message.delegateStakeRemovalsByActor =
            ((_2 = object.delegateStakeRemovalsByActor) === null || _2 === void 0 ? void 0 : _2.map((e) => exports.DelegatorReputerTopicIdBlockHeight.fromPartial(e))) || [];
        message.inferences = ((_3 = object.inferences) === null || _3 === void 0 ? void 0 : _3.map((e) => exports.TopicIdActorIdInference.fromPartial(e))) || [];
        message.forecasts = ((_4 = object.forecasts) === null || _4 === void 0 ? void 0 : _4.map((e) => exports.TopicIdActorIdForecast.fromPartial(e))) || [];
        message.workers = ((_5 = object.workers) === null || _5 === void 0 ? void 0 : _5.map((e) => exports.LibP2pKeyAndOffchainNode.fromPartial(e))) || [];
        message.reputers = ((_6 = object.reputers) === null || _6 === void 0 ? void 0 : _6.map((e) => exports.LibP2pKeyAndOffchainNode.fromPartial(e))) || [];
        message.topicFeeRevenue = ((_7 = object.topicFeeRevenue) === null || _7 === void 0 ? void 0 : _7.map((e) => exports.TopicIdAndInt.fromPartial(e))) || [];
        message.previousTopicWeight = ((_8 = object.previousTopicWeight) === null || _8 === void 0 ? void 0 : _8.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.allInferences = ((_9 = object.allInferences) === null || _9 === void 0 ? void 0 : _9.map((e) => exports.TopicIdBlockHeightInferences.fromPartial(e))) || [];
        message.allForecasts = ((_10 = object.allForecasts) === null || _10 === void 0 ? void 0 : _10.map((e) => exports.TopicIdBlockHeightForecasts.fromPartial(e))) || [];
        message.allLossBundles = ((_11 = object.allLossBundles) === null || _11 === void 0 ? void 0 : _11.map((e) => exports.TopicIdBlockHeightReputerValueBundles.fromPartial(e))) ||
            [];
        message.networkLossBundles = ((_12 = object.networkLossBundles) === null || _12 === void 0 ? void 0 : _12.map((e) => exports.TopicIdBlockHeightValueBundles.fromPartial(e))) ||
            [];
        message.previousPercentageRewardToStakedReputers = (_13 = object.previousPercentageRewardToStakedReputers) !== null && _13 !== void 0 ? _13 : "";
        message.unfulfilledWorkerNonces = ((_14 = object.unfulfilledWorkerNonces) === null || _14 === void 0 ? void 0 : _14.map((e) => exports.TopicIdAndNonces.fromPartial(e))) || [];
        message.unfulfilledReputerNonces =
            ((_15 = object.unfulfilledReputerNonces) === null || _15 === void 0 ? void 0 : _15.map((e) => exports.TopicIdAndReputerRequestNonces.fromPartial(e))) || [];
        message.latestInfererNetworkRegrets =
            ((_16 = object.latestInfererNetworkRegrets) === null || _16 === void 0 ? void 0 : _16.map((e) => exports.TopicIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestForecasterNetworkRegrets =
            ((_17 = object.latestForecasterNetworkRegrets) === null || _17 === void 0 ? void 0 : _17.map((e) => exports.TopicIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneInForecasterNetworkRegrets =
            ((_18 = object.latestOneInForecasterNetworkRegrets) === null || _18 === void 0 ? void 0 : _18.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) ||
                [];
        message.latestNaiveInfererNetworkRegrets =
            ((_19 = object.latestNaiveInfererNetworkRegrets) === null || _19 === void 0 ? void 0 : _19.map((e) => exports.TopicIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutInfererInfererNetworkRegrets =
            ((_20 = object.latestOneOutInfererInfererNetworkRegrets) === null || _20 === void 0 ? void 0 : _20.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutInfererForecasterNetworkRegrets =
            ((_21 = object.latestOneOutInfererForecasterNetworkRegrets) === null || _21 === void 0 ? void 0 : _21.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutForecasterInfererNetworkRegrets =
            ((_22 = object.latestOneOutForecasterInfererNetworkRegrets) === null || _22 === void 0 ? void 0 : _22.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutForecasterForecasterNetworkRegrets =
            ((_23 = object.latestOneOutForecasterForecasterNetworkRegrets) === null || _23 === void 0 ? void 0 : _23.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.topicLastWorkerCommit =
            ((_24 = object.topicLastWorkerCommit) === null || _24 === void 0 ? void 0 : _24.map((e) => exports.TopicIdTimestampedActorNonce.fromPartial(e))) || [];
        message.topicLastReputerCommit =
            ((_25 = object.topicLastReputerCommit) === null || _25 === void 0 ? void 0 : _25.map((e) => exports.TopicIdTimestampedActorNonce.fromPartial(e))) || [];
        message.openWorkerWindows = ((_26 = object.openWorkerWindows) === null || _26 === void 0 ? void 0 : _26.map((e) => exports.BlockHeightAndTopicIds.fromPartial(e))) || [];
        message.lastDripBlock = ((_27 = object.lastDripBlock) === null || _27 === void 0 ? void 0 : _27.map((e) => exports.TopicIdAndBlockHeight.fromPartial(e))) || [];
        message.topicToNextPossibleChurningBlock =
            ((_28 = object.topicToNextPossibleChurningBlock) === null || _28 === void 0 ? void 0 : _28.map((e) => exports.TopicIdAndBlockHeight.fromPartial(e))) || [];
        message.blockToActiveTopics = ((_29 = object.blockToActiveTopics) === null || _29 === void 0 ? void 0 : _29.map((e) => exports.BlockHeightTopicIds.fromPartial(e))) || [];
        message.blockToLowestActiveTopicWeight =
            ((_30 = object.blockToLowestActiveTopicWeight) === null || _30 === void 0 ? void 0 : _30.map((e) => exports.BlockHeightTopicIdWeightPair.fromPartial(e))) || [];
        message.infererScoreEmas = ((_31 = object.infererScoreEmas) === null || _31 === void 0 ? void 0 : _31.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.forecasterScoreEmas = ((_32 = object.forecasterScoreEmas) === null || _32 === void 0 ? void 0 : _32.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.reputerScoreEmas = ((_33 = object.reputerScoreEmas) === null || _33 === void 0 ? void 0 : _33.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.previousTopicQuantileInfererScoreEma =
            ((_34 = object.previousTopicQuantileInfererScoreEma) === null || _34 === void 0 ? void 0 : _34.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.previousTopicQuantileForecasterScoreEma =
            ((_35 = object.previousTopicQuantileForecasterScoreEma) === null || _35 === void 0 ? void 0 : _35.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.previousTopicQuantileReputerScoreEma =
            ((_36 = object.previousTopicQuantileReputerScoreEma) === null || _36 === void 0 ? void 0 : _36.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.countInfererInclusionsInTopicActiveSet =
            ((_37 = object.countInfererInclusionsInTopicActiveSet) === null || _37 === void 0 ? void 0 : _37.map((e) => exports.TopicIdActorIdUint64.fromPartial(e))) || [];
        message.countForecasterInclusionsInTopicActiveSet =
            ((_38 = object.countForecasterInclusionsInTopicActiveSet) === null || _38 === void 0 ? void 0 : _38.map((e) => exports.TopicIdActorIdUint64.fromPartial(e))) || [];
        message.activeInferers = ((_39 = object.activeInferers) === null || _39 === void 0 ? void 0 : _39.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.activeForecasters = ((_40 = object.activeForecasters) === null || _40 === void 0 ? void 0 : _40.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.lowestInfererScoreEma = ((_41 = object.lowestInfererScoreEma) === null || _41 === void 0 ? void 0 : _41.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.lowestForecasterScoreEma =
            ((_42 = object.lowestForecasterScoreEma) === null || _42 === void 0 ? void 0 : _42.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.activeReputers = ((_43 = object.activeReputers) === null || _43 === void 0 ? void 0 : _43.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.lowestReputerScoreEma = ((_44 = object.lowestReputerScoreEma) === null || _44 === void 0 ? void 0 : _44.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.lossBundles = ((_45 = object.lossBundles) === null || _45 === void 0 ? void 0 : _45.map((e) => exports.TopicIdReputerReputerValueBundle.fromPartial(e))) || [];
        message.totalSumPreviousTopicWeights = (_46 = object.totalSumPreviousTopicWeights) !== null && _46 !== void 0 ? _46 : "";
        message.rewardCurrentBlockEmission = (_47 = object.rewardCurrentBlockEmission) !== null && _47 !== void 0 ? _47 : "";
        message.whitelistAdmins = ((_48 = object.whitelistAdmins) === null || _48 === void 0 ? void 0 : _48.map((e) => e)) || [];
        message.globalWhitelist = ((_49 = object.globalWhitelist) === null || _49 === void 0 ? void 0 : _49.map((e) => e)) || [];
        message.topicCreatorWhitelist = ((_50 = object.topicCreatorWhitelist) === null || _50 === void 0 ? void 0 : _50.map((e) => e)) || [];
        message.topicWorkerWhitelist = ((_51 = object.topicWorkerWhitelist) === null || _51 === void 0 ? void 0 : _51.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.topicReputerWhitelist = ((_52 = object.topicReputerWhitelist) === null || _52 === void 0 ? void 0 : _52.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.topicWorkerWhitelistEnabled = ((_53 = object.topicWorkerWhitelistEnabled) === null || _53 === void 0 ? void 0 : _53.map((e) => e)) || [];
        message.topicReputerWhitelistEnabled = ((_54 = object.topicReputerWhitelistEnabled) === null || _54 === void 0 ? void 0 : _54.map((e) => e)) || [];
        message.lastMedianInferences = ((_55 = object.lastMedianInferences) === null || _55 === void 0 ? void 0 : _55.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.madInferences = ((_56 = object.madInferences) === null || _56 === void 0 ? void 0 : _56.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.initialInfererEmaScore = ((_57 = object.initialInfererEmaScore) === null || _57 === void 0 ? void 0 : _57.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.initialForecasterEmaScore = ((_58 = object.initialForecasterEmaScore) === null || _58 === void 0 ? void 0 : _58.map((e) => exports.TopicIdAndDec.fromPartial(e))) ||
            [];
        message.initialReputerEmaScore = ((_59 = object.initialReputerEmaScore) === null || _59 === void 0 ? void 0 : _59.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.globalWorkerWhitelist = ((_60 = object.globalWorkerWhitelist) === null || _60 === void 0 ? void 0 : _60.map((e) => e)) || [];
        message.globalReputerWhitelist = ((_61 = object.globalReputerWhitelist) === null || _61 === void 0 ? void 0 : _61.map((e) => e)) || [];
        message.globalAdminWhitelist = ((_62 = object.globalAdminWhitelist) === null || _62 === void 0 ? void 0 : _62.map((e) => e)) || [];
        return message;
    },
};
function createBaseTopicIdAndTopic() {
    return { topicId: "0", topic: undefined };
}
exports.TopicIdAndTopic = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.topic !== undefined) {
            topic_1.Topic.encode(message.topic, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndTopic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.topic = topic_1.Topic.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            topic: isSet(object.topic) ? topic_1.Topic.fromJSON(object.topic) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.topic !== undefined) {
            obj.topic = topic_1.Topic.toJSON(message.topic);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndTopic.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdAndTopic();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.topic = (object.topic !== undefined && object.topic !== null) ? topic_1.Topic.fromPartial(object.topic) : undefined;
        return message;
    },
};
function createBaseTopicAndActorId() {
    return { topicId: "0", actorId: "" };
}
exports.TopicAndActorId = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicAndActorId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        return obj;
    },
    create(base) {
        return exports.TopicAndActorId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicAndActorId();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTopicIdAndBlockHeight() {
    return { topicId: "0", blockHeight: "0" };
}
exports.TopicIdAndBlockHeight = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndBlockHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndBlockHeight.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdAndBlockHeight();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseBlockHeightAndTopicIds() {
    return { blockHeight: "0", topicIds: [] };
}
exports.BlockHeightAndTopicIds = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        writer.uint32(18).fork();
        for (const v of message.topicIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightAndTopicIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.topicIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.topicIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicIds) ? object.topicIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.topicIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topicIds = message.topicIds;
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightAndTopicIds.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBlockHeightAndTopicIds();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicIds = ((_b = object.topicIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseTopicIdBlockHeightScores() {
    return { topicId: "0", blockHeight: "0", scores: undefined };
}
exports.TopicIdBlockHeightScores = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightScores();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightScores.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightScores();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdScore() {
    return { topicId: "0", actorId: "", score: undefined };
}
exports.TopicIdActorIdScore = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdScore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdScore.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdScore();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdUint64() {
    return { topicId: "0", actorId: "", uint64: "0" };
}
exports.TopicIdActorIdUint64 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.uint64 !== "0") {
            writer.uint32(24).uint64(message.uint64);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdUint64();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.uint64 = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            uint64: isSet(object.uint64) ? globalThis.String(object.uint64) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.uint64 !== "0") {
            obj.uint64 = message.uint64;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdUint64.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdUint64();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.uint64 = (_c = object.uint64) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseTopicIdActorIdListeningCoefficient() {
    return { topicId: "0", actorId: "", listeningCoefficient: undefined };
}
exports.TopicIdActorIdListeningCoefficient = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.listeningCoefficient !== undefined) {
            types_1.ListeningCoefficient.encode(message.listeningCoefficient, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdListeningCoefficient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.listeningCoefficient = types_1.ListeningCoefficient.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            listeningCoefficient: isSet(object.listeningCoefficient)
                ? types_1.ListeningCoefficient.fromJSON(object.listeningCoefficient)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.listeningCoefficient !== undefined) {
            obj.listeningCoefficient = types_1.ListeningCoefficient.toJSON(message.listeningCoefficient);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdListeningCoefficient.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdListeningCoefficient();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.listeningCoefficient = (object.listeningCoefficient !== undefined && object.listeningCoefficient !== null)
            ? types_1.ListeningCoefficient.fromPartial(object.listeningCoefficient)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdDec() {
    return { topicId: "0", actorId: "", dec: "" };
}
exports.TopicIdActorIdDec = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.dec !== "") {
            writer.uint32(26).string(message.dec);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdDec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dec = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            dec: isSet(object.dec) ? globalThis.String(object.dec) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.dec !== "") {
            obj.dec = message.dec;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdDec.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdDec();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.dec = (_c = object.dec) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseTopicIdAndInt() {
    return { topicId: "0", int: "" };
}
exports.TopicIdAndInt = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.int !== "") {
            writer.uint32(18).string(message.int);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndInt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.int = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            int: isSet(object.int) ? globalThis.String(object.int) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.int !== "") {
            obj.int = message.int;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndInt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdAndInt();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.int = (_b = object.int) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTopicIdActorIdInt() {
    return { topicId: "0", actorId: "", int: "" };
}
exports.TopicIdActorIdInt = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.int !== "") {
            writer.uint32(26).string(message.int);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdInt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.int = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            int: isSet(object.int) ? globalThis.String(object.int) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.int !== "") {
            obj.int = message.int;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdInt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdInt();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.int = (_c = object.int) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseTopicIdDelegatorReputerDelegatorInfo() {
    return { topicId: "0", delegator: "", reputer: "", delegatorInfo: undefined };
}
exports.TopicIdDelegatorReputerDelegatorInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(18).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.delegatorInfo !== undefined) {
            stake_1.DelegatorInfo.encode(message.delegatorInfo, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdDelegatorReputerDelegatorInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.delegatorInfo = stake_1.DelegatorInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            delegatorInfo: isSet(object.delegatorInfo) ? stake_1.DelegatorInfo.fromJSON(object.delegatorInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.delegatorInfo !== undefined) {
            obj.delegatorInfo = stake_1.DelegatorInfo.toJSON(message.delegatorInfo);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdDelegatorReputerDelegatorInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdDelegatorReputerDelegatorInfo();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.delegator = (_b = object.delegator) !== null && _b !== void 0 ? _b : "";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.delegatorInfo = (object.delegatorInfo !== undefined && object.delegatorInfo !== null)
            ? stake_1.DelegatorInfo.fromPartial(object.delegatorInfo)
            : undefined;
        return message;
    },
};
function createBaseBlockHeightTopicIdReputerStakeRemovalInfo() {
    return { blockHeight: "0", topicId: "0", reputer: "", stakeRemovalInfo: undefined };
}
exports.BlockHeightTopicIdReputerStakeRemovalInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.stakeRemovalInfo !== undefined) {
            stake_1.StakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIdReputerStakeRemovalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.stakeRemovalInfo = stake_1.StakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            stakeRemovalInfo: isSet(object.stakeRemovalInfo) ? stake_1.StakeRemovalInfo.fromJSON(object.stakeRemovalInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.stakeRemovalInfo !== undefined) {
            obj.stakeRemovalInfo = stake_1.StakeRemovalInfo.toJSON(message.stakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIdReputerStakeRemovalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBlockHeightTopicIdReputerStakeRemovalInfo();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
            ? stake_1.StakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
            : undefined;
        return message;
    },
};
function createBaseActorIdTopicIdBlockHeight() {
    return { actorId: "", topicId: "0", blockHeight: "0" };
}
exports.ActorIdTopicIdBlockHeight = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorId !== "") {
            writer.uint32(10).string(message.actorId);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActorIdTopicIdBlockHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.ActorIdTopicIdBlockHeight.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseActorIdTopicIdBlockHeight();
        message.actorId = (_a = object.actorId) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseBlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo() {
    return { blockHeight: "0", topicId: "0", delegator: "", reputer: "", delegateStakeRemovalInfo: undefined };
}
exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(26).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(34).string(message.reputer);
        }
        if (message.delegateStakeRemovalInfo !== undefined) {
            stake_1.DelegateStakeRemovalInfo.encode(message.delegateStakeRemovalInfo, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.delegateStakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            delegateStakeRemovalInfo: isSet(object.delegateStakeRemovalInfo)
                ? stake_1.DelegateStakeRemovalInfo.fromJSON(object.delegateStakeRemovalInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.delegateStakeRemovalInfo !== undefined) {
            obj.delegateStakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.toJSON(message.delegateStakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.delegator = (_c = object.delegator) !== null && _c !== void 0 ? _c : "";
        message.reputer = (_d = object.reputer) !== null && _d !== void 0 ? _d : "";
        message.delegateStakeRemovalInfo =
            (object.delegateStakeRemovalInfo !== undefined && object.delegateStakeRemovalInfo !== null)
                ? stake_1.DelegateStakeRemovalInfo.fromPartial(object.delegateStakeRemovalInfo)
                : undefined;
        return message;
    },
};
function createBaseDelegatorReputerTopicIdBlockHeight() {
    return { delegator: "", reputer: "", topicId: "0", blockHeight: "0" };
}
exports.DelegatorReputerTopicIdBlockHeight = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegator !== "") {
            writer.uint32(10).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(32).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegatorReputerTopicIdBlockHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.DelegatorReputerTopicIdBlockHeight.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseDelegatorReputerTopicIdBlockHeight();
        message.delegator = (_a = object.delegator) !== null && _a !== void 0 ? _a : "";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        message.blockHeight = (_d = object.blockHeight) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseTopicIdActorIdInference() {
    return { topicId: "0", actorId: "", inference: undefined };
}
exports.TopicIdActorIdInference = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.inference !== undefined) {
            worker_1.Inference.encode(message.inference, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdInference();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inference = worker_1.Inference.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            inference: isSet(object.inference) ? worker_1.Inference.fromJSON(object.inference) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.inference !== undefined) {
            obj.inference = worker_1.Inference.toJSON(message.inference);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdInference.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdInference();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.inference = (object.inference !== undefined && object.inference !== null)
            ? worker_1.Inference.fromPartial(object.inference)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdForecast() {
    return { topicId: "0", actorId: "", forecast: undefined };
}
exports.TopicIdActorIdForecast = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.forecast !== undefined) {
            worker_1.Forecast.encode(message.forecast, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdForecast();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecast = worker_1.Forecast.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            forecast: isSet(object.forecast) ? worker_1.Forecast.fromJSON(object.forecast) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.forecast !== undefined) {
            obj.forecast = worker_1.Forecast.toJSON(message.forecast);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdForecast.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdForecast();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.forecast = (object.forecast !== undefined && object.forecast !== null)
            ? worker_1.Forecast.fromPartial(object.forecast)
            : undefined;
        return message;
    },
};
function createBaseLibP2pKeyAndOffchainNode() {
    return { libP2pKey: "", offchainNode: undefined };
}
exports.LibP2pKeyAndOffchainNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.libP2pKey !== "") {
            writer.uint32(10).string(message.libP2pKey);
        }
        if (message.offchainNode !== undefined) {
            node_1.OffchainNode.encode(message.offchainNode, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLibP2pKeyAndOffchainNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.libP2pKey = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.offchainNode = node_1.OffchainNode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            libP2pKey: isSet(object.libP2pKey) ? globalThis.String(object.libP2pKey) : "",
            offchainNode: isSet(object.offchainNode) ? node_1.OffchainNode.fromJSON(object.offchainNode) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.libP2pKey !== "") {
            obj.libP2pKey = message.libP2pKey;
        }
        if (message.offchainNode !== undefined) {
            obj.offchainNode = node_1.OffchainNode.toJSON(message.offchainNode);
        }
        return obj;
    },
    create(base) {
        return exports.LibP2pKeyAndOffchainNode.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLibP2pKeyAndOffchainNode();
        message.libP2pKey = (_a = object.libP2pKey) !== null && _a !== void 0 ? _a : "";
        message.offchainNode = (object.offchainNode !== undefined && object.offchainNode !== null)
            ? node_1.OffchainNode.fromPartial(object.offchainNode)
            : undefined;
        return message;
    },
};
function createBaseTopicIdAndDec() {
    return { topicId: "0", dec: "" };
}
exports.TopicIdAndDec = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.dec !== "") {
            writer.uint32(18).string(message.dec);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndDec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.dec = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            dec: isSet(object.dec) ? globalThis.String(object.dec) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.dec !== "") {
            obj.dec = message.dec;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndDec.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdAndDec();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.dec = (_b = object.dec) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTopicIdBlockHeightInferences() {
    return { topicId: "0", blockHeight: "0", inferences: undefined };
}
exports.TopicIdBlockHeightInferences = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.inferences !== undefined) {
            worker_1.Inferences.encode(message.inferences, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightInferences();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferences = worker_1.Inferences.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            inferences: isSet(object.inferences) ? worker_1.Inferences.fromJSON(object.inferences) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.inferences !== undefined) {
            obj.inferences = worker_1.Inferences.toJSON(message.inferences);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightInferences.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightInferences();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.inferences = (object.inferences !== undefined && object.inferences !== null)
            ? worker_1.Inferences.fromPartial(object.inferences)
            : undefined;
        return message;
    },
};
function createBaseTopicIdBlockHeightForecasts() {
    return { topicId: "0", blockHeight: "0", forecasts: undefined };
}
exports.TopicIdBlockHeightForecasts = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.forecasts !== undefined) {
            worker_1.Forecasts.encode(message.forecasts, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightForecasts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecasts = worker_1.Forecasts.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            forecasts: isSet(object.forecasts) ? worker_1.Forecasts.fromJSON(object.forecasts) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.forecasts !== undefined) {
            obj.forecasts = worker_1.Forecasts.toJSON(message.forecasts);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightForecasts.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightForecasts();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.forecasts = (object.forecasts !== undefined && object.forecasts !== null)
            ? worker_1.Forecasts.fromPartial(object.forecasts)
            : undefined;
        return message;
    },
};
function createBaseTopicIdBlockHeightReputerValueBundles() {
    return { topicId: "0", blockHeight: "0", reputerValueBundles: undefined };
}
exports.TopicIdBlockHeightReputerValueBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.reputerValueBundles !== undefined) {
            reputer_1.ReputerValueBundles.encode(message.reputerValueBundles, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightReputerValueBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputerValueBundles = reputer_1.ReputerValueBundles.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            reputerValueBundles: isSet(object.reputerValueBundles)
                ? reputer_1.ReputerValueBundles.fromJSON(object.reputerValueBundles)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.reputerValueBundles !== undefined) {
            obj.reputerValueBundles = reputer_1.ReputerValueBundles.toJSON(message.reputerValueBundles);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightReputerValueBundles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightReputerValueBundles();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.reputerValueBundles = (object.reputerValueBundles !== undefined && object.reputerValueBundles !== null)
            ? reputer_1.ReputerValueBundles.fromPartial(object.reputerValueBundles)
            : undefined;
        return message;
    },
};
function createBaseTopicIdBlockHeightValueBundles() {
    return { topicId: "0", blockHeight: "0", valueBundle: undefined };
}
exports.TopicIdBlockHeightValueBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.valueBundle !== undefined) {
            reputer_1.ValueBundle.encode(message.valueBundle, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightValueBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.valueBundle = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            valueBundle: isSet(object.valueBundle) ? reputer_1.ValueBundle.fromJSON(object.valueBundle) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.valueBundle !== undefined) {
            obj.valueBundle = reputer_1.ValueBundle.toJSON(message.valueBundle);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightValueBundles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightValueBundles();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.valueBundle = (object.valueBundle !== undefined && object.valueBundle !== null)
            ? reputer_1.ValueBundle.fromPartial(object.valueBundle)
            : undefined;
        return message;
    },
};
function createBaseTopicIdAndNonces() {
    return { topicId: "0", nonces: undefined };
}
exports.TopicIdAndNonces = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.nonces !== undefined) {
            nonce_1.Nonces.encode(message.nonces, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndNonces();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nonces = nonce_1.Nonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            nonces: isSet(object.nonces) ? nonce_1.Nonces.fromJSON(object.nonces) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.nonces !== undefined) {
            obj.nonces = nonce_1.Nonces.toJSON(message.nonces);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndNonces.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdAndNonces();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.nonces = (object.nonces !== undefined && object.nonces !== null)
            ? nonce_1.Nonces.fromPartial(object.nonces)
            : undefined;
        return message;
    },
};
function createBaseTopicIdAndReputerRequestNonces() {
    return { topicId: "0", reputerRequestNonces: undefined };
}
exports.TopicIdAndReputerRequestNonces = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputerRequestNonces !== undefined) {
            nonce_1.ReputerRequestNonces.encode(message.reputerRequestNonces, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndReputerRequestNonces();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputerRequestNonces = nonce_1.ReputerRequestNonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputerRequestNonces: isSet(object.reputerRequestNonces)
                ? nonce_1.ReputerRequestNonces.fromJSON(object.reputerRequestNonces)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputerRequestNonces !== undefined) {
            obj.reputerRequestNonces = nonce_1.ReputerRequestNonces.toJSON(message.reputerRequestNonces);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndReputerRequestNonces.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdAndReputerRequestNonces();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputerRequestNonces = (object.reputerRequestNonces !== undefined && object.reputerRequestNonces !== null)
            ? nonce_1.ReputerRequestNonces.fromPartial(object.reputerRequestNonces)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdTimeStampedValue() {
    return { topicId: "0", actorId: "", timestampedValue: undefined };
}
exports.TopicIdActorIdTimeStampedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        if (message.timestampedValue !== undefined) {
            worker_1.TimestampedValue.encode(message.timestampedValue, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdTimeStampedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.timestampedValue = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            timestampedValue: isSet(object.timestampedValue) ? worker_1.TimestampedValue.fromJSON(object.timestampedValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.timestampedValue !== undefined) {
            obj.timestampedValue = worker_1.TimestampedValue.toJSON(message.timestampedValue);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdTimeStampedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdTimeStampedValue();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        message.timestampedValue = (object.timestampedValue !== undefined && object.timestampedValue !== null)
            ? worker_1.TimestampedValue.fromPartial(object.timestampedValue)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdActorIdTimeStampedValue() {
    return { topicId: "0", actorId1: "", actorId2: "", timestampedValue: undefined };
}
exports.TopicIdActorIdActorIdTimeStampedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId1 !== "") {
            writer.uint32(18).string(message.actorId1);
        }
        if (message.actorId2 !== "") {
            writer.uint32(26).string(message.actorId2);
        }
        if (message.timestampedValue !== undefined) {
            worker_1.TimestampedValue.encode(message.timestampedValue, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdActorIdTimeStampedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId1 = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.actorId2 = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.timestampedValue = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId1: isSet(object.actorId1) ? globalThis.String(object.actorId1) : "",
            actorId2: isSet(object.actorId2) ? globalThis.String(object.actorId2) : "",
            timestampedValue: isSet(object.timestampedValue) ? worker_1.TimestampedValue.fromJSON(object.timestampedValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId1 !== "") {
            obj.actorId1 = message.actorId1;
        }
        if (message.actorId2 !== "") {
            obj.actorId2 = message.actorId2;
        }
        if (message.timestampedValue !== undefined) {
            obj.timestampedValue = worker_1.TimestampedValue.toJSON(message.timestampedValue);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdActorIdTimeStampedValue();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId1 = (_b = object.actorId1) !== null && _b !== void 0 ? _b : "";
        message.actorId2 = (_c = object.actorId2) !== null && _c !== void 0 ? _c : "";
        message.timestampedValue = (object.timestampedValue !== undefined && object.timestampedValue !== null)
            ? worker_1.TimestampedValue.fromPartial(object.timestampedValue)
            : undefined;
        return message;
    },
};
function createBaseTopicIdTimestampedActorNonce() {
    return { topicId: "0", timestampedActorNonce: undefined };
}
exports.TopicIdTimestampedActorNonce = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.timestampedActorNonce !== undefined) {
            topic_1.TimestampedActorNonce.encode(message.timestampedActorNonce, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdTimestampedActorNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.timestampedActorNonce = topic_1.TimestampedActorNonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            timestampedActorNonce: isSet(object.timestampedActorNonce)
                ? topic_1.TimestampedActorNonce.fromJSON(object.timestampedActorNonce)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.timestampedActorNonce !== undefined) {
            obj.timestampedActorNonce = topic_1.TimestampedActorNonce.toJSON(message.timestampedActorNonce);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdTimestampedActorNonce.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdTimestampedActorNonce();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.timestampedActorNonce =
            (object.timestampedActorNonce !== undefined && object.timestampedActorNonce !== null)
                ? topic_1.TimestampedActorNonce.fromPartial(object.timestampedActorNonce)
                : undefined;
        return message;
    },
};
function createBaseBlockHeightTopicIds() {
    return { blockHeight: "0", topicIds: undefined };
}
exports.BlockHeightTopicIds = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.topicIds !== undefined) {
            topic_1.TopicIds.encode(message.topicIds, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.topicIds = topic_1.TopicIds.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicIds: isSet(object.topicIds) ? topic_1.TopicIds.fromJSON(object.topicIds) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.topicIds !== undefined) {
            obj.topicIds = topic_1.TopicIds.toJSON(message.topicIds);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIds.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockHeightTopicIds();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicIds = (object.topicIds !== undefined && object.topicIds !== null)
            ? topic_1.TopicIds.fromPartial(object.topicIds)
            : undefined;
        return message;
    },
};
function createBaseBlockHeightTopicIdWeightPair() {
    return { blockHeight: "0", topicWeight: undefined };
}
exports.BlockHeightTopicIdWeightPair = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.topicWeight !== undefined) {
            topic_1.TopicIdWeightPair.encode(message.topicWeight, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIdWeightPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.topicWeight = topic_1.TopicIdWeightPair.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicWeight: isSet(object.topicWeight) ? topic_1.TopicIdWeightPair.fromJSON(object.topicWeight) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.topicWeight !== undefined) {
            obj.topicWeight = topic_1.TopicIdWeightPair.toJSON(message.topicWeight);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIdWeightPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockHeightTopicIdWeightPair();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicWeight = (object.topicWeight !== undefined && object.topicWeight !== null)
            ? topic_1.TopicIdWeightPair.fromPartial(object.topicWeight)
            : undefined;
        return message;
    },
};
function createBaseTopicIdReputerReputerValueBundle() {
    return { topicId: "0", reputer: "", reputerValueBundle: undefined };
}
exports.TopicIdReputerReputerValueBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        if (message.reputerValueBundle !== undefined) {
            reputer_1.ReputerValueBundle.encode(message.reputerValueBundle, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdReputerReputerValueBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputerValueBundle = reputer_1.ReputerValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            reputerValueBundle: isSet(object.reputerValueBundle)
                ? reputer_1.ReputerValueBundle.fromJSON(object.reputerValueBundle)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.reputerValueBundle !== undefined) {
            obj.reputerValueBundle = reputer_1.ReputerValueBundle.toJSON(message.reputerValueBundle);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdReputerReputerValueBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdReputerReputerValueBundle();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        message.reputerValueBundle = (object.reputerValueBundle !== undefined && object.reputerValueBundle !== null)
            ? reputer_1.ReputerValueBundle.fromPartial(object.reputerValueBundle)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

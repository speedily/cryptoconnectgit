import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ReputerValueBundle } from "./reputer";
import { WorkerDataBundle } from "./worker";
export declare const protobufPackage = "emissions.v2";
/**
 * Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
 * and including google themselves
 * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
 * we instead use a repeated field with a single element to represent an
 * optional field and if the repeated field is empty, it is considered to be the
 * same as if the field was not set
 */
export interface OptionalParams {
    version: string[];
    maxSerializedMsgLength: string[];
    minTopicWeight: string[];
    maxTopicsPerBlock: string[];
    requiredMinimumStake: string[];
    removeStakeDelayWindow: string[];
    minEpochLength: string[];
    betaEntropy: string[];
    learningRate: string[];
    maxGradientThreshold: string[];
    minStakeFraction: string[];
    maxUnfulfilledWorkerRequests: string[];
    maxUnfulfilledReputerRequests: string[];
    topicRewardStakeImportance: string[];
    topicRewardFeeRevenueImportance: string[];
    topicRewardAlpha: string[];
    taskRewardAlpha: string[];
    validatorsVsAlloraPercentReward: string[];
    maxSamplesToScaleScores: string[];
    maxTopInferersToReward: string[];
    maxTopForecastersToReward: string[];
    maxTopReputersToReward: string[];
    createTopicFee: string[];
    gradientDescentMaxIters: string[];
    maxRetriesToFulfilNoncesWorker: string[];
    maxRetriesToFulfilNoncesReputer: string[];
    registrationFee: string[];
    defaultPageLimit: string[];
    maxPageLimit: string[];
    minEpochLengthRecordLimit: string[];
    blocksPerMonth: string[];
    pRewardInference: string[];
    pRewardForecast: string[];
    pRewardReputer: string[];
    cRewardInference: string[];
    cRewardForecast: string[];
    cNorm: string[];
    topicFeeRevenueDecayRate: string[];
    epsilonReputer: string[];
    minEffectiveTopicRevenue: string[];
    halfMaxProcessStakeRemovalsEndBlock: string[];
    dataSendingFee: string[];
    epsilonSafeDiv: string[];
}
export interface MsgUpdateParams {
    sender: string;
    params?: OptionalParams | undefined;
}
export interface MsgUpdateParamsResponse {
}
export interface MsgCreateNewTopic {
    /** creator is the message sender. */
    creator: string;
    metadata: string;
    lossMethod: string;
    epochLength: string;
    groundTruthLag: string;
    pNorm: string;
    alphaRegret: string;
    allowNegative: boolean;
    epsilon: string;
    workerSubmissionWindow: string;
}
export interface MsgCreateNewTopicResponse {
    topicId: string;
}
export interface MsgInsertReputerPayload {
    sender: string;
    reputerValueBundle?: ReputerValueBundle | undefined;
}
export interface MsgInsertReputerPayloadResponse {
}
export interface MsgInsertWorkerPayload {
    sender: string;
    workerDataBundle?: WorkerDataBundle | undefined;
}
export interface MsgInsertWorkerPayloadResponse {
}
export interface MsgRegister {
    sender: string;
    topicId: string;
    owner: string;
    isReputer: boolean;
}
export interface MsgRegisterResponse {
    success: boolean;
    message: string;
}
export interface MsgRemoveRegistration {
    sender: string;
    topicId: string;
    isReputer: boolean;
}
export interface MsgRemoveRegistrationResponse {
    success: boolean;
    message: string;
}
export interface MsgAddStake {
    sender: string;
    topicId: string;
    amount: string;
}
export interface MsgAddStakeResponse {
}
export interface MsgRemoveStake {
    sender: string;
    topicId: string;
    amount: string;
}
export interface MsgRemoveStakeResponse {
}
export interface MsgCancelRemoveStake {
    sender: string;
    topicId: string;
}
export interface MsgCancelRemoveStakeResponse {
}
export interface MsgDelegateStake {
    sender: string;
    topicId: string;
    reputer: string;
    amount: string;
}
export interface MsgDelegateStakeResponse {
}
export interface MsgRemoveDelegateStake {
    sender: string;
    reputer: string;
    topicId: string;
    amount: string;
}
export interface MsgRemoveDelegateStakeResponse {
}
export interface MsgCancelRemoveDelegateStake {
    sender: string;
    topicId: string;
    delegator: string;
    reputer: string;
}
export interface MsgCancelRemoveDelegateStakeResponse {
}
/**
 * Inferences are requested by consumers who fund topics by sending ALLO to
 * ecosystem account via TopicFund messages
 */
export interface MsgFundTopic {
    sender: string;
    topicId: string;
    /** how many funds to send from alice with this Inference Request */
    amount: string;
}
export interface MsgFundTopicResponse {
}
export interface MsgAddToWhitelistAdmin {
    sender: string;
    address: string;
}
export interface MsgAddToWhitelistAdminResponse {
}
export interface MsgRemoveFromWhitelistAdmin {
    sender: string;
    address: string;
}
export interface MsgRemoveFromWhitelistAdminResponse {
}
export interface MsgRewardDelegateStakeResponse {
}
export interface MsgRewardDelegateStake {
    sender: string;
    topicId: string;
    reputer: string;
}
export declare const OptionalParams: MessageFns<OptionalParams>;
export declare const MsgUpdateParams: MessageFns<MsgUpdateParams>;
export declare const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse>;
export declare const MsgCreateNewTopic: MessageFns<MsgCreateNewTopic>;
export declare const MsgCreateNewTopicResponse: MessageFns<MsgCreateNewTopicResponse>;
export declare const MsgInsertReputerPayload: MessageFns<MsgInsertReputerPayload>;
export declare const MsgInsertReputerPayloadResponse: MessageFns<MsgInsertReputerPayloadResponse>;
export declare const MsgInsertWorkerPayload: MessageFns<MsgInsertWorkerPayload>;
export declare const MsgInsertWorkerPayloadResponse: MessageFns<MsgInsertWorkerPayloadResponse>;
export declare const MsgRegister: MessageFns<MsgRegister>;
export declare const MsgRegisterResponse: MessageFns<MsgRegisterResponse>;
export declare const MsgRemoveRegistration: MessageFns<MsgRemoveRegistration>;
export declare const MsgRemoveRegistrationResponse: MessageFns<MsgRemoveRegistrationResponse>;
export declare const MsgAddStake: MessageFns<MsgAddStake>;
export declare const MsgAddStakeResponse: MessageFns<MsgAddStakeResponse>;
export declare const MsgRemoveStake: MessageFns<MsgRemoveStake>;
export declare const MsgRemoveStakeResponse: MessageFns<MsgRemoveStakeResponse>;
export declare const MsgCancelRemoveStake: MessageFns<MsgCancelRemoveStake>;
export declare const MsgCancelRemoveStakeResponse: MessageFns<MsgCancelRemoveStakeResponse>;
export declare const MsgDelegateStake: MessageFns<MsgDelegateStake>;
export declare const MsgDelegateStakeResponse: MessageFns<MsgDelegateStakeResponse>;
export declare const MsgRemoveDelegateStake: MessageFns<MsgRemoveDelegateStake>;
export declare const MsgRemoveDelegateStakeResponse: MessageFns<MsgRemoveDelegateStakeResponse>;
export declare const MsgCancelRemoveDelegateStake: MessageFns<MsgCancelRemoveDelegateStake>;
export declare const MsgCancelRemoveDelegateStakeResponse: MessageFns<MsgCancelRemoveDelegateStakeResponse>;
export declare const MsgFundTopic: MessageFns<MsgFundTopic>;
export declare const MsgFundTopicResponse: MessageFns<MsgFundTopicResponse>;
export declare const MsgAddToWhitelistAdmin: MessageFns<MsgAddToWhitelistAdmin>;
export declare const MsgAddToWhitelistAdminResponse: MessageFns<MsgAddToWhitelistAdminResponse>;
export declare const MsgRemoveFromWhitelistAdmin: MessageFns<MsgRemoveFromWhitelistAdmin>;
export declare const MsgRemoveFromWhitelistAdminResponse: MessageFns<MsgRemoveFromWhitelistAdminResponse>;
export declare const MsgRewardDelegateStakeResponse: MessageFns<MsgRewardDelegateStakeResponse>;
export declare const MsgRewardDelegateStake: MessageFns<MsgRewardDelegateStake>;
/** Msg defines the module Msg service. */
export interface Msg {
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    CreateNewTopic(request: MsgCreateNewTopic): Promise<MsgCreateNewTopicResponse>;
    Register(request: MsgRegister): Promise<MsgRegisterResponse>;
    RemoveRegistration(request: MsgRemoveRegistration): Promise<MsgRemoveRegistrationResponse>;
    AddStake(request: MsgAddStake): Promise<MsgAddStakeResponse>;
    RemoveStake(request: MsgRemoveStake): Promise<MsgRemoveStakeResponse>;
    CancelRemoveStake(request: MsgCancelRemoveStake): Promise<MsgCancelRemoveStakeResponse>;
    DelegateStake(request: MsgDelegateStake): Promise<MsgDelegateStakeResponse>;
    RewardDelegateStake(request: MsgRewardDelegateStake): Promise<MsgRewardDelegateStakeResponse>;
    RemoveDelegateStake(request: MsgRemoveDelegateStake): Promise<MsgRemoveDelegateStakeResponse>;
    CancelRemoveDelegateStake(request: MsgCancelRemoveDelegateStake): Promise<MsgCancelRemoveDelegateStakeResponse>;
    FundTopic(request: MsgFundTopic): Promise<MsgFundTopicResponse>;
    AddToWhitelistAdmin(request: MsgAddToWhitelistAdmin): Promise<MsgAddToWhitelistAdminResponse>;
    RemoveFromWhitelistAdmin(request: MsgRemoveFromWhitelistAdmin): Promise<MsgRemoveFromWhitelistAdminResponse>;
    InsertWorkerPayload(request: MsgInsertWorkerPayload): Promise<MsgInsertWorkerPayloadResponse>;
    InsertReputerPayload(request: MsgInsertReputerPayload): Promise<MsgInsertReputerPayloadResponse>;
}
export declare const MsgServiceName = "emissions.v2.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    CreateNewTopic(request: MsgCreateNewTopic): Promise<MsgCreateNewTopicResponse>;
    Register(request: MsgRegister): Promise<MsgRegisterResponse>;
    RemoveRegistration(request: MsgRemoveRegistration): Promise<MsgRemoveRegistrationResponse>;
    AddStake(request: MsgAddStake): Promise<MsgAddStakeResponse>;
    RemoveStake(request: MsgRemoveStake): Promise<MsgRemoveStakeResponse>;
    CancelRemoveStake(request: MsgCancelRemoveStake): Promise<MsgCancelRemoveStakeResponse>;
    DelegateStake(request: MsgDelegateStake): Promise<MsgDelegateStakeResponse>;
    RewardDelegateStake(request: MsgRewardDelegateStake): Promise<MsgRewardDelegateStakeResponse>;
    RemoveDelegateStake(request: MsgRemoveDelegateStake): Promise<MsgRemoveDelegateStakeResponse>;
    CancelRemoveDelegateStake(request: MsgCancelRemoveDelegateStake): Promise<MsgCancelRemoveDelegateStakeResponse>;
    FundTopic(request: MsgFundTopic): Promise<MsgFundTopicResponse>;
    AddToWhitelistAdmin(request: MsgAddToWhitelistAdmin): Promise<MsgAddToWhitelistAdminResponse>;
    RemoveFromWhitelistAdmin(request: MsgRemoveFromWhitelistAdmin): Promise<MsgRemoveFromWhitelistAdminResponse>;
    InsertWorkerPayload(request: MsgInsertWorkerPayload): Promise<MsgInsertWorkerPayloadResponse>;
    InsertReputerPayload(request: MsgInsertReputerPayload): Promise<MsgInsertReputerPayloadResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=tx.d.ts.map
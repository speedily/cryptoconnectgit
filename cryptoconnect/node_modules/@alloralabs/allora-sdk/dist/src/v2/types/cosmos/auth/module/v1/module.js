"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/auth/module/v1/module.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleAccountPermission = exports.Module = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "cosmos.auth.module.v1";
function createBaseModule() {
    return { bech32Prefix: "", moduleAccountPermissions: [], authority: "" };
}
exports.Module = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bech32Prefix !== "") {
            writer.uint32(10).string(message.bech32Prefix);
        }
        for (const v of message.moduleAccountPermissions) {
            exports.ModuleAccountPermission.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.authority !== "") {
            writer.uint32(26).string(message.authority);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bech32Prefix = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleAccountPermissions.push(exports.ModuleAccountPermission.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bech32Prefix: isSet(object.bech32Prefix) ? globalThis.String(object.bech32Prefix) : "",
            moduleAccountPermissions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.moduleAccountPermissions)
                ? object.moduleAccountPermissions.map((e) => exports.ModuleAccountPermission.fromJSON(e))
                : [],
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.bech32Prefix !== "") {
            obj.bech32Prefix = message.bech32Prefix;
        }
        if ((_a = message.moduleAccountPermissions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.moduleAccountPermissions = message.moduleAccountPermissions.map((e) => exports.ModuleAccountPermission.toJSON(e));
        }
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        return obj;
    },
    create(base) {
        return exports.Module.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseModule();
        message.bech32Prefix = (_a = object.bech32Prefix) !== null && _a !== void 0 ? _a : "";
        message.moduleAccountPermissions =
            ((_b = object.moduleAccountPermissions) === null || _b === void 0 ? void 0 : _b.map((e) => exports.ModuleAccountPermission.fromPartial(e))) || [];
        message.authority = (_c = object.authority) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseModuleAccountPermission() {
    return { account: "", permissions: [] };
}
exports.ModuleAccountPermission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        for (const v of message.permissions) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleAccountPermission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.permissions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            permissions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.permissions)
                ? object.permissions.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if ((_a = message.permissions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.permissions = message.permissions;
        }
        return obj;
    },
    create(base) {
        return exports.ModuleAccountPermission.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseModuleAccountPermission();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.permissions = ((_b = object.permissions) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

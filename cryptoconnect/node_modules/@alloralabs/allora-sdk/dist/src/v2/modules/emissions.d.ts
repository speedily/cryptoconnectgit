import { DeliverTxResponse, QueryClient, StdFee } from "@cosmjs/stargate";
import { QueryServiceClientImpl as EmissionsQueryClient, GetDelegateStakeInTopicInReputerResponse, GetDelegateStakeRemovalsUpUntilBlockResponse, GetForecasterNetworkRegretResponse, GetForecastsAtBlockResponse, GetInferencesAtBlockResponse, GetInfererNetworkRegretResponse, GetLatestAvailableNetworkInferencesOutlierResistantResponse, GetLatestAvailableNetworkInferencesResponse, GetLatestTopicInferencesResponse, GetMultiReputerStakeInTopicResponse, GetNetworkInferencesAtBlockOutlierResistantResponse, GetNetworkInferencesAtBlockResponse, GetNetworkLossBundleAtBlockResponse, GetNextTopicIdResponse, GetOneInForecasterNetworkRegretResponse, GetReputerNodeInfoResponse, GetReputerStakeInTopicResponse, GetStakeFromDelegatorInTopicInReputerResponse, GetStakeFromDelegatorInTopicResponse, GetStakeFromReputerInTopicInSelfResponse, GetStakeRemovalInfoResponse, GetStakeRemovalsUpUntilBlockResponse, GetTopicResponse, GetTopicStakeResponse, GetTotalStakeResponse, GetUnfulfilledWorkerNoncesResponse, GetWorkerLatestInferenceByTopicIdResponse, GetWorkerNodeInfoResponse, IsReputerNonceUnfulfilledResponse, IsReputerRegisteredInTopicIdResponse, IsWorkerNonceUnfulfilledResponse, IsWorkerRegisteredInTopicIdResponse, GetUnfulfilledReputerNoncesResponse, IsWhitelistAdminResponse, GetTopicLastWorkerCommitInfoResponse, GetTopicLastReputerCommitInfoResponse, GetTopicRewardNonceResponse, GetReputerLossBundlesAtBlockResponse, GetDelegateStakePlacementResponse, GetStakeReputerAuthorityResponse, GetDelegateStakeUponReputerResponse, GetDelegateRewardPerShareResponse, GetStakeRemovalForReputerAndTopicIdResponse, GetDelegateStakeRemovalResponse, GetPreviousTopicWeightResponse, GetTotalSumPreviousTopicWeightsResponse, TopicExistsResponse, IsTopicActiveResponse, GetTopicFeeRevenueResponse, GetInfererScoreEmaResponse, GetForecasterScoreEmaResponse, GetReputerScoreEmaResponse, GetInferenceScoresUntilBlockResponse, GetPreviousTopicQuantileForecasterScoreEmaResponse, GetPreviousTopicQuantileInfererScoreEmaResponse, GetPreviousTopicQuantileReputerScoreEmaResponse, GetWorkerInferenceScoresAtBlockResponse, GetCurrentLowestInfererScoreResponse, GetForecastScoresUntilBlockResponse, GetWorkerForecastScoresAtBlockResponse, GetCurrentLowestForecasterScoreResponse, GetReputersScoresAtBlockResponse, GetCurrentLowestReputerScoreResponse, GetListeningCoefficientResponse, GetPreviousReputerRewardFractionResponse, GetPreviousInferenceRewardFractionResponse, GetOneOutInfererForecasterNetworkRegretResponse, GetPreviousForecastRewardFractionResponse, GetPreviousPercentageRewardToStakedReputersResponse, GetTotalRewardToDistributeResponse, GetNaiveInfererNetworkRegretResponse, GetOneOutInfererInfererNetworkRegretResponse, GetOneOutForecasterInfererNetworkRegretResponse, GetOneOutForecasterForecasterNetworkRegretResponse, GetActiveTopicsAtBlockResponse, GetNextChurningBlockByTopicIdResponse, GetCountInfererInclusionsInTopicResponse, GetCountForecasterInclusionsInTopicResponse, GetActiveReputersForTopicResponse, GetActiveForecastersForTopicResponse, GetActiveInferersForTopicResponse, IsWhitelistedGlobalWorkerResponse, IsWhitelistedGlobalReputerResponse, IsWhitelistedGlobalAdminResponse, IsTopicWorkerWhitelistEnabledResponse, IsTopicReputerWhitelistEnabledResponse, IsWhitelistedTopicCreatorResponse, IsWhitelistedGlobalActorResponse, IsWhitelistedTopicWorkerResponse, IsWhitelistedTopicReputerResponse, CanUpdateAllGlobalWhitelistsResponse, CanUpdateGlobalWorkerWhitelistResponse, CanUpdateGlobalReputerWhitelistResponse, CanUpdateParamsResponse, CanUpdateTopicWhitelistResponse, CanCreateTopicResponse, CanSubmitWorkerPayloadResponse, CanSubmitReputerPayloadResponse, GetTopicInitialInfererEmaScoreResponse, GetTopicInitialForecasterEmaScoreResponse, GetTopicInitialReputerEmaScoreResponse } from "../types/generated/emissions/v7/query";
import { BaseModule } from "./base";
import { SigningStargateClient } from "@cosmjs/stargate";
import { CreateNewTopicRequest } from "../types/generated/emissions/v7/tx";
import { ReputerDataBundle, WorkerDataBundle } from "../types/worker";
export declare class EmissionsModule extends BaseModule<EmissionsQueryClient> {
    constructor(queryClient: QueryClient, signingClient?: SigningStargateClient);
    getNextTopicId(): Promise<GetNextTopicIdResponse>;
    getTopic(topicId: string): Promise<GetTopicResponse>;
    getWorkerLatestInferenceByTopicId(topicId: string, workerAddress: string): Promise<GetWorkerLatestInferenceByTopicIdResponse>;
    getInferencesAtBlock(topicId: string, blockHeight: string): Promise<GetInferencesAtBlockResponse>;
    getLatestTopicInferences(topicId: string): Promise<GetLatestTopicInferencesResponse>;
    getForecastsAtBlock(topicId: string, blockHeight: string): Promise<GetForecastsAtBlockResponse>;
    getNetworkLossBundleAtBlock(topicId: string, blockHeight: string): Promise<GetNetworkLossBundleAtBlockResponse>;
    getTotalStake(): Promise<GetTotalStakeResponse>;
    getReputerStakeInTopic(address: string, topicId: string): Promise<GetReputerStakeInTopicResponse>;
    getMultiReputerStakeInTopic(addresses: string[], topicId: string): Promise<GetMultiReputerStakeInTopicResponse>;
    getStakeFromReputerInTopicInSelf(reputerAddress: string, topicId: string): Promise<GetStakeFromReputerInTopicInSelfResponse>;
    getDelegateStakeInTopicInReputer(reputerAddress: string, topicId: string): Promise<GetDelegateStakeInTopicInReputerResponse>;
    getStakeFromDelegatorInTopicInReputer(delegatorAddress: string, reputerAddress: string, topicId: string): Promise<GetStakeFromDelegatorInTopicInReputerResponse>;
    getStakeFromDelegatorInTopic(delegatorAddress: string, topicId: string): Promise<GetStakeFromDelegatorInTopicResponse>;
    getTopicStake(topicId: string): Promise<GetTopicStakeResponse>;
    getStakeRemovalsUpUntilBlock(blockHeight: string): Promise<GetStakeRemovalsUpUntilBlockResponse>;
    getDelegateStakeRemovalsUpUntilBlock(blockHeight: string): Promise<GetDelegateStakeRemovalsUpUntilBlockResponse>;
    getStakeRemovalInfo(topicId: string, reputer: string): Promise<GetStakeRemovalInfoResponse>;
    getWorkerNodeInfo(address: string): Promise<GetWorkerNodeInfoResponse>;
    getReputerNodeInfo(address: string): Promise<GetReputerNodeInfoResponse>;
    isWorkerRegisteredInTopicId(topicId: string, address: string): Promise<IsWorkerRegisteredInTopicIdResponse>;
    isReputerRegisteredInTopicId(topicId: string, address: string): Promise<IsReputerRegisteredInTopicIdResponse>;
    getNetworkInferencesAtBlock(topicId: string, blockHeight: string): Promise<GetNetworkInferencesAtBlockResponse>;
    getNetworkInferencesAtBlockOutlierResistant(topicId: string, blockHeight: string): Promise<GetNetworkInferencesAtBlockOutlierResistantResponse>;
    getLatestAvailableNetworkInferences(topicId: string): Promise<GetLatestAvailableNetworkInferencesResponse>;
    getLatestAvailableNetworkInferencesOutlierResistant(topicId: string): Promise<GetLatestAvailableNetworkInferencesOutlierResistantResponse>;
    IsWorkerNonceUnfulfilled(topicId: string, blockHeight: string): Promise<IsWorkerNonceUnfulfilledResponse>;
    isReputerNonceUnfulfilled(topicId: string, blockHeight: string): Promise<IsReputerNonceUnfulfilledResponse>;
    getUnfulfilledWorkerNonces(topicId: string): Promise<GetUnfulfilledWorkerNoncesResponse>;
    getUnfulfilledReputerNonces(topicId: string): Promise<GetUnfulfilledReputerNoncesResponse>;
    getInfererNetworkRegret(topicId: string, actorId: string): Promise<GetInfererNetworkRegretResponse>;
    getForecasterNetworkRegret(topicId: string, worker: string): Promise<GetForecasterNetworkRegretResponse>;
    getOneInForecasterNetworkRegret(topicId: string, forecaster: string, inferer: string): Promise<GetOneInForecasterNetworkRegretResponse>;
    isWhitelistAdmin(address: string): Promise<IsWhitelistAdminResponse>;
    getTopicLastWorkerCommitInfo(topicId: string): Promise<GetTopicLastWorkerCommitInfoResponse>;
    getTopicLastReputerCommitInfo(topicId: string): Promise<GetTopicLastReputerCommitInfoResponse>;
    getTopicRewardNonce(topicId: string): Promise<GetTopicRewardNonceResponse>;
    getReputerLossBundlesAtBlock(topicId: string, blockHeight: string): Promise<GetReputerLossBundlesAtBlockResponse>;
    getStakeReputerAuthority(topicId: string, reputer: string): Promise<GetStakeReputerAuthorityResponse>;
    getDelegateStakePlacement(topicId: string, delegator: string, target: string): Promise<GetDelegateStakePlacementResponse>;
    getDelegateStakeUponReputer(topicId: string, target: string): Promise<GetDelegateStakeUponReputerResponse>;
    getDelegateRewardPerShare(topicId: string, reputer: string): Promise<GetDelegateRewardPerShareResponse>;
    getStakeRemovalForReputerAndTopicId(reputer: string, topicId: string): Promise<GetStakeRemovalForReputerAndTopicIdResponse>;
    getDelegateStakeRemoval(blockHeight: string, topicId: string, delegator: string, reputer: string): Promise<GetDelegateStakeRemovalResponse>;
    getPreviousTopicWeight(topicId: string): Promise<GetPreviousTopicWeightResponse>;
    getTotalSumPreviousTopicWeights(): Promise<GetTotalSumPreviousTopicWeightsResponse>;
    topicExists(topicId: string): Promise<TopicExistsResponse>;
    isTopicActive(topicId: string): Promise<IsTopicActiveResponse>;
    getTopicFeeRevenue(topicId: string): Promise<GetTopicFeeRevenueResponse>;
    getInfererScoreEma(topicId: string, inferer: string): Promise<GetInfererScoreEmaResponse>;
    getForecasterScoreEma(topicId: string, forecaster: string): Promise<GetForecasterScoreEmaResponse>;
    getReputerScoreEma(topicId: string, reputer: string): Promise<GetReputerScoreEmaResponse>;
    getInferenceScoresUntilBlock(topicId: string, blockHeight: string): Promise<GetInferenceScoresUntilBlockResponse>;
    getPreviousTopicQuantileForecasterScoreEma(topicId: string): Promise<GetPreviousTopicQuantileForecasterScoreEmaResponse>;
    getPreviousTopicQuantileInfererScoreEma(topicId: string): Promise<GetPreviousTopicQuantileInfererScoreEmaResponse>;
    getPreviousTopicQuantileReputerScoreEma(topicId: string): Promise<GetPreviousTopicQuantileReputerScoreEmaResponse>;
    getWorkerInferenceScoresAtBlock(topicId: string, blockHeight: string): Promise<GetWorkerInferenceScoresAtBlockResponse>;
    getCurrentLowestInfererScore(topicId: string): Promise<GetCurrentLowestInfererScoreResponse>;
    getForecastScoresUntilBlock(topicId: string, blockHeight: string): Promise<GetForecastScoresUntilBlockResponse>;
    getWorkerForecastScoresAtBlock(topicId: string, blockHeight: string): Promise<GetWorkerForecastScoresAtBlockResponse>;
    getCurrentLowestForecasterScore(topicId: string): Promise<GetCurrentLowestForecasterScoreResponse>;
    getReputersScoresAtBlock(topicId: string, blockHeight: string): Promise<GetReputersScoresAtBlockResponse>;
    getCurrentLowestReputerScore(topicId: string): Promise<GetCurrentLowestReputerScoreResponse>;
    getListeningCoefficient(topicId: string, reputer: string): Promise<GetListeningCoefficientResponse>;
    getPreviousReputerRewardFraction(topicId: string, reputer: string): Promise<GetPreviousReputerRewardFractionResponse>;
    getPreviousInferenceRewardFraction(topicId: string, worker: string): Promise<GetPreviousInferenceRewardFractionResponse>;
    getPreviousForecastRewardFraction(topicId: string, worker: string): Promise<GetPreviousForecastRewardFractionResponse>;
    getPreviousPercentageRewardToStakedReputers(topicId: string): Promise<GetPreviousPercentageRewardToStakedReputersResponse>;
    getTotalRewardToDistribute(topicId: string): Promise<GetTotalRewardToDistributeResponse>;
    getNaiveInfererNetworkRegret(topicId: string, inferer: string): Promise<GetNaiveInfererNetworkRegretResponse>;
    getOneOutInfererInfererNetworkRegret(topicId: string, oneOutInferer: string, inferer: string): Promise<GetOneOutInfererInfererNetworkRegretResponse>;
    getOneOutInfererForecasterNetworkRegret(topicId: string, oneOutInferer: string, forecaster: string): Promise<GetOneOutInfererForecasterNetworkRegretResponse>;
    getOneOutForecasterInfererNetworkRegret(topicId: string, oneOutForecaster: string, inferer: string): Promise<GetOneOutForecasterInfererNetworkRegretResponse>;
    getOneOutForecasterForecasterNetworkRegret(topicId: string, oneOutForecaster: string, forecaster: string): Promise<GetOneOutForecasterForecasterNetworkRegretResponse>;
    getActiveTopicsAtBlock(blockHeight: string): Promise<GetActiveTopicsAtBlockResponse>;
    getNextChurningBlockByTopicId(topicId: string): Promise<GetNextChurningBlockByTopicIdResponse>;
    getCountInfererInclusionsInTopic(topicId: string, inferer: string): Promise<GetCountInfererInclusionsInTopicResponse>;
    getCountForecasterInclusionsInTopic(topicId: string, forecaster: string): Promise<GetCountForecasterInclusionsInTopicResponse>;
    getActiveReputersForTopic(topicId: string): Promise<GetActiveReputersForTopicResponse>;
    getActiveForecastersForTopic(topicId: string): Promise<GetActiveForecastersForTopicResponse>;
    getActiveInferersForTopic(topicId: string): Promise<GetActiveInferersForTopicResponse>;
    isWhitelistedGlobalWorker(address: string): Promise<IsWhitelistedGlobalWorkerResponse>;
    isWhitelistedGlobalReputer(address: string): Promise<IsWhitelistedGlobalReputerResponse>;
    isWhitelistedGlobalAdmin(address: string): Promise<IsWhitelistedGlobalAdminResponse>;
    isTopicWorkerWhitelistEnabled(topicId: string): Promise<IsTopicWorkerWhitelistEnabledResponse>;
    isTopicReputerWhitelistEnabled(topicId: string): Promise<IsTopicReputerWhitelistEnabledResponse>;
    isWhitelistedTopicCreator(address: string): Promise<IsWhitelistedTopicCreatorResponse>;
    isWhitelistedGlobalActor(address: string): Promise<IsWhitelistedGlobalActorResponse>;
    isWhitelistedTopicWorker(address: string, topicId: string): Promise<IsWhitelistedTopicWorkerResponse>;
    isWhitelistedTopicReputer(address: string, topicId: string): Promise<IsWhitelistedTopicReputerResponse>;
    canUpdateAllGlobalWhitelists(address: string): Promise<CanUpdateAllGlobalWhitelistsResponse>;
    canUpdateGlobalWorkerWhitelist(address: string): Promise<CanUpdateGlobalWorkerWhitelistResponse>;
    canUpdateGlobalReputerWhitelist(address: string): Promise<CanUpdateGlobalReputerWhitelistResponse>;
    canUpdateParams(address: string): Promise<CanUpdateParamsResponse>;
    canUpdateTopicWhitelist(address: string, topicId: string): Promise<CanUpdateTopicWhitelistResponse>;
    canCreateTopic(address: string): Promise<CanCreateTopicResponse>;
    canSubmitWorkerPayload(address: string, topicId: string): Promise<CanSubmitWorkerPayloadResponse>;
    canSubmitReputerPayload(address: string, topicId: string): Promise<CanSubmitReputerPayloadResponse>;
    getTopicInitialInfererEmaScore(topicId: string): Promise<GetTopicInitialInfererEmaScoreResponse>;
    getTopicInitialForecasterEmaScore(topicId: string): Promise<GetTopicInitialForecasterEmaScoreResponse>;
    getTopicInitialReputerEmaScore(topicId: string): Promise<GetTopicInitialReputerEmaScoreResponse>;
    createNewTopic(topicConfig: CreateNewTopicRequest, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    register(sender: string, topicId: string, owner: string, isReputer: boolean, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeRegistration(sender: string, topicId: string, isReputer: boolean, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addStake(sender: string, topicId: string, amount: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeStake(sender: string, topicId: string, amount: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    cancelRemoveStake(sender: string, topicId: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    delegateStakeToReputer(sender: string, topicId: string, reputer: string, amount: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    withdrawReputerDelegationRewards(sender: string, topicId: string, reputer: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeStakeFromReputer(sender: string, topicId: string, reputer: string, amount: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    cancelRemoveStakeFromReputer(sender: string, topicId: string, delegator: string, reputer: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    fundTopic(sender: string, topicId: string, amount: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToWhitelistAdmin(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromWhitelistAdmin(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    insertWorkerPayload(sender: string, workerDataBundle: WorkerDataBundle, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    insertReputerPayload(sender: string, reputerDataBundle: ReputerDataBundle, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToGlobalWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromGlobalWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToGlobalWorkerWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromGlobalWorkerWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToGlobalReputerWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromGlobalReputerWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToGlobalAdminWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromGlobalAdminWhitelist(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkAddToGlobalWorkerWhitelist(sender: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkRemoveFromGlobalWorkerWhitelist(sender: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkAddToGlobalReputerWhitelist(sender: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkRemoveFromGlobalReputerWhitelist(sender: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkAddToTopicWorkerWhitelist(sender: string, topicId: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkRemoveFromTopicWorkerWhitelist(sender: string, topicId: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkAddToTopicReputerWhitelist(sender: string, topicId: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    bulkRemoveFromTopicReputerWhitelist(sender: string, topicId: string, addresses: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    enableTopicWorkerWhitelistRequest(sender: string, topicId: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    disableTopicWorkerWhitelistRequest(sender: string, topicId: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    enableTopicReputerWhitelistRequest(sender: string, topicId: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    disableTopicReputerWhitelistRequest(sender: string, topicId: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToTopicCreatorWhitelistRequest(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromTopicCreatorWhitelistRequest(sender: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToTopicWorkerWhitelistRequest(sender: string, topicId: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromTopicWorkerWhitelistRequest(sender: string, topicId: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    addToTopicReputerWhitelistRequest(sender: string, topicId: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    removeFromTopicReputerWhitelistRequest(sender: string, topicId: string, address: string, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
}
//# sourceMappingURL=emissions.d.ts.map
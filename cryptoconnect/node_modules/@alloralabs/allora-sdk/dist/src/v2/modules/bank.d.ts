import { Coin, DeliverTxResponse, QueryClient, SigningStargateClient, StdFee } from "@cosmjs/stargate";
import { BaseModule } from "./base";
import { QueryClientImpl as BankQueryClient, QueryAllBalancesResponse, QueryBalanceResponse, QueryDenomMetadataByQueryStringResponse, QueryDenomMetadataResponse, QueryDenomOwnersByQueryResponse, QueryDenomOwnersResponse, QueryDenomsMetadataResponse, QuerySendEnabledResponse, QuerySpendableBalanceByDenomResponse, QuerySpendableBalancesResponse, QuerySupplyOfResponse, QueryTotalSupplyResponse } from "../types/generated/cosmos/bank/v1beta1/query";
import { PageRequest } from "../types/generated/cosmos/base/query/v1beta1/pagination";
import { Input, Output, Params, SendEnabled } from "../types/generated/cosmos/bank/v1beta1/bank";
export declare class BankModule extends BaseModule<BankQueryClient> {
    constructor(queryClient: QueryClient, signingClient?: SigningStargateClient);
    getBalance(address: string, denom: string): Promise<QueryBalanceResponse>;
    getAllBalances(address: string, resolveDenom: boolean, pagination?: PageRequest): Promise<QueryAllBalancesResponse>;
    getSpendableBalances(address: string, pagination?: PageRequest): Promise<QuerySpendableBalancesResponse>;
    getSpendableBalanceByDenom(address: string, denom: string): Promise<QuerySpendableBalanceByDenomResponse>;
    getTotalSupply(pagination?: PageRequest): Promise<QueryTotalSupplyResponse>;
    getSupplyOf(denom: string): Promise<QuerySupplyOfResponse>;
    getDenomMetadata(denom: string): Promise<QueryDenomMetadataResponse>;
    getDenomMetadataByQueryString(denom: string): Promise<QueryDenomMetadataByQueryStringResponse>;
    getDenomsMetadata(pagination?: PageRequest): Promise<QueryDenomsMetadataResponse>;
    getDenomOwners(denom: string, pagination?: PageRequest): Promise<QueryDenomOwnersResponse>;
    getDenomOwnersByQuery(denom: string, pagination?: PageRequest): Promise<QueryDenomOwnersByQueryResponse>;
    getSendEnabled(denoms: string[]): Promise<QuerySendEnabledResponse>;
    send(fromAddress: string, toAddress: string, amount: Coin[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    multiSend(inputs: Input[], outputs: Output[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    burn(fromAddress: string, amount: Coin[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    updateParams(authority: string, params: Params, fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
    setSendEnabled(authority: string, sendEnabled: SendEnabled[], useDefaultFor: string[], fee?: StdFee | "auto" | number, memo?: string): Promise<DeliverTxResponse>;
}
//# sourceMappingURL=bank.d.ts.map
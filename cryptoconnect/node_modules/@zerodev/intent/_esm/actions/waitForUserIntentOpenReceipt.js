import { stringify } from "viem/utils";
import { observe } from "../utils/observe.js";
import { poll } from "../utils/poll.js";
import { getUserIntentOpenReceipt } from "./getUserIntentOpenReceipt.js";
export class WaitForUserIntentOpenReceiptTimeoutError extends Error {
    constructor({ uiHash }) {
        super(`Timed out waiting for user intent open receipt: ${uiHash}`);
    }
}
/**
 * Waits for a User Intent open receipt to be ready.
 *
 * - Polls {@link getUserIntentOpenReceipt} on a specified interval.
 * - If the receipt is found, returns the receipt.
 * - If the receipt times out or exceeds retry count, throws an error.
 *
 * @param client - Client to use
 * @param parameters - {@link WaitForUserIntentOpenReceiptParameters}
 * @returns The open receipt of the user intent. {@link WaitForUserIntentOpenReceiptReturnType}
 *
 * @example
 * import { createIntentClient, http } from '@zerodev/intent'
 * import { mainnet } from 'viem/chains'
 *
 * const client = createIntentClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 *
 * const receipt = await client.waitForUserIntentOpenReceipt({
 *   uiHash: '0x...',
 * })
 */
export function waitForUserIntentOpenReceipt(client, parameters, version) {
    const { uiHash, pollingInterval = Math.min(client.pollingInterval, 1000), retryCount, timeout = 120_000, } = parameters;
    let count = 0;
    const observerId = stringify([
        "waitForUserIntentOpenReceipt",
        client.uid,
        uiHash,
    ]);
    return new Promise((resolve, reject) => {
        const unobserve = observe(observerId, { resolve, reject }, (emit) => {
            const done = (fn) => {
                unpoll();
                fn();
                unobserve();
            };
            const unpoll = poll(async () => {
                if (retryCount && count >= retryCount)
                    done(() => emit.reject(new WaitForUserIntentOpenReceiptTimeoutError({ uiHash })));
                try {
                    const receipt = await getUserIntentOpenReceipt(client, {
                        uiHash,
                    }, version);
                    if (receipt)
                        done(() => emit.resolve(receipt));
                }
                catch (err) {
                    done(() => emit.reject(err));
                }
                count++;
            }, {
                emitOnBegin: true,
                interval: pollingInterval,
            });
            if (timeout)
                setTimeout(() => done(() => emit.reject(new WaitForUserIntentOpenReceiptTimeoutError({ uiHash }))), timeout);
            return unpoll;
        });
    });
}
//# sourceMappingURL=waitForUserIntentOpenReceipt.js.map
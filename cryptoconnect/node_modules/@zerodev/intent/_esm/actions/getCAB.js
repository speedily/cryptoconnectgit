import { AccountNotFoundError } from "@zerodev/sdk";
/**
 * Gets Consolidated Account Balances (CAB) for a specified account address.
 * Returns token balances across supported chains with optional filtering by networks and tokens.
 *
 * @param client - Client to use
 * @param parameters - {@link GetCABParameters}
 * @returns The consolidated account balances. {@link GetCABResult}
 *
 * @example
 * import { createIntentClient, http } from '@zerodev/intent'
 * import { mainnet } from 'viem/chains'
 *
 * const client = createIntentClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 *
 * // Get balances for connected account on mainnet networks
 * const balances1 = await client.getCAB({
 *   networkType: "mainnet"
 * })
 *
 * // Get specific tokens for specific address on specific networks
 * const balances2 = await client.getCAB({
 *   accountAddress: "0x...",
 *   tokenTickers: ["ETH", "USDC"],
 *   networks: [1, 137]  // Ethereum mainnet and Polygon
 * })
 *
 * // Get all tokens for connected account on testnet networks
 * const balances3 = await client.getCAB({
 *   networkType: "testnet"
 * })
 *
 * // Get balances using a specific account
 * const balances4 = await client.getCAB({
 *   account: kernelAccount,
 *   networkType: "testnet"
 * })
 *
 * @throws {Error} If no account is connected and no accountAddress or account is provided
 * @throws {Error} If mixing mainnet and testnet networks when using networks parameter
 * @throws {Error} If any specified network is unsupported
 */
export async function getCAB(client, parameters) {
    const { account: account_ = client.account } = parameters;
    const accountAddress = parameters.accountAddress ?? account_?.address;
    if (!accountAddress)
        throw new AccountNotFoundError();
    const result = await client.request({
        method: "ui_getCAB",
        params: [{ ...parameters, accountAddress }],
    });
    return result;
}
//# sourceMappingURL=getCAB.js.map
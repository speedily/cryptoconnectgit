import { AccountNotFoundError, } from "@zerodev/sdk";
import { concatHex, encodeFunctionData } from "viem";
import { parseAccount } from "viem/utils";
import { getIntent } from "./getIntent.js";
/**
 * Prepares a user intent for execution by converting it to a cross-chain order.
 *
 * @param client - Client to use
 * @param parameters - {@link PrepareUserIntentParameters}
 * @returns The prepared intent. {@link PrepareUserIntentResult}
 *
 * @example
 * import { createIntentClient, http } from '@zerodev/intent'
 * import { mainnet } from 'viem/chains'
 *
 * const client = createIntentClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 *
 * // Using callData
 * const intent1 = await client.prepareUserIntent({
 *   callData: '0x...',
 *   inputTokens: [{
 *     address: '0x...',
 *     amount: 1000000n,
 *     chainId: 1n
 *   }],
 *   outputTokens: [{
 *     address: '0x...',
 *     amount: 900000n,
 *     chainId: 10n
 *   }]
 * })
 *
 * // Using calls
 * const intent2 = await client.prepareUserIntent({
 *   calls: [{
 *     to: '0x...',
 *     value: 1000000n,
 *     data: '0x...'
 *   }],
 *   inputTokens: [{
 *     address: '0x...',
 *     amount: 1000000n,
 *     chainId: 1n
 *   }],
 *   outputTokens: [{
 *     address: '0x...',
 *     amount: 900000n,
 *     chainId: 10n
 *   }]
 * })
 */
export async function prepareUserIntent(client, parameters, version) {
    const { account: account_ = client.account } = parameters;
    if (!account_)
        throw new AccountNotFoundError();
    const account = parseAccount(account_);
    // Convert the user intent parameters to getIntent parameters
    const { inputTokens, outputTokens, chainId, gasToken } = parameters;
    // Get callData from either direct callData or encoded calls
    const callData = await (async () => {
        if (parameters.calls)
            return account.encodeCalls(parameters.calls.map((call_) => {
                const call = call_;
                if ("abi" in call)
                    return {
                        data: encodeFunctionData(call),
                        to: call.to,
                        value: call.value,
                    };
                return call;
            }));
        return parameters.callData ?? "0x";
    })();
    const factoryAddress = account.factoryAddress;
    const factoryData = await account.generateInitCode();
    const initData = concatHex([factoryAddress, factoryData]);
    // Call getIntent with the converted parameters
    return getIntent(client, {
        recipient: account.address,
        callData,
        inputTokens: inputTokens ?? [],
        outputTokens: outputTokens ?? [],
        gasToken,
        chainId,
        initData,
    }, version);
}
//# sourceMappingURL=prepareUserIntent.js.map
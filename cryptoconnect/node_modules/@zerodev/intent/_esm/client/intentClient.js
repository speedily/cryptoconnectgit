import { kernelAccountClientActions, } from "@zerodev/sdk";
import { http, createClient, custom, } from "viem";
import { bundlerActions, } from "viem/account-abstraction";
import { ZERODEV_URLS } from "../config/constants.js";
import { intentClientActions, } from "./decorators/intent.js";
export function createIntentClient(parameters) {
    const { client: client_, key = "Account", name = "Intent Client", paymaster, paymasterContext, bundlerTransport, chain, intentTransport: rawIntentTransport, relayerTransport: rawRelayerTransport, userOperation, version, projectId, } = parameters;
    const intentTransport = rawIntentTransport
        ? rawIntentTransport
        : projectId
            ? http(`${ZERODEV_URLS.INTENT_SERVICE}/${projectId}`)
            : http(ZERODEV_URLS.INTENT_SERVICE);
    const baseTransportUrl = chain?.testnet
        ? ZERODEV_URLS.RELAYER_SERVICE_TESTNET
        : ZERODEV_URLS.RELAYER_SERVICE_MAINNET;
    const relayerTransport = rawRelayerTransport
        ? rawRelayerTransport
        : projectId
            ? http(`${baseTransportUrl}/${projectId}`)
            : http(baseTransportUrl);
    // Create a custom transport that routes methods to the appropriate transport
    const transport = custom({
        request: async ({ method, params }) => {
            // Route bundler methods (eth_*)
            if (method.startsWith("eth_")) {
                return bundlerTransport({}).request({ method, params });
            }
            // Route intent methods (ui_*)
            if (method.startsWith("ui_")) {
                return intentTransport({}).request({ method, params });
            }
            // Route relay methods (rl_*)
            if (method.startsWith("rl_")) {
                return relayerTransport({}).request({ method, params });
            }
            // Default to bundler transport for other methods
            return bundlerTransport({}).request({ method, params });
        },
    });
    const client = Object.assign(createClient({
        ...parameters,
        chain: parameters.chain ?? client_?.chain,
        transport,
        key,
        name,
        type: "intentClient",
    }), { client: client_, paymaster, paymasterContext, userOperation });
    if (parameters.userOperation?.prepareUserOperation) {
        const customPrepareUserOp = parameters.userOperation.prepareUserOperation;
        return client
            .extend(bundlerActions)
            .extend(kernelAccountClientActions())
            .extend((client) => ({
            prepareUserOperation: (args) => {
                return customPrepareUserOp(client, args);
            },
        }))
            .extend(intentClientActions(version));
    }
    return client
        .extend(bundlerActions)
        .extend(kernelAccountClientActions())
        .extend(intentClientActions(version));
}
//# sourceMappingURL=intentClient.js.map
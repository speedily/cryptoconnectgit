"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIntentClient = createIntentClient;
const sdk_1 = require("@zerodev/sdk");
const viem_1 = require("viem");
const account_abstraction_1 = require("viem/account-abstraction");
const constants_js_1 = require("../config/constants.js");
const intent_js_1 = require("./decorators/intent.js");
function createIntentClient(parameters) {
    const { client: client_, key = "Account", name = "Intent Client", paymaster, paymasterContext, bundlerTransport, chain, intentTransport: rawIntentTransport, relayerTransport: rawRelayerTransport, userOperation, version, projectId, } = parameters;
    const intentTransport = rawIntentTransport
        ? rawIntentTransport
        : projectId
            ? (0, viem_1.http)(`${constants_js_1.ZERODEV_URLS.INTENT_SERVICE}/${projectId}`)
            : (0, viem_1.http)(constants_js_1.ZERODEV_URLS.INTENT_SERVICE);
    const baseTransportUrl = chain?.testnet
        ? constants_js_1.ZERODEV_URLS.RELAYER_SERVICE_TESTNET
        : constants_js_1.ZERODEV_URLS.RELAYER_SERVICE_MAINNET;
    const relayerTransport = rawRelayerTransport
        ? rawRelayerTransport
        : projectId
            ? (0, viem_1.http)(`${baseTransportUrl}/${projectId}`)
            : (0, viem_1.http)(baseTransportUrl);
    const transport = (0, viem_1.custom)({
        request: async ({ method, params }) => {
            if (method.startsWith("eth_")) {
                return bundlerTransport({}).request({ method, params });
            }
            if (method.startsWith("ui_")) {
                return intentTransport({}).request({ method, params });
            }
            if (method.startsWith("rl_")) {
                return relayerTransport({}).request({ method, params });
            }
            return bundlerTransport({}).request({ method, params });
        },
    });
    const client = Object.assign((0, viem_1.createClient)({
        ...parameters,
        chain: parameters.chain ?? client_?.chain,
        transport,
        key,
        name,
        type: "intentClient",
    }), { client: client_, paymaster, paymasterContext, userOperation });
    if (parameters.userOperation?.prepareUserOperation) {
        const customPrepareUserOp = parameters.userOperation.prepareUserOperation;
        return client
            .extend(account_abstraction_1.bundlerActions)
            .extend((0, sdk_1.kernelAccountClientActions)())
            .extend((client) => ({
            prepareUserOperation: (args) => {
                return customPrepareUserOp(client, args);
            },
        }))
            .extend((0, intent_js_1.intentClientActions)(version));
    }
    return client
        .extend(account_abstraction_1.bundlerActions)
        .extend((0, sdk_1.kernelAccountClientActions)())
        .extend((0, intent_js_1.intentClientActions)(version));
}
//# sourceMappingURL=intentClient.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeout = exports.index = exports.kernelVersion = exports.RELAYER_SERVICE_RPC = exports.INTENT_SERVICE_RPC = exports.PAYMASTER_RPC = exports.BUNDLER_RPC = exports.SEPOLIA_PROJECT_ID = exports.TEST_PRIVATE_KEY = void 0;
exports.getTestingChain = getTestingChain;
exports.getPublicClient = getPublicClient;
exports.getIntentClient = getIntentClient;
const ecdsa_validator_1 = require("@zerodev/ecdsa-validator");
const sdk_1 = require("@zerodev/sdk");
const constants_1 = require("@zerodev/sdk/constants");
const viem_1 = require("viem");
const accounts_1 = require("viem/accounts");
const chains_1 = require("viem/chains");
const intentClient_js_1 = require("../client/intentClient.js");
const constants_js_1 = require("../config/constants.js");
exports.TEST_PRIVATE_KEY = process.env.PRIVATE_KEY;
exports.SEPOLIA_PROJECT_ID = process.env.SEPOLIA_PROJECT_ID;
exports.BUNDLER_RPC = `https://rpc.zerodev.app/api/v2/bundler/${exports.SEPOLIA_PROJECT_ID}`;
exports.PAYMASTER_RPC = `https://rpc.zerodev.app/api/v2/paymaster/${exports.SEPOLIA_PROJECT_ID}`;
exports.INTENT_SERVICE_RPC = "http://127.0.0.1:3000/intent";
exports.RELAYER_SERVICE_RPC = `https://relayer-testnet.onrender.com/${exports.SEPOLIA_PROJECT_ID}`;
exports.kernelVersion = constants_1.KERNEL_V3_2;
const entryPoint = (0, constants_1.getEntryPoint)("0.7");
const intentExecutorAddress = "0x3E1bF561DEbE46C22cc1e85EC8283A5EB49f5dae";
exports.index = 0n;
exports.timeout = 100000000;
function getTestingChain() {
    return chains_1.sepolia;
}
function getPublicClient(chain) {
    return (0, viem_1.createPublicClient)({
        chain: chain ?? getTestingChain(),
        transport: (0, viem_1.http)(),
    });
}
async function getIntentClient(chain) {
    const publicClient = getPublicClient(chain);
    const signer = (0, accounts_1.privateKeyToAccount)(exports.TEST_PRIVATE_KEY);
    const ecdsaValidator = await (0, ecdsa_validator_1.signerToEcdsaValidator)(publicClient, {
        signer: { ...signer, source: "local" },
        kernelVersion: exports.kernelVersion,
        entryPoint,
    });
    const installModuleData = (0, viem_1.encodeFunctionData)({
        abi: sdk_1.KernelV3_1AccountAbi,
        functionName: "installModule",
        args: [
            BigInt(2),
            intentExecutorAddress,
            (0, viem_1.concatHex)([
                viem_1.zeroAddress,
                (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)(["bytes", "bytes"]), [
                    "0x",
                    "0x",
                ]),
            ]),
        ],
    });
    const kernelAccount = await (0, sdk_1.createKernelAccount)(publicClient, {
        plugins: {
            sudo: ecdsaValidator,
        },
        kernelVersion: exports.kernelVersion,
        entryPoint,
        index: exports.index,
        initConfig: [installModuleData],
    });
    const client = (0, intentClient_js_1.createIntentClient)({
        account: kernelAccount,
        chain: getTestingChain(),
        bundlerTransport: (0, viem_1.http)(exports.BUNDLER_RPC, { timeout: exports.timeout }),
        paymaster: (0, sdk_1.createZeroDevPaymasterClient)({
            chain: getTestingChain(),
            transport: (0, viem_1.http)(exports.PAYMASTER_RPC, { timeout: exports.timeout }),
        }),
        client: publicClient,
        version: constants_js_1.INTENT_V0_3,
    });
    return client;
}
//# sourceMappingURL=utils.js.map
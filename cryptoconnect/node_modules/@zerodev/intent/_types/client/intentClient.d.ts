import { type KernelAccountClientActions, type SmartAccountClientConfig } from "@zerodev/sdk";
import { type Address, type Chain, type Client, type Hex, type Prettify, type RpcSchema, type Transport } from "viem";
import { type BundlerActions, type BundlerClientConfig, type SmartAccount } from "viem/account-abstraction";
import type { EstimateUserIntentFeesParameters, EstimateUserIntentFeesResult } from "../actions/estimateUserIntentFees.js";
import type { GetCABParameters, GetCABResult } from "../actions/getCAB.js";
import type { GaslessCrossChainOrder, GetIntentParameters, GetIntentReturnType } from "../actions/getIntent.js";
import type { GetUserIntentStatusResult } from "../actions/getUserIntentStatus.js";
import type { RelayerSendUserIntentResult } from "../actions/sendUserIntent.js";
import type { GetUserIntentExecutionReceiptResult, GetUserIntentOpenReceiptResult } from "../actions/types.js";
import type { INTENT_VERSION_TYPE } from "../types/intent.js";
import { type IntentClientActions } from "./decorators/intent.js";
export type IntentRpcSchema = [
    {
        Method: "ui_getIntent";
        Parameters: [GetIntentParameters];
        ReturnType: GetIntentReturnType;
    },
    {
        Method: "ui_getCAB";
        Parameters: [GetCABParameters];
        ReturnType: GetCABResult;
    },
    {
        Method: "ui_estimateIntentFees";
        Parameters: [EstimateUserIntentFeesParameters];
        ReturnType: EstimateUserIntentFeesResult;
    }
];
export type RelayerRpcSchema = [
    {
        Method: "rl_sendUserIntent";
        Parameters: [{
            order: GaslessCrossChainOrder;
            signature: Hex;
        }];
        ReturnType: RelayerSendUserIntentResult;
    },
    {
        Method: "rl_getUserIntentStatus";
        Parameters: [Hex, Address];
        ReturnType: GetUserIntentStatusResult;
    },
    {
        Method: "rl_getUserIntentOpenReceipt";
        Parameters: [Hex, Address];
        ReturnType: GetUserIntentOpenReceiptResult;
    },
    {
        Method: "rl_getUserIntentExecutionReceipt";
        Parameters: [Hex, Address];
        ReturnType: GetUserIntentExecutionReceiptResult;
    }
];
export type CombinedIntentRpcSchema = [...IntentRpcSchema, ...RelayerRpcSchema];
export type IntentClient<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends SmartAccount | undefined = SmartAccount | undefined, client extends Client | undefined = Client | undefined, rpcSchema extends RpcSchema | undefined = undefined> = Prettify<Client<transport, chain extends Chain ? chain : client extends Client<any, infer chain> ? chain : undefined, account, rpcSchema extends RpcSchema ? [...rpcSchema, ...CombinedIntentRpcSchema] : CombinedIntentRpcSchema, BundlerActions<account> & KernelAccountClientActions<chain, account> & IntentClientActions<chain, account>>> & {
    client: client;
    paymaster: BundlerClientConfig["paymaster"] | undefined;
    paymasterContext: BundlerClientConfig["paymasterContext"] | undefined;
    userOperation: BundlerClientConfig["userOperation"] | undefined;
};
export type CreateIntentClientConfig<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends SmartAccount | undefined = SmartAccount | undefined, client extends Client | undefined = Client | undefined, rpcSchema extends RpcSchema | undefined = undefined> = SmartAccountClientConfig<transport, chain, account, client, rpcSchema> & {
    bundlerTransport: transport;
    intentTransport?: transport;
    relayerTransport?: transport;
    projectId?: string;
    version: INTENT_VERSION_TYPE;
};
export declare function createIntentClient<transport extends Transport, chain extends Chain | undefined = undefined, account extends SmartAccount | undefined = undefined, client extends Client | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: CreateIntentClientConfig<transport, chain, account, client, rpcSchema>): IntentClient<transport, chain, account, client, rpcSchema>;
//# sourceMappingURL=intentClient.d.ts.map
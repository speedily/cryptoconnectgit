import { type Chain, type Client, type Hex, type Transport } from "viem";
import type { SmartAccount } from "viem/account-abstraction";
import type { CombinedIntentRpcSchema } from "../client/intentClient.js";
import type { INTENT_VERSION_TYPE, UserIntentHash } from "../types/intent.js";
import type { GaslessCrossChainOrder, GetIntentReturnType } from "./getIntent.js";
import type { PrepareUserIntentParameters } from "./prepareUserIntent.js";
export type SendUserIntentParameters<account extends SmartAccount | undefined = SmartAccount | undefined, accountOverride extends SmartAccount | undefined = SmartAccount | undefined, calls extends readonly unknown[] = readonly unknown[]> = Partial<PrepareUserIntentParameters<account, accountOverride, calls>> & {
    intent?: GetIntentReturnType;
};
export type RelayerSendUserIntentResult = {
    uiHash: Hex;
};
export type SendUserIntentResult = {
    inputsUiHash: UserIntentHash[];
    outputUiHash: UserIntentHash;
};
export declare const getOrderHash: (order: GaslessCrossChainOrder) => Hex;
export declare function sendUserIntent<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends SmartAccount | undefined = SmartAccount | undefined, accountOverride extends SmartAccount | undefined = undefined, calls extends readonly unknown[] = readonly unknown[]>(client: Client<transport, chain, account, CombinedIntentRpcSchema>, parameters: SendUserIntentParameters<account, accountOverride, calls>, version: INTENT_VERSION_TYPE): Promise<SendUserIntentResult>;
//# sourceMappingURL=sendUserIntent.d.ts.map
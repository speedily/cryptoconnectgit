import type { Chain, Client, Hex, Transport } from "viem";
import type { PrepareUserOperationParameters, SmartAccount } from "viem/account-abstraction";
import type { CombinedIntentRpcSchema } from "../client/intentClient.js";
import type { INTENT_VERSION_TYPE } from "../types/intent.js";
import type { GetIntentReturnType } from "./getIntent.js";
export type PrepareUserIntentParameters<account extends SmartAccount | undefined = SmartAccount | undefined, accountOverride extends SmartAccount | undefined = SmartAccount | undefined, calls extends readonly unknown[] = readonly unknown[]> = PrepareUserOperationParameters<account, accountOverride, calls> & {
    inputTokens?: Array<{
        address: Hex;
        amount?: bigint;
        chainId: number;
    }>;
    outputTokens?: Array<{
        address: Hex;
        amount: bigint;
        chainId: number;
    }>;
    gasToken?: "SPONSORED" | "NATIVE";
    chainId?: number;
};
export type PrepareUserIntentResult = GetIntentReturnType;
/**
 * Prepares a user intent for execution by converting it to a cross-chain order.
 *
 * @param client - Client to use
 * @param parameters - {@link PrepareUserIntentParameters}
 * @returns The prepared intent. {@link PrepareUserIntentResult}
 *
 * @example
 * import { createIntentClient, http } from '@zerodev/intent'
 * import { mainnet } from 'viem/chains'
 *
 * const client = createIntentClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 *
 * // Using callData
 * const intent1 = await client.prepareUserIntent({
 *   callData: '0x...',
 *   inputTokens: [{
 *     address: '0x...',
 *     amount: 1000000n,
 *     chainId: 1n
 *   }],
 *   outputTokens: [{
 *     address: '0x...',
 *     amount: 900000n,
 *     chainId: 10n
 *   }]
 * })
 *
 * // Using calls
 * const intent2 = await client.prepareUserIntent({
 *   calls: [{
 *     to: '0x...',
 *     value: 1000000n,
 *     data: '0x...'
 *   }],
 *   inputTokens: [{
 *     address: '0x...',
 *     amount: 1000000n,
 *     chainId: 1n
 *   }],
 *   outputTokens: [{
 *     address: '0x...',
 *     amount: 900000n,
 *     chainId: 10n
 *   }]
 * })
 */
export declare function prepareUserIntent<account extends SmartAccount | undefined = SmartAccount | undefined, chain extends Chain | undefined = Chain | undefined, accountOverride extends SmartAccount | undefined = undefined, calls extends readonly unknown[] = readonly unknown[]>(client: Client<Transport, chain, account, CombinedIntentRpcSchema>, parameters: PrepareUserIntentParameters<account, accountOverride, calls>, version: INTENT_VERSION_TYPE): Promise<PrepareUserIntentResult>;
//# sourceMappingURL=prepareUserIntent.d.ts.map
import { AccountNotFoundError } from "@zerodev/sdk";
import MerkleTree from "merkletreejs";
import { getUserOperationHash } from "viem/account-abstraction";
import { concatHex, encodeAbiParameters, keccak256, parseAccount } from "viem/utils";
export async function signUserOperations(client, args_) {
    const args = args_;
    const { account: account_ = client.account, userOperations } = args;
    if (!account_)
        throw new AccountNotFoundError();
    const account = parseAccount(account_);
    const userOpHashes = userOperations.map((userOp) => {
        return getUserOperationHash({
            userOperation: {
                ...userOp,
                signature: "0x"
            },
            entryPointAddress: account.entryPoint.address,
            entryPointVersion: account.entryPoint.version,
            chainId: userOp.chainId
        });
    });
    const merkleTree = new MerkleTree(userOpHashes, keccak256, {
        sortPairs: true
    });
    const merkleRoot = merkleTree.getHexRoot();
    const ecdsaSig = await account.kernelPluginManager.signMessage({
        message: {
            raw: merkleRoot
        }
    });
    const encodeMerkleDataWithSig = (userOpHash) => {
        const merkleProof = merkleTree.getHexProof(userOpHash);
        const encodedMerkleProof = encodeAbiParameters([{ name: "proof", type: "bytes32[]" }], [merkleProof]);
        return concatHex([ecdsaSig, merkleRoot, encodedMerkleProof]);
    };
    const signedMultiUserOps = userOperations.map((userOp, index) => {
        return {
            ...userOp,
            signature: encodeMerkleDataWithSig(userOpHashes[index])
        };
    });
    return signedMultiUserOps;
}
//# sourceMappingURL=signUserOperations.js.map
import type { Assign, Chain, Client, Transport } from "viem";
import { type DeriveEntryPointVersion, type DeriveSmartAccount, type EntryPointVersion, type GetSmartAccountParameter, type PrepareUserOperationReturnType, type SmartAccount, type UserOperationRequest } from "viem/account-abstraction";
export type SignUserOperationsRequest<account extends SmartAccount | undefined = SmartAccount | undefined, accountOverride extends SmartAccount | undefined = SmartAccount | undefined, _calls extends readonly unknown[] = readonly unknown[], _derivedAccount extends SmartAccount | undefined = DeriveSmartAccount<account, accountOverride>, _derivedVersion extends EntryPointVersion = DeriveEntryPointVersion<_derivedAccount>> = Assign<UserOperationRequest<_derivedVersion>, {
    chainId: number;
}>;
export type SignUserOperationsParameters<account extends SmartAccount | undefined = SmartAccount | undefined, accountOverride extends SmartAccount | undefined = SmartAccount | undefined, calls extends readonly unknown[] = readonly unknown[], request extends SignUserOperationsRequest<account, accountOverride, calls> = SignUserOperationsRequest<account, accountOverride, calls>> = {
    userOperations: request[];
} & GetSmartAccountParameter<account, accountOverride>;
export type SignUserOperationsReturnType = PrepareUserOperationReturnType[];
export declare function signUserOperations<account extends SmartAccount | undefined = SmartAccount | undefined, chain extends Chain | undefined = Chain | undefined, accountOverride extends SmartAccount | undefined = undefined, calls extends readonly unknown[] = readonly unknown[]>(client: Client<Transport, chain, account>, args_: SignUserOperationsParameters<account, accountOverride, calls>): Promise<SignUserOperationsReturnType>;
//# sourceMappingURL=signUserOperations.d.ts.map
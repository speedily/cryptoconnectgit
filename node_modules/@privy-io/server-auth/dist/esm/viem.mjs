import{toHex as e,parseSignature as a}from"viem";import{toAccount as t}from"viem/accounts";import{hashAuthorization as r}from"viem/utils";import{PrivyClientError as i}from"./errors.mjs";import{r as s}from"./utils-DRjOr8oi.mjs";import"node-fetch-native";import"ts-case-convert";const n=async n=>{let{walletId:o,address:m,privy:p}=n;return t({address:m,sign:async({hash:e})=>{let{signature:a}=await p.walletApi.ethereum.secp256k1Sign({walletId:o,hash:e});return a},signMessage:async({message:e})=>{let a=d(e),{signature:t}=await p.walletApi.ethereum.signMessage({walletId:o,message:a});return t},signTypedData:async a=>{let{message:t,domain:r,types:n,primaryType:m}=s(a,e);if(!r)throw new i("typedData.domain must be defined");if(!t||!n)throw new i("typedData.message must be defined");let{signature:d}=await p.walletApi.ethereum.signTypedData({walletId:o,typedData:{domain:r,message:t,primaryType:m,types:n}});return d},signTransaction:async e=>{let a=l(e),{signedTransaction:t}=await p.walletApi.ethereum.signTransaction({walletId:o,transaction:a});return t},signAuthorization:async e=>{let t=r(e),{signature:i}=await p.walletApi.ethereum.secp256k1Sign({walletId:o,hash:t});return{address:e.contractAddress??e.address,nonce:e.nonce,chainId:e.chainId,...a(i)}}})};let o=e=>{if("legacy"===e)return 0;if("eip2930"===e)return 1;if("eip1559"==e||void 0===e)return 2;throw new i("EIP4844 and EIP7702 transaction types are not yet supported.")},m=e=>{if(e)return`0x${e.toString(16)}`},d=e=>"string"==typeof e?e:"string"==typeof e.raw?Uint8Array.from(Buffer.from(e.raw.slice(2),"hex")):e.raw,l=e=>({to:e.to??void 0,nonce:e.nonce,chainId:e.chainId,data:e.data,value:m(e.value),type:o(e.type),gasLimit:m(e.gas),gasPrice:m(e.gasPrice),maxFeePerGas:m(e.maxFeePerGas),maxPriorityFeePerGas:m(e.maxPriorityFeePerGas)});export{n as createViemAccount};

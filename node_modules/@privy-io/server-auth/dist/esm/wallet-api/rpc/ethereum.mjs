import{PrivyApiError as a}from"../../errors.mjs";import{getRpcPathForRequest as t,extractIdempotencyKeyHeader as e,createAuthorizationSignatureHeader as i}from"../utils.mjs";import"@hpke/chacha20poly1305";import"@hpke/core";import"@noble/curves/p256";import"@noble/hashes/sha256";import"canonicalize";import"../../constants.mjs";import"../../paths.mjs";class s{async signMessage(a){let s=await t(a,this.api),r={};r=a.message instanceof Uint8Array?{message:Buffer.from(a.message).toString("hex"),encoding:"hex"}:{message:a.message,encoding:"utf-8"};let n={method:"personal_sign",params:r},o=e(a),p=i({method:"POST",url:this.api.baseURL+s,body:n,appId:this.appId,idempotencyKeyHeader:o,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(s,n,{headers:{...p,...o}});return{signature:d.data.signature,encoding:d.data.encoding}}async secp256k1Sign(a){let s=await t(a,this.api),r={method:"secp256k1_sign",params:{hash:a.hash}},n=e(a),o=i({method:"POST",url:this.api.baseURL+s,body:r,appId:this.appId,idempotencyKeyHeader:n,authorizationPrivateKey:this.authorizationPrivateKey}),{data:p}=await this.api.post(s,r,{headers:{...o,...n}});return{signature:p.data.signature,encoding:p.data.encoding}}async signTypedData(a){let s=await t(a,this.api),r={method:"eth_signTypedData_v4",params:{typed_data:{primary_type:a.typedData.primaryType,domain:a.typedData.domain,types:a.typedData.types,message:a.typedData.message}}},n=e(a),o=i({method:"POST",url:this.api.baseURL+s,body:r,appId:this.appId,idempotencyKeyHeader:n,authorizationPrivateKey:this.authorizationPrivateKey}),{data:p}=await this.api.post(s,r,{headers:{...o,...n}});return{signature:p.data.signature,encoding:p.data.encoding}}async signTransaction(a){let s=await t(a,this.api),r={method:"eth_signTransaction",params:{transaction:{from:a.transaction.from,to:a.transaction.to,nonce:a.transaction.nonce,chain_id:a.transaction.chainId,data:a.transaction.data,value:a.transaction.value,type:a.transaction.type,gas_limit:a.transaction.gasLimit,gas_price:a.transaction.gasPrice,max_fee_per_gas:a.transaction.maxFeePerGas,max_priority_fee_per_gas:a.transaction.maxPriorityFeePerGas}}},n=e(a),o=i({method:"POST",url:this.api.baseURL+s,body:r,appId:this.appId,idempotencyKeyHeader:n,authorizationPrivateKey:this.authorizationPrivateKey}),{data:p}=await this.api.post(s,r,{headers:{...o,...n}});return{signedTransaction:p.data.signed_transaction,encoding:p.data.encoding}}async sendTransaction(s){let r=await t(s,this.api),n={method:"eth_sendTransaction",caip2:s.caip2,params:{transaction:{from:s.transaction.from,to:s.transaction.to,nonce:s.transaction.nonce,chain_id:s.transaction.chainId,data:s.transaction.data,value:s.transaction.value,type:s.transaction.type,gas_limit:s.transaction.gasLimit,gas_price:s.transaction.gasPrice,max_fee_per_gas:s.transaction.maxFeePerGas,max_priority_fee_per_gas:s.transaction.maxPriorityFeePerGas}}},o=e(s),p=i({method:"POST",url:this.api.baseURL+r,body:n,appId:this.appId,idempotencyKeyHeader:o,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(r,n,{headers:{...p,...o}});if(d.data)return{hash:d.data.hash,caip2:d.data.caip2};if(d.error)throw new a(d.error.code,null,d.error.message);throw Error("Unexpected API response to eth_sendTransaction")}constructor({appId:a,api:t,authorizationPrivateKey:e}){this.authorizationPrivateKey=null,this.api=t,this.appId=a,e&&(this.authorizationPrivateKey=e)}}export{s as EthereumRpcApi};

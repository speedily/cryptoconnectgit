import{z as t}from"zod";import{InvalidInputError as e,PrivyErrorCode as i}from"@privy-io/api-base";import{Pagination as a}from"../api.mjs";import{SolanaWalletAddress as r,WalletAddress as n}from"../core.mjs";import{BaseTransactionResponse as o}from"../transaction.mjs";import{PrivateKeyExportInput as s}from"./export.mjs";import"bs58";import"libphonenumber-js/max";import"viem";const l=t.enum(["secp256k1","ed25519"]),d=t.string().regex(/^[mM]'?(\/\d+'?)*$/),c=t.literal("ECDSA"),g=t.literal("EdDSA"),p=t.union([c,g]),_=t.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let h=t.object({address:r.optional(),chain_type:t.literal("solana").optional(),wallet_id:t.string().optional()}),m=t.object({address:n.optional(),chain_type:t.literal("ethereum").optional(),wallet_id:t.string().optional()});const u=t.enum(["root","manager","delegated-actions"]).nullable(),b=t.object({method:t.literal("signTransaction"),params:t.object({transaction:t.string(),encoding:t.literal("base64")}).strict()}).merge(h).strict(),y=t.object({method:t.literal("signAndSendTransaction"),caip2:_,params:t.object({transaction:t.string(),encoding:t.literal("base64")}).strict()}).merge(h).strict(),j=t.object({method:t.literal("signMessage"),params:t.object({message:t.string(),encoding:t.literal("base64")}).strict()}).merge(h).strict(),v=t.string().startsWith("0x").refine((t=>!t.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),z=v.transform((t=>t));let f=t.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const x=t.union([v,f],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),w=t.object({from:n.optional(),to:n.optional(),chain_id:x.optional(),nonce:x.optional(),data:v.optional(),value:x.optional(),type:t.union([t.literal(0),t.literal(1),t.literal(2)]).optional(),gas_limit:x.optional(),gas_price:x.optional(),max_fee_per_gas:x.optional(),max_priority_fee_per_gas:x.optional()}).strict(),k=t.object({method:t.literal("eth_signTransaction"),params:t.object({transaction:w}).strict()}).merge(m).strict(),I=t.object({method:t.literal("eth_sendTransaction"),caip2:_,params:t.object({transaction:w}).strict()}).merge(m).strict(),A=t.object({message:t.string(),encoding:t.union([t.literal("utf-8"),t.literal("hex")])}).strict(),D=t.object({method:t.literal("personal_sign"),params:A}).merge(m).strict(),T=t.object({method:t.literal("secp256k1_sign"),params:t.object({hash:z}).strict()}).merge(m).strict(),P=t.object({params:t.object({hash:z}).strict()}).strict(),O=t.record(t.string(),t.any()),S=t.record(t.array(t.object({name:t.string(),type:t.string()}))),U=t.object({method:t.literal("eth_signTypedData_v4"),params:t.object({typed_data:t.object({domain:O,types:S,message:t.record(t.string(),t.any()),primary_type:t.string()}).strict()}).strict()}).merge(m).strict(),q=t.object({address:t.string(),method:t.literal("exportPrivateKey"),params:s}).strict(),C=t.discriminatedUnion("method",[k,I,D,U,T]),E=t.discriminatedUnion("method",[b,y,j]),M=t.union([C,E,q]),W=t.object({method:t.literal("signTransaction"),data:t.object({signed_transaction:t.string(),encoding:t.literal("base64")})}),B=t.object({method:t.literal("signAndSendTransaction"),data:t.object({transaction_id:t.string().optional(),hash:t.string(),caip2:_}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),K=t.object({method:t.literal("signMessage"),data:t.object({signature:t.string(),encoding:t.literal("base64")})}),L=t.object({method:t.literal("eth_signTransaction"),data:t.object({signed_transaction:t.string(),encoding:t.literal("rlp")})}),N=t.object({method:t.literal("eth_sendTransaction"),data:t.object({transaction_id:t.string().optional(),hash:t.string(),caip2:_,transaction_request:w.optional()}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),V=t.object({method:t.literal("personal_sign"),data:t.object({signature:t.string(),encoding:t.literal("hex")})}),$=t.object({method:t.literal("secp256k1_sign"),data:t.object({signature:v,encoding:t.literal("hex")})}),R=t.object({method:t.literal("eth_signTypedData_v4"),data:t.object({signature:t.string(),encoding:t.literal("hex")})}),Z=t.object({method:t.literal("exportPrivateKey"),data:s}),F=t.object({data:t.object({signature:v,encoding:t.literal("hex")}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}).strict(),G=t.discriminatedUnion("method",[W,B,K,L,N,V,$,R,Z]),H=t.object({display_name:t.string().optional(),public_key:t.string(),role:u.optional()}),J=t.literal("cosmos"),Q=t.literal("stellar"),X=t.literal("sui"),Y=t.literal("tron"),tt=t.union([J,Q,X,Y]),et=t.literal("curve_signing"),it=t.union([t.literal("solana"),t.literal("ethereum")]),at=t.union([tt,it]),rt=t.object({id:t.string(),address:t.string(),public_key:t.string().optional(),created_at:t.number(),exported_at:t.number().nullable(),chain_type:at,policy_ids:t.array(t.string()),authorization_threshold:t.number().optional(),additional_signers:t.array(t.object({signer_id:t.string().cuid2(),override_policy_ids:t.array(t.string()).optional()})),owner_id:t.string().cuid2().nullable()}),nt=t.string().cuid2(),ot=t.string(),st=t.object({public_key:ot}).strict(),lt={owner:st.nullable().optional(),owner_id:nt.nullable().optional()},dt=t.array(t.string().cuid2()).max(1,"Only one policy ID can be set").optional(),ct=t.array(t.object({signer_id:nt,override_policy_ids:dt}).strict()),gt=t.object({chain_type:at,policy_ids:dt,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:ct.optional(),...lt}).strict(),pt=gt.refine((t=>{let e=void 0!==t.authorization_key_ids||void 0!==t.authorization_threshold,i=void 0!==t.additional_signers;return!e||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((t=>void 0===t.authorization_threshold||t.authorization_threshold>=1&&t.authorization_key_ids&&t.authorization_threshold<=t.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((t=>!t.owner||!t.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((t=>{throw new e(t.error.message,i.INVALID_DATA)})),_t=t.object({id:t.string(),chain_type:at,address:t.string(),authorization_threshold:t.number().optional()}),ht=t.object({wallet_id:t.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:t})=>{throw new e(t.message,i.INVALID_DATA)})),mt=t.enum(["usdc","eth"]),ut=t.enum(["ethereum","arbitrum","base","linea","optimism","zksync_era"]),bt=t.enum(["usd"]),yt=t.object({asset:t.union([mt,t.array(mt).max(10)]),chain:t.union([ut,t.array(ut).max(10)]),include_currency:bt.optional()}),jt=t.object({chain:ut,asset:mt,raw_value:t.string(),raw_value_decimals:t.number(),display_values:t.record(t.union([mt,bt]),t.string())}),vt=t.object({balances:t.array(jt.refine((t=>t.asset in t.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),zt=t.object({id:t.string()}),ft=t.object({id:t.string(),display_name:t.string().nullable(),public_key:t.string(),role:u,created_at:t.number()}),xt=t.object({id:t.string(),display_name:t.string().nullable(),public_key:t.string(),created_at:t.number()}),wt=a.extend({chain_type:at.optional()}).strict(),kt=t.object({policy_ids:dt,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:ct.optional(),...lt}).strict().superRefine(((t,e)=>{Object.values(t).every((t=>void 0===t||""===t))&&e.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==t.owner&&void 0!==t.owner_id&&e.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."}),void 0!==t.authorization_threshold&&0!==t.authorization_threshold&&(t.authorization_threshold<0&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===t.authorization_key_ids&&e.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),t.authorization_key_ids&&t.authorization_threshold>t.authorization_key_ids.length&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),It=a.extend({chain:t.literal("base"),asset:t.union([mt,t.array(mt).max(2)])}).strict(),At=t.object({type:t.literal("transfer_sent"),sender:t.string(),sender_privy_user_id:t.string().nullable(),recipient:t.string(),recipient_privy_user_id:t.string().nullable()}).strict().merge(jt),Dt=t.object({type:t.literal("transfer_received"),sender:t.string(),sender_privy_user_id:t.string().nullable(),recipient:t.string(),recipient_privy_user_id:t.string().nullable()}).strict().merge(jt),Tt=t.discriminatedUnion("type",[At,Dt]),Pt=o.extend({details:Tt.nullable()}),Ot=Pt.extend({privy_transaction_id:t.string(),wallet_id:t.string()}),St=t.object({transactions:t.array(Ot),next_cursor:t.string().nullable()});export{ct as AdditionalSignerInput,mt as Asset,jt as AssetAmountDetails,ft as AuthorizationKeyDashboardResponse,xt as AuthorizationKeyResponse,u as AuthorizationKeyRole,bt as BalanceFiatCurrency,gt as BaseWalletApiCreateInput,_ as CAIP2,ut as ChainNameInput,at as ChainType,J as Cosmos,et as CurveSigningChain,tt as CurveSigningChainTypes,l as CurveType,c as ECDSA,g as EdDSA,it as FirstClassChainTypes,d as HDPath,z as Hash,v as Hex,nt as KeyQuorumId,st as OwnerInput,lt as OwnerInputFields,ot as P256PublicKey,dt as PolicyInput,Ot as PrivyTransactionResponseWithDetails,x as Quantity,p as SigningAlgorithm,Q as Stellar,X as Sui,Tt as TransactionDetail,Pt as TransactionResponseWithDetails,Dt as TransferReceivedTransactionDetail,At as TransferSentTransactionDetail,Y as Tron,O as TypedDataDomainInputParams,S as TypedDataTypesInputParams,w as UnsignedEthereumTransaction,pt as WalletApiCreateInput,_t as WalletApiCreateResponse,D as WalletApiEthereumPersonalSignRpcInput,A as WalletApiEthereumPersonalSignRpcInputParams,V as WalletApiEthereumPersonalSignRpcResponse,C as WalletApiEthereumRpcInput,T as WalletApiEthereumSecp256k1SignRpcInput,$ as WalletApiEthereumSecp256k1SignRpcResponse,I as WalletApiEthereumSendTransactionRpcInput,N as WalletApiEthereumSendTransactionRpcResponse,k as WalletApiEthereumSignTransactionRpcInput,L as WalletApiEthereumSignTransactionRpcResponse,U as WalletApiEthereumSignTypedDataRpcInput,R as WalletApiEthereumSignTypedDataRpcResponse,q as WalletApiExportPrivateKeyRpcInput,Z as WalletApiExportPrivateKeyRpcResponse,P as WalletApiRawSignInput,F as WalletApiRawSignResponse,H as WalletApiRegisterAuthorizationKeyInput,zt as WalletApiRevokeAuthorizationKeyInput,M as WalletApiRpcInput,G as WalletApiRpcResponse,E as WalletApiSolanaRpcInput,y as WalletApiSolanaSignAndSendTransactionRpcInput,B as WalletApiSolanaSignAndSendTransactionRpcResponse,j as WalletApiSolanaSignMessageRpcInput,K as WalletApiSolanaSignMessageRpcResponse,b as WalletApiSolanaSignTransactionRpcInput,W as WalletApiSolanaSignTransactionRpcResponse,yt as WalletGetBalanceInput,vt as WalletGetBalanceResponse,It as WalletGetTransactionsInput,St as WalletGetTransactionsResponse,ht as WalletIdFromPath,rt as WalletResponse,kt as WalletUpdateInput,wt as WalletsSearchInput};

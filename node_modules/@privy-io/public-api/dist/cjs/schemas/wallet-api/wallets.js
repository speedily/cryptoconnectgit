"use strict";var e=require("zod"),t=require("@privy-io/api-base"),i=require("../api.js"),a=require("../core.js"),r=require("../transaction.js"),n=require("./export.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const o=e.z.enum(["secp256k1","ed25519"]),s=e.z.string().regex(/^[mM]'?(\/\d+'?)*$/),l=e.z.literal("ECDSA"),p=e.z.literal("EdDSA"),d=e.z.union([l,p]),c=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let z=e.z.object({address:a.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional(),wallet_id:e.z.string().optional()}),u=e.z.object({address:a.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional(),wallet_id:e.z.string().optional()});const g=e.z.enum(["root","manager","delegated-actions"]).nullable(),h=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(z).strict(),_=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:c,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(z).strict(),m=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(z).strict(),b=e.z.string().startsWith("0x").refine((e=>!e.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),x=b.transform((e=>e));let y=e.z.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const j=e.z.union([b,y],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),v=e.z.object({from:a.WalletAddress.optional(),to:a.WalletAddress.optional(),chain_id:j.optional(),nonce:j.optional(),data:b.optional(),value:j.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:j.optional(),gas_price:j.optional(),max_fee_per_gas:j.optional(),max_priority_fee_per_gas:j.optional()}).strict(),A=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:v}).strict()}).merge(u).strict(),I=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:c,params:e.z.object({transaction:v}).strict()}).merge(u).strict(),R=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}).strict(),W=e.z.object({method:e.z.literal("personal_sign"),params:R}).merge(u).strict(),S=e.z.object({method:e.z.literal("secp256k1_sign"),params:e.z.object({hash:x}).strict()}).merge(u).strict(),T=e.z.object({params:e.z.object({hash:x}).strict()}).strict(),f=e.z.record(e.z.string(),e.z.any()),w=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),D=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:f,types:w,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()}).strict()}).strict()}).merge(u).strict(),E=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:n.PrivateKeyExportInput}).strict(),P=e.z.discriminatedUnion("method",[A,I,W,D,S]),k=e.z.discriminatedUnion("method",[h,_,m]),C=e.z.union([P,k,E]),K=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),q=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:c}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),B=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),O=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),U=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:c,transaction_request:v.optional()}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),M=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),F=e.z.object({method:e.z.literal("secp256k1_sign"),data:e.z.object({signature:b,encoding:e.z.literal("hex")})}),G=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),H=e.z.object({method:e.z.literal("exportPrivateKey"),data:n.PrivateKeyExportInput}),N=e.z.object({data:e.z.object({signature:b,encoding:e.z.literal("hex")}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}).strict(),L=e.z.discriminatedUnion("method",[K,q,B,O,U,M,F,G,H]),Q=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:g.optional()}),V=e.z.literal("cosmos"),$=e.z.literal("stellar"),Z=e.z.literal("sui"),J=e.z.literal("tron"),X=e.z.union([V,$,Z,J]),Y=e.z.literal("curve_signing"),ee=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]),te=e.z.union([X,ee]),ie=e.z.object({id:e.z.string(),address:e.z.string(),public_key:e.z.string().optional(),created_at:e.z.number(),exported_at:e.z.number().nullable(),chain_type:te,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2(),override_policy_ids:e.z.array(e.z.string()).optional()})),owner_id:e.z.string().cuid2().nullable()}),ae=e.z.string().cuid2(),re=e.z.string(),ne=e.z.object({public_key:re}).strict(),oe={owner:ne.nullable().optional(),owner_id:ae.nullable().optional()},se=e.z.array(e.z.string().cuid2()).max(1,"Only one policy ID can be set").optional(),le=e.z.array(e.z.object({signer_id:ae,override_policy_ids:se}).strict()),pe=e.z.object({chain_type:te,policy_ids:se,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:le.optional(),...oe}).strict(),de=pe.refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,i=void 0!==e.additional_signers;return!t||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),ce=e.z.object({id:e.z.string(),chain_type:te,address:e.z.string(),authorization_threshold:e.z.number().optional()}),ze=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),ue=e.z.enum(["usdc","eth"]),ge=e.z.enum(["ethereum","arbitrum","base","linea","optimism","zksync_era"]),he=e.z.enum(["usd"]),_e=e.z.object({asset:e.z.union([ue,e.z.array(ue).max(10)]),chain:e.z.union([ge,e.z.array(ge).max(10)]),include_currency:he.optional()}),me=e.z.object({chain:ge,asset:ue,raw_value:e.z.string(),raw_value_decimals:e.z.number(),display_values:e.z.record(e.z.union([ue,he]),e.z.string())}),be=e.z.object({balances:e.z.array(me.refine((e=>e.asset in e.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),xe=e.z.object({id:e.z.string()}),ye=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:g,created_at:e.z.number()}),je=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),ve=i.Pagination.extend({chain_type:te.optional()}).strict(),Ae=e.z.object({policy_ids:se,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:le.optional(),...oe}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>void 0===e||""===e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.owner&&void 0!==e.owner_id&&t.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),Ie=i.Pagination.extend({chain:e.z.literal("base"),asset:e.z.union([ue,e.z.array(ue).max(2)])}).strict(),Re=e.z.object({type:e.z.literal("transfer_sent"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(me),We=e.z.object({type:e.z.literal("transfer_received"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(me),Se=e.z.discriminatedUnion("type",[Re,We]),Te=r.BaseTransactionResponse.extend({details:Se.nullable()}),fe=Te.extend({privy_transaction_id:e.z.string(),wallet_id:e.z.string()}),we=e.z.object({transactions:e.z.array(fe),next_cursor:e.z.string().nullable()});exports.AdditionalSignerInput=le,exports.Asset=ue,exports.AssetAmountDetails=me,exports.AuthorizationKeyDashboardResponse=ye,exports.AuthorizationKeyResponse=je,exports.AuthorizationKeyRole=g,exports.BalanceFiatCurrency=he,exports.BaseWalletApiCreateInput=pe,exports.CAIP2=c,exports.ChainNameInput=ge,exports.ChainType=te,exports.Cosmos=V,exports.CurveSigningChain=Y,exports.CurveSigningChainTypes=X,exports.CurveType=o,exports.ECDSA=l,exports.EdDSA=p,exports.FirstClassChainTypes=ee,exports.HDPath=s,exports.Hash=x,exports.Hex=b,exports.KeyQuorumId=ae,exports.OwnerInput=ne,exports.OwnerInputFields=oe,exports.P256PublicKey=re,exports.PolicyInput=se,exports.PrivyTransactionResponseWithDetails=fe,exports.Quantity=j,exports.SigningAlgorithm=d,exports.Stellar=$,exports.Sui=Z,exports.TransactionDetail=Se,exports.TransactionResponseWithDetails=Te,exports.TransferReceivedTransactionDetail=We,exports.TransferSentTransactionDetail=Re,exports.Tron=J,exports.TypedDataDomainInputParams=f,exports.TypedDataTypesInputParams=w,exports.UnsignedEthereumTransaction=v,exports.WalletApiCreateInput=de,exports.WalletApiCreateResponse=ce,exports.WalletApiEthereumPersonalSignRpcInput=W,exports.WalletApiEthereumPersonalSignRpcInputParams=R,exports.WalletApiEthereumPersonalSignRpcResponse=M,exports.WalletApiEthereumRpcInput=P,exports.WalletApiEthereumSecp256k1SignRpcInput=S,exports.WalletApiEthereumSecp256k1SignRpcResponse=F,exports.WalletApiEthereumSendTransactionRpcInput=I,exports.WalletApiEthereumSendTransactionRpcResponse=U,exports.WalletApiEthereumSignTransactionRpcInput=A,exports.WalletApiEthereumSignTransactionRpcResponse=O,exports.WalletApiEthereumSignTypedDataRpcInput=D,exports.WalletApiEthereumSignTypedDataRpcResponse=G,exports.WalletApiExportPrivateKeyRpcInput=E,exports.WalletApiExportPrivateKeyRpcResponse=H,exports.WalletApiRawSignInput=T,exports.WalletApiRawSignResponse=N,exports.WalletApiRegisterAuthorizationKeyInput=Q,exports.WalletApiRevokeAuthorizationKeyInput=xe,exports.WalletApiRpcInput=C,exports.WalletApiRpcResponse=L,exports.WalletApiSolanaRpcInput=k,exports.WalletApiSolanaSignAndSendTransactionRpcInput=_,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=q,exports.WalletApiSolanaSignMessageRpcInput=m,exports.WalletApiSolanaSignMessageRpcResponse=B,exports.WalletApiSolanaSignTransactionRpcInput=h,exports.WalletApiSolanaSignTransactionRpcResponse=K,exports.WalletGetBalanceInput=_e,exports.WalletGetBalanceResponse=be,exports.WalletGetTransactionsInput=Ie,exports.WalletGetTransactionsResponse=we,exports.WalletIdFromPath=ze,exports.WalletResponse=ie,exports.WalletUpdateInput=Ae,exports.WalletsSearchInput=ve;

import { fetchAcrossApi } from "../utils/index.js";
import { MAINNET_API_URL } from "../constants/index.js";
/**
 * Returns the suggested fees for a given deposit route.
 * @param params - See {@link GetSuggestedFeesParams}.
 * @returns See {@link GetSuggestedFeesReturnType}.
 * @public
 */
export async function getSuggestedFees({ apiUrl = MAINNET_API_URL, logger, ...params }) {
    const data = await fetchAcrossApi(`${apiUrl}/suggested-fees`, params, logger);
    return parseSuggestedFees(data);
}
export function parseSuggestedFees(raw) {
    return {
        // ensure even unformatted values get passed through
        ...raw,
        outputAmount: BigInt(raw.outputAmount),
        estimatedFillTimeSec: raw.estimatedFillTimeSec,
        capitalFeePct: Number(raw.capitalFeePct),
        capitalFeeTotal: BigInt(raw.capitalFeeTotal),
        relayGasFeePct: Number(raw.relayGasFeePct),
        relayGasFeeTotal: BigInt(raw.relayGasFeeTotal),
        relayFeePct: Number(raw.relayFeePct),
        relayFeeTotal: BigInt(raw.relayFeeTotal),
        lpFeePct: raw.lpFeePct, // deprecated
        timestamp: Number(raw.timestamp),
        isAmountTooLow: raw.isAmountTooLow,
        quoteBlock: Number(raw.quoteBlock),
        exclusiveRelayer: raw.exclusiveRelayer,
        exclusivityDeadline: raw.exclusivityDeadline,
        spokePoolAddress: raw.spokePoolAddress,
        destinationSpokePoolAddress: raw.destinationSpokePoolAddress,
        fillDeadline: Number(raw.fillDeadline),
        totalRelayFee: {
            pct: BigInt(raw.totalRelayFee.pct),
            total: BigInt(raw.totalRelayFee.total),
        },
        relayerCapitalFee: {
            pct: BigInt(raw.relayerCapitalFee.pct),
            total: BigInt(raw.relayerCapitalFee.total),
        },
        relayerGasFee: {
            pct: BigInt(raw.relayerGasFee.pct),
            total: BigInt(raw.relayerGasFee.total),
        },
        lpFee: {
            pct: BigInt(raw.lpFee.pct),
            total: BigInt(raw.lpFee.total),
        },
        limits: {
            minDeposit: BigInt(raw.limits.minDeposit),
            maxDeposit: BigInt(raw.limits.maxDeposit),
            maxDepositInstant: BigInt(raw.limits.maxDepositInstant),
            maxDepositShortDelay: BigInt(raw.limits.maxDepositShortDelay),
            recommendedDepositInstant: BigInt(raw.limits.recommendedDepositInstant),
        },
        inputToken: {
            address: raw.inputToken.address,
            symbol: raw.inputToken.symbol,
            decimals: raw.inputToken.decimals,
            chainId: raw.inputToken.chainId,
        },
        outputToken: {
            address: raw.outputToken.address,
            symbol: raw.outputToken.symbol,
            decimals: raw.outputToken.decimals,
            chainId: raw.outputToken.chainId,
        },
    };
}
//# sourceMappingURL=getSuggestedFees.js.map
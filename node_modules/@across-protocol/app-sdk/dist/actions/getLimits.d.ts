import { Address, Hex } from "viem";
import { LoggerT } from "../utils/index.js";
import { Amount } from "../types/index.js";
type LimitsQueryParams = {
    originChainId: number;
    destinationChainId: number;
    inputToken: Address;
    outputToken: Address;
    /**
     * [Optional] The input amount of the deposit. Defaults to a small simulation amount.
     * Should in most cases be omitted but is required when using Across+, i.e. when
     * a cross-chain message is attached to the deposit.
     */
    amount?: Amount;
    /**
     * [Optional] The cross-chain message of the deposit when using Across+ that should
     * be executed on the destination chain. Note that `amount` is required when using
     * Across+.
     */
    message?: Hex;
    /**
     * [Optional] The recipient address. Should in most cases be omitted but is required
     * when using Across+, i.e. when a cross-chain message is attached to the deposit.
     * This needs to be the address of the handler contract on the destination chain.
     */
    recipient?: Address;
    /**
     * [Optional] The relayer address to simulate fill with. Defaults to the Across relayer.
     */
    relayer?: Address;
    /**
     * [Optional] Caller specifies whether to includes routes where input token
     * and output token do not have the same decimals
     */
    allowUnmatchedDecimals?: boolean;
};
/**
 * Params for {@link getLimits}.
 */
export type GetLimitsParams = LimitsQueryParams & {
    /**
     * [Optional] The Across API URL to use. Defaults to the mainnet API URL.
     */
    apiUrl?: string;
    /**
     * [Optional] The logger to use.
     */
    logger?: LoggerT;
};
export type GetLimitsReturnType = {
    /**
     * The minimum deposit amount for the route.
     */
    minDeposit: bigint;
    /**
     * The maximum deposit amount for the route.
     */
    maxDeposit: bigint;
    /**
     * The maximum deposit amount for the route that can be executed instantly.
     */
    maxDepositInstant: bigint;
};
/**
 * Returns the deposit limits for a given route.
 * @param params - See {@link GetLimitsParams}.
 * @returns See {@link GetLimitsReturnType}.
 */
export declare function getLimits({ apiUrl, logger, ...params }: GetLimitsParams): Promise<GetLimitsReturnType>;
export {};
//# sourceMappingURL=getLimits.d.ts.map
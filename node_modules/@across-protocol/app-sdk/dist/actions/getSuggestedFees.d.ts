import { Address } from "viem";
import { LoggerT } from "../utils/index.js";
import { Amount } from "../types/index.js";
import { SuggestedFeesApiResponse } from "../api/suggested-fees.js";
export type SuggestedFeesQueryParams = {
    originChainId: number;
    destinationChainId: number;
    /**
     * The input token address on origin chain.
     */
    inputToken: Address;
    /**
     * The output token address on destination chain.
     */
    outputToken: Address;
    /**
     * The amount of input tokens to deposit.
     */
    amount: Amount;
    /**
     * [Optional] Whether the input token is a native token on the origin chain.
     * Defaults to `false`. Should be set to `true` for ETH only if origin chain is not
     * Polygon.
     */
    isNative?: boolean;
    /**
     * [Optional] The cross-chain message of the deposit when using Across+ that should
     * be executed on the destination chain. Note that `amount` is required when using
     * Across+.
     */
    message?: string;
    /**
     * [Optional] The recipient address. Should in most cases be omitted but is required
     * when using Across+, i.e. when a cross-chain message is attached to the deposit.
     * This needs to be the address of the handler contract on the destination chain.
     */
    recipient?: Address;
    /**
     * [Optional] The relayer address to simulate fill with. Defaults to the Across relayer.
     */
    relayer?: Address;
    /**
     * [Optional] Whether to skip the amount limit check. Defaults to `false`.
     */
    skipAmountLimit?: boolean;
    /**
     * [Optional] Caller specifies whether to includes routes where input token
     * and output token do not have the same decimals
     */
    allowUnmatchedDecimals?: boolean;
};
/**
 * Params for {@link getSuggestedFees}.
 */
export type GetSuggestedFeesParams = SuggestedFeesQueryParams & {
    /**
     * [Optional] The Across API URL to use. Defaults to the mainnet API URL.
     */
    apiUrl?: string;
    /**
     * [Optional] The logger to use.
     */
    logger?: LoggerT;
};
export type GetSuggestedFeesReturnType = {
    capitalFeePct: number;
    capitalFeeTotal: bigint;
    relayGasFeePct: number;
    relayGasFeeTotal: bigint;
    relayFeePct: number;
    relayFeeTotal: bigint;
    lpFeePct?: string;
    fillDeadline: number;
    /**
     * The estimated fill time in seconds.
     */
    estimatedFillTimeSec: number;
    /**
     * The timestamp of the quote.
     */
    timestamp: number;
    /**
     * Whether the deposit amount is too low.
     */
    isAmountTooLow: boolean;
    /**
     * The quote block.
     */
    quoteBlock: number;
    /**
     * The exclusive relayer address. Will be the zero address if no exclusivity is
     * determined.
     */
    exclusiveRelayer: string;
    /**
     * The exclusivity deadline. Will be 0 if no exclusivity is determined.
     */
    exclusivityDeadline: number;
    /**
     * The spoke pool address on the origin chain.
     */
    spokePoolAddress: Address;
    /**
     * The spoke pool address on the destination chain.
     */
    destinationSpokePoolAddress: Address;
    /**
     * The output amount that will be received after deducting the fees.
     */
    outputAmount: bigint;
    /**
     * The total relay fee, i.e. the sum of the relayer capital fee, the relayer gas fee,
     * and the lp fee.
     */
    totalRelayFee: {
        pct: bigint;
        total: bigint;
    };
    /**
     * The relayer capital fee.
     */
    relayerCapitalFee: {
        pct: bigint;
        total: bigint;
    };
    /**
     * The relayer gas fee.
     */
    relayerGasFee: {
        pct: bigint;
        total: bigint;
    };
    /**
     * The lp fee.
     */
    lpFee: {
        pct: bigint;
        total: bigint;
    };
    /**
     * The deposit limits.
     */
    limits: {
        minDeposit: bigint;
        maxDeposit: bigint;
        maxDepositInstant: bigint;
        maxDepositShortDelay: bigint;
        recommendedDepositInstant: bigint;
    };
    inputToken: {
        address: Address;
        symbol: string;
        decimals: number;
        chainId: number;
    };
    outputToken: {
        address: Address;
        symbol: string;
        decimals: number;
        chainId: number;
    };
};
/**
 * Returns the suggested fees for a given deposit route.
 * @param params - See {@link GetSuggestedFeesParams}.
 * @returns See {@link GetSuggestedFeesReturnType}.
 * @public
 */
export declare function getSuggestedFees({ apiUrl, logger, ...params }: GetSuggestedFeesParams): Promise<GetSuggestedFeesReturnType>;
export declare function parseSuggestedFees(raw: SuggestedFeesApiResponse): GetSuggestedFeesReturnType;
//# sourceMappingURL=getSuggestedFees.d.ts.map
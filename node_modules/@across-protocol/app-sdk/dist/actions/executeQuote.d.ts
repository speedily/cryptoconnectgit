import { Address, Hash, Hex, SimulateContractReturnType, TransactionReceipt } from "viem";
import { Quote } from "./getQuote.js";
import { LoggerT } from "../utils/index.js";
import { DepositStatus } from "./waitForDepositTx.js";
import { ConfiguredPublicClient, ConfiguredWalletClient } from "../types/index.js";
import { parseFillLogs } from "./waitForFillTx.js";
import { parseDepositLogs } from "./getDepositFromLogs.js";
export type ExecutionProgress = TransactionProgress;
type ProgressMeta = ApproveMeta | DepositMeta | FillMeta | undefined;
type ApproveMeta = {
    approvalAmount: bigint;
    spender: Address;
};
type DepositMeta = {
    deposit: Quote["deposit"];
};
type FillMeta = {
    deposit: Quote["deposit"];
    depositId: DepositStatus["depositId"];
};
export type TransactionProgress = {
    step: "approve";
    status: "idle";
} | {
    step: "approve";
    status: "simulationPending";
    meta: ApproveMeta;
} | {
    step: "approve";
    status: "simulationSuccess";
    txRequest: TxRequest;
    meta: ApproveMeta;
} | {
    step: "approve";
    status: "txPending";
    txHash: Hash;
    meta: ApproveMeta;
} | {
    step: "approve";
    status: "txSuccess";
    txReceipt: TransactionReceipt;
    meta: ApproveMeta;
} | {
    step: "deposit";
    status: "simulationPending";
    meta: DepositMeta;
} | {
    step: "deposit";
    status: "simulationSuccess";
    txRequest: TxRequest;
    meta: DepositMeta;
} | {
    step: "deposit";
    status: "txPending";
    txHash: Hash;
    meta: DepositMeta;
} | {
    step: "deposit";
    status: "txSuccess";
    txReceipt: TransactionReceipt;
    depositId: DepositStatus["depositId"];
    meta: DepositMeta;
    depositLog: ReturnType<typeof parseDepositLogs>;
} | {
    step: "fill";
    status: "txPending";
    meta: FillMeta;
} | {
    step: "fill";
    status: "txSuccess";
    txReceipt: TransactionReceipt;
    fillTxTimestamp: bigint;
    actionSuccess: boolean | undefined;
    meta: FillMeta;
    fillLog: ReturnType<typeof parseFillLogs>;
} | {
    step: "approve" | "deposit" | "fill";
    status: "simulationError" | "txError" | "error";
    error: Error;
    meta: ProgressMeta;
};
type TxRequest = Awaited<SimulateContractReturnType>["request"];
/**
 * Params for {@link executeQuote}.
 */
export type ExecuteQuoteParams = {
    /**
     * An identifier for the integrator.
     */
    integratorId: Hex;
    /**
     * The deposit to execute. Should be taken from return value of {@link getQuote}.
     */
    deposit: Quote["deposit"];
    /**
     * The wallet client to use for the deposit.
     */
    walletClient: ConfiguredWalletClient;
    /**
     * The public client for the origin chain.
     */
    originClient: ConfiguredPublicClient;
    /**
     * The public client for the destination chain.
     */
    destinationClient: ConfiguredPublicClient;
    /**
     * Whether to use an infinite approval for the SpokePool contract.
     */
    infiniteApproval?: boolean;
    /**
     * Whether to skip the allowance check.
     */
    skipAllowanceCheck?: boolean;
    /**
     * Whether to throw if an error occurs.
     */
    throwOnError?: boolean;
    /**
     * Whether to force the origin chain by switching to it if necessary.
     */
    forceOriginChain?: boolean;
    /**
     * A handler for the execution progress. See {@link ExecutionProgress} for steps.
     */
    onProgress?: (progress: ExecutionProgress) => void;
    /**
     * The logger to use.
     */
    logger?: LoggerT;
};
/**
 * Executes a quote by:
 * 1. Approving the SpokePool contract if necessary
 * 2. Depositing the input token on the origin chain
 * 3. Waiting for the deposit to be filled on the destination chain
 * @param params - See {@link ExecuteQuoteParams}.
 * @returns The deposit ID and receipts for the deposit and fill transactions.
 * @public
 */
export declare function executeQuote(params: ExecuteQuoteParams): Promise<{
    depositId: bigint;
    depositTxReceipt: TransactionReceipt;
    fillTxReceipt: TransactionReceipt;
    error?: undefined;
} | {
    error: unknown;
    depositId?: undefined;
    depositTxReceipt?: undefined;
    fillTxReceipt?: undefined;
}>;
export {};
//# sourceMappingURL=executeQuote.d.ts.map
import { LoggerT } from "./logger.js";
type ParamBaseValue = number | bigint | string | boolean;
/**
 * Builds a URL search string from an object of query parameters.
 *
 * @param params - An object where keys are query parameter names and values are either a string or an array of strings representing the parameter values.
 *
 * @returns queryString - A properly formatted query string for use in URLs, (without the leading '?').
 */
export declare function buildSearchParams<T extends Record<string, ParamBaseValue | Array<ParamBaseValue>>>(params: T): string;
export declare function isOk(res: Response): boolean;
export declare function isDefined<T>(value: T): value is NonNullable<T>;
export declare const fetchAcrossApi: <ResBody>(apiUrl: string, params: Record<string, ParamBaseValue | Array<ParamBaseValue>>, logger?: LoggerT) => Promise<ResBody>;
export declare const fetchIndexerApi: <ResBody>(apiUrl: string, params: Record<string, ParamBaseValue | Array<ParamBaseValue>>, logger?: LoggerT) => Promise<ResBody>;
export {};
//# sourceMappingURL=fetch.d.ts.map
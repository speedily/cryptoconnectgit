"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImmutableMetadataSave = exports.MutableMetadataSave_AttributesEntry = exports.MutableMetadataSave = exports.GroupSave = exports.conversationTypeSaveToJSON = exports.conversationTypeSaveFromJSON = exports.ConversationTypeSave = exports.groupMembershipStateSaveToJSON = exports.groupMembershipStateSaveFromJSON = exports.GroupMembershipStateSave = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "xmtp.device_sync.group_backup";
/** Definitions for backups */
/** Group membership state */
var GroupMembershipStateSave;
(function (GroupMembershipStateSave) {
    GroupMembershipStateSave[GroupMembershipStateSave["GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED"] = 0] = "GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED";
    GroupMembershipStateSave[GroupMembershipStateSave["GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED"] = 1] = "GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED";
    GroupMembershipStateSave[GroupMembershipStateSave["GROUP_MEMBERSHIP_STATE_SAVE_REJECTED"] = 2] = "GROUP_MEMBERSHIP_STATE_SAVE_REJECTED";
    GroupMembershipStateSave[GroupMembershipStateSave["GROUP_MEMBERSHIP_STATE_SAVE_PENDING"] = 3] = "GROUP_MEMBERSHIP_STATE_SAVE_PENDING";
    /**
     * GROUP_MEMBERSHIP_STATE_SAVE_RESTORED - A group is marked as this state when it is restored
     * from a backup. This is a non-functional archive state
     * that can be reactivated when the user is re-added to
     * the group.
     */
    GroupMembershipStateSave[GroupMembershipStateSave["GROUP_MEMBERSHIP_STATE_SAVE_RESTORED"] = 4] = "GROUP_MEMBERSHIP_STATE_SAVE_RESTORED";
    GroupMembershipStateSave[GroupMembershipStateSave["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GroupMembershipStateSave = exports.GroupMembershipStateSave || (exports.GroupMembershipStateSave = {}));
function groupMembershipStateSaveFromJSON(object) {
    switch (object) {
        case 0:
        case "GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED":
            return GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED;
        case 1:
        case "GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED":
            return GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED;
        case 2:
        case "GROUP_MEMBERSHIP_STATE_SAVE_REJECTED":
            return GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_REJECTED;
        case 3:
        case "GROUP_MEMBERSHIP_STATE_SAVE_PENDING":
            return GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_PENDING;
        case 4:
        case "GROUP_MEMBERSHIP_STATE_SAVE_RESTORED":
            return GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_RESTORED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GroupMembershipStateSave.UNRECOGNIZED;
    }
}
exports.groupMembershipStateSaveFromJSON = groupMembershipStateSaveFromJSON;
function groupMembershipStateSaveToJSON(object) {
    switch (object) {
        case GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED:
            return "GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED";
        case GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED:
            return "GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED";
        case GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_REJECTED:
            return "GROUP_MEMBERSHIP_STATE_SAVE_REJECTED";
        case GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_PENDING:
            return "GROUP_MEMBERSHIP_STATE_SAVE_PENDING";
        case GroupMembershipStateSave.GROUP_MEMBERSHIP_STATE_SAVE_RESTORED:
            return "GROUP_MEMBERSHIP_STATE_SAVE_RESTORED";
        case GroupMembershipStateSave.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.groupMembershipStateSaveToJSON = groupMembershipStateSaveToJSON;
/** Conversation type */
var ConversationTypeSave;
(function (ConversationTypeSave) {
    ConversationTypeSave[ConversationTypeSave["CONVERSATION_TYPE_SAVE_UNSPECIFIED"] = 0] = "CONVERSATION_TYPE_SAVE_UNSPECIFIED";
    ConversationTypeSave[ConversationTypeSave["CONVERSATION_TYPE_SAVE_GROUP"] = 1] = "CONVERSATION_TYPE_SAVE_GROUP";
    ConversationTypeSave[ConversationTypeSave["CONVERSATION_TYPE_SAVE_DM"] = 2] = "CONVERSATION_TYPE_SAVE_DM";
    ConversationTypeSave[ConversationTypeSave["CONVERSATION_TYPE_SAVE_SYNC"] = 3] = "CONVERSATION_TYPE_SAVE_SYNC";
    ConversationTypeSave[ConversationTypeSave["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConversationTypeSave = exports.ConversationTypeSave || (exports.ConversationTypeSave = {}));
function conversationTypeSaveFromJSON(object) {
    switch (object) {
        case 0:
        case "CONVERSATION_TYPE_SAVE_UNSPECIFIED":
            return ConversationTypeSave.CONVERSATION_TYPE_SAVE_UNSPECIFIED;
        case 1:
        case "CONVERSATION_TYPE_SAVE_GROUP":
            return ConversationTypeSave.CONVERSATION_TYPE_SAVE_GROUP;
        case 2:
        case "CONVERSATION_TYPE_SAVE_DM":
            return ConversationTypeSave.CONVERSATION_TYPE_SAVE_DM;
        case 3:
        case "CONVERSATION_TYPE_SAVE_SYNC":
            return ConversationTypeSave.CONVERSATION_TYPE_SAVE_SYNC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ConversationTypeSave.UNRECOGNIZED;
    }
}
exports.conversationTypeSaveFromJSON = conversationTypeSaveFromJSON;
function conversationTypeSaveToJSON(object) {
    switch (object) {
        case ConversationTypeSave.CONVERSATION_TYPE_SAVE_UNSPECIFIED:
            return "CONVERSATION_TYPE_SAVE_UNSPECIFIED";
        case ConversationTypeSave.CONVERSATION_TYPE_SAVE_GROUP:
            return "CONVERSATION_TYPE_SAVE_GROUP";
        case ConversationTypeSave.CONVERSATION_TYPE_SAVE_DM:
            return "CONVERSATION_TYPE_SAVE_DM";
        case ConversationTypeSave.CONVERSATION_TYPE_SAVE_SYNC:
            return "CONVERSATION_TYPE_SAVE_SYNC";
        case ConversationTypeSave.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.conversationTypeSaveToJSON = conversationTypeSaveToJSON;
function createBaseGroupSave() {
    return {
        id: new Uint8Array(),
        createdAtNs: long_1.default.ZERO,
        membershipState: 0,
        installationsLastChecked: long_1.default.ZERO,
        addedByInboxId: "",
        welcomeId: undefined,
        rotatedAtNs: long_1.default.ZERO,
        conversationType: 0,
        dmId: undefined,
        lastMessageNs: undefined,
        messageDisappearFromNs: undefined,
        messageDisappearInNs: undefined,
        metadata: undefined,
        mutableMetadata: undefined,
        pausedForVersion: undefined,
    };
}
exports.GroupSave = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (!message.createdAtNs.isZero()) {
            writer.uint32(16).int64(message.createdAtNs);
        }
        if (message.membershipState !== 0) {
            writer.uint32(24).int32(message.membershipState);
        }
        if (!message.installationsLastChecked.isZero()) {
            writer.uint32(32).int64(message.installationsLastChecked);
        }
        if (message.addedByInboxId !== "") {
            writer.uint32(42).string(message.addedByInboxId);
        }
        if (message.welcomeId !== undefined) {
            writer.uint32(48).int64(message.welcomeId);
        }
        if (!message.rotatedAtNs.isZero()) {
            writer.uint32(56).int64(message.rotatedAtNs);
        }
        if (message.conversationType !== 0) {
            writer.uint32(64).int32(message.conversationType);
        }
        if (message.dmId !== undefined) {
            writer.uint32(74).string(message.dmId);
        }
        if (message.lastMessageNs !== undefined) {
            writer.uint32(80).int64(message.lastMessageNs);
        }
        if (message.messageDisappearFromNs !== undefined) {
            writer.uint32(88).int64(message.messageDisappearFromNs);
        }
        if (message.messageDisappearInNs !== undefined) {
            writer.uint32(96).int64(message.messageDisappearInNs);
        }
        if (message.metadata !== undefined) {
            exports.ImmutableMetadataSave.encode(message.metadata, writer.uint32(106).fork()).ldelim();
        }
        if (message.mutableMetadata !== undefined) {
            exports.MutableMetadataSave.encode(message.mutableMetadata, writer.uint32(114).fork()).ldelim();
        }
        if (message.pausedForVersion !== undefined) {
            writer.uint32(122).string(message.pausedForVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupSave();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.bytes();
                    break;
                case 2:
                    message.createdAtNs = reader.int64();
                    break;
                case 3:
                    message.membershipState = reader.int32();
                    break;
                case 4:
                    message.installationsLastChecked = reader.int64();
                    break;
                case 5:
                    message.addedByInboxId = reader.string();
                    break;
                case 6:
                    message.welcomeId = reader.int64();
                    break;
                case 7:
                    message.rotatedAtNs = reader.int64();
                    break;
                case 8:
                    message.conversationType = reader.int32();
                    break;
                case 9:
                    message.dmId = reader.string();
                    break;
                case 10:
                    message.lastMessageNs = reader.int64();
                    break;
                case 11:
                    message.messageDisappearFromNs = reader.int64();
                    break;
                case 12:
                    message.messageDisappearInNs = reader.int64();
                    break;
                case 13:
                    message.metadata = exports.ImmutableMetadataSave.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.mutableMetadata = exports.MutableMetadataSave.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.pausedForVersion = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(),
            createdAtNs: isSet(object.createdAtNs)
                ? long_1.default.fromValue(object.createdAtNs)
                : long_1.default.ZERO,
            membershipState: isSet(object.membershipState)
                ? groupMembershipStateSaveFromJSON(object.membershipState)
                : 0,
            installationsLastChecked: isSet(object.installationsLastChecked)
                ? long_1.default.fromValue(object.installationsLastChecked)
                : long_1.default.ZERO,
            addedByInboxId: isSet(object.addedByInboxId)
                ? String(object.addedByInboxId)
                : "",
            welcomeId: isSet(object.welcomeId)
                ? long_1.default.fromValue(object.welcomeId)
                : undefined,
            rotatedAtNs: isSet(object.rotatedAtNs)
                ? long_1.default.fromValue(object.rotatedAtNs)
                : long_1.default.ZERO,
            conversationType: isSet(object.conversationType)
                ? conversationTypeSaveFromJSON(object.conversationType)
                : 0,
            dmId: isSet(object.dmId) ? String(object.dmId) : undefined,
            lastMessageNs: isSet(object.lastMessageNs)
                ? long_1.default.fromValue(object.lastMessageNs)
                : undefined,
            messageDisappearFromNs: isSet(object.messageDisappearFromNs)
                ? long_1.default.fromValue(object.messageDisappearFromNs)
                : undefined,
            messageDisappearInNs: isSet(object.messageDisappearInNs)
                ? long_1.default.fromValue(object.messageDisappearInNs)
                : undefined,
            metadata: isSet(object.metadata)
                ? exports.ImmutableMetadataSave.fromJSON(object.metadata)
                : undefined,
            mutableMetadata: isSet(object.mutableMetadata)
                ? exports.MutableMetadataSave.fromJSON(object.mutableMetadata)
                : undefined,
            pausedForVersion: isSet(object.pausedForVersion)
                ? String(object.pausedForVersion)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined &&
            (obj.id = base64FromBytes(message.id !== undefined ? message.id : new Uint8Array()));
        message.createdAtNs !== undefined &&
            (obj.createdAtNs = (message.createdAtNs || long_1.default.ZERO).toString());
        message.membershipState !== undefined &&
            (obj.membershipState = groupMembershipStateSaveToJSON(message.membershipState));
        message.installationsLastChecked !== undefined &&
            (obj.installationsLastChecked = (message.installationsLastChecked || long_1.default.ZERO).toString());
        message.addedByInboxId !== undefined &&
            (obj.addedByInboxId = message.addedByInboxId);
        message.welcomeId !== undefined &&
            (obj.welcomeId = (message.welcomeId || undefined).toString());
        message.rotatedAtNs !== undefined &&
            (obj.rotatedAtNs = (message.rotatedAtNs || long_1.default.ZERO).toString());
        message.conversationType !== undefined &&
            (obj.conversationType = conversationTypeSaveToJSON(message.conversationType));
        message.dmId !== undefined && (obj.dmId = message.dmId);
        message.lastMessageNs !== undefined &&
            (obj.lastMessageNs = (message.lastMessageNs || undefined).toString());
        message.messageDisappearFromNs !== undefined &&
            (obj.messageDisappearFromNs = (message.messageDisappearFromNs || undefined).toString());
        message.messageDisappearInNs !== undefined &&
            (obj.messageDisappearInNs = (message.messageDisappearInNs || undefined).toString());
        message.metadata !== undefined &&
            (obj.metadata = message.metadata
                ? exports.ImmutableMetadataSave.toJSON(message.metadata)
                : undefined);
        message.mutableMetadata !== undefined &&
            (obj.mutableMetadata = message.mutableMetadata
                ? exports.MutableMetadataSave.toJSON(message.mutableMetadata)
                : undefined);
        message.pausedForVersion !== undefined &&
            (obj.pausedForVersion = message.pausedForVersion);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGroupSave();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.createdAtNs =
            object.createdAtNs !== undefined && object.createdAtNs !== null
                ? long_1.default.fromValue(object.createdAtNs)
                : long_1.default.ZERO;
        message.membershipState = (_b = object.membershipState) !== null && _b !== void 0 ? _b : 0;
        message.installationsLastChecked =
            object.installationsLastChecked !== undefined &&
                object.installationsLastChecked !== null
                ? long_1.default.fromValue(object.installationsLastChecked)
                : long_1.default.ZERO;
        message.addedByInboxId = (_c = object.addedByInboxId) !== null && _c !== void 0 ? _c : "";
        message.welcomeId =
            object.welcomeId !== undefined && object.welcomeId !== null
                ? long_1.default.fromValue(object.welcomeId)
                : undefined;
        message.rotatedAtNs =
            object.rotatedAtNs !== undefined && object.rotatedAtNs !== null
                ? long_1.default.fromValue(object.rotatedAtNs)
                : long_1.default.ZERO;
        message.conversationType = (_d = object.conversationType) !== null && _d !== void 0 ? _d : 0;
        message.dmId = (_e = object.dmId) !== null && _e !== void 0 ? _e : undefined;
        message.lastMessageNs =
            object.lastMessageNs !== undefined && object.lastMessageNs !== null
                ? long_1.default.fromValue(object.lastMessageNs)
                : undefined;
        message.messageDisappearFromNs =
            object.messageDisappearFromNs !== undefined &&
                object.messageDisappearFromNs !== null
                ? long_1.default.fromValue(object.messageDisappearFromNs)
                : undefined;
        message.messageDisappearInNs =
            object.messageDisappearInNs !== undefined &&
                object.messageDisappearInNs !== null
                ? long_1.default.fromValue(object.messageDisappearInNs)
                : undefined;
        message.metadata =
            object.metadata !== undefined && object.metadata !== null
                ? exports.ImmutableMetadataSave.fromPartial(object.metadata)
                : undefined;
        message.mutableMetadata =
            object.mutableMetadata !== undefined && object.mutableMetadata !== null
                ? exports.MutableMetadataSave.fromPartial(object.mutableMetadata)
                : undefined;
        message.pausedForVersion = (_f = object.pausedForVersion) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseMutableMetadataSave() {
    return { attributes: {}, adminList: [], superAdminList: [] };
}
exports.MutableMetadataSave = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        Object.entries(message.attributes).forEach(([key, value]) => {
            exports.MutableMetadataSave_AttributesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        for (const v of message.adminList) {
            writer.uint32(18).string(v);
        }
        for (const v of message.superAdminList) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMutableMetadataSave();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = exports.MutableMetadataSave_AttributesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.attributes[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.adminList.push(reader.string());
                    break;
                case 3:
                    message.superAdminList.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            attributes: isObject(object.attributes)
                ? Object.entries(object.attributes).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            adminList: Array.isArray(object === null || object === void 0 ? void 0 : object.adminList)
                ? object.adminList.map((e) => String(e))
                : [],
            superAdminList: Array.isArray(object === null || object === void 0 ? void 0 : object.superAdminList)
                ? object.superAdminList.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        obj.attributes = {};
        if (message.attributes) {
            Object.entries(message.attributes).forEach(([k, v]) => {
                obj.attributes[k] = v;
            });
        }
        if (message.adminList) {
            obj.adminList = message.adminList.map((e) => e);
        }
        else {
            obj.adminList = [];
        }
        if (message.superAdminList) {
            obj.superAdminList = message.superAdminList.map((e) => e);
        }
        else {
            obj.superAdminList = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMutableMetadataSave();
        message.attributes = Object.entries((_a = object.attributes) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.adminList = ((_b = object.adminList) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.superAdminList = ((_c = object.superAdminList) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseMutableMetadataSave_AttributesEntry() {
    return { key: "", value: "" };
}
exports.MutableMetadataSave_AttributesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMutableMetadataSave_AttributesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMutableMetadataSave_AttributesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseImmutableMetadataSave() {
    return { creatorInboxId: "" };
}
exports.ImmutableMetadataSave = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creatorInboxId !== "") {
            writer.uint32(10).string(message.creatorInboxId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImmutableMetadataSave();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creatorInboxId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creatorInboxId: isSet(object.creatorInboxId)
                ? String(object.creatorInboxId)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.creatorInboxId !== undefined &&
            (obj.creatorInboxId = message.creatorInboxId);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImmutableMetadataSave();
        message.creatorInboxId = (_a = object.creatorInboxId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=group_backup.pb.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactionV2 = exports.reactionSchemaToJSON = exports.reactionSchemaFromJSON = exports.ReactionSchema = exports.reactionActionToJSON = exports.reactionActionFromJSON = exports.ReactionAction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "xmtp.mls.message_contents.content_types";
/**
 * reaction.proto
 * This file defines the ReactionV2 message type and is associated with the following ContentTypeId:
 *
 * ContentTypeId {
 *     authority_id: "xmtp.org",
 *     type_id:      "reaction",
 *     version_major: 2,
 *     version_minor: 0,
 * }
 */
/** Action enum to represent reaction states */
var ReactionAction;
(function (ReactionAction) {
    ReactionAction[ReactionAction["REACTION_ACTION_UNSPECIFIED"] = 0] = "REACTION_ACTION_UNSPECIFIED";
    ReactionAction[ReactionAction["REACTION_ACTION_ADDED"] = 1] = "REACTION_ACTION_ADDED";
    ReactionAction[ReactionAction["REACTION_ACTION_REMOVED"] = 2] = "REACTION_ACTION_REMOVED";
    ReactionAction[ReactionAction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ReactionAction = exports.ReactionAction || (exports.ReactionAction = {}));
function reactionActionFromJSON(object) {
    switch (object) {
        case 0:
        case "REACTION_ACTION_UNSPECIFIED":
            return ReactionAction.REACTION_ACTION_UNSPECIFIED;
        case 1:
        case "REACTION_ACTION_ADDED":
            return ReactionAction.REACTION_ACTION_ADDED;
        case 2:
        case "REACTION_ACTION_REMOVED":
            return ReactionAction.REACTION_ACTION_REMOVED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ReactionAction.UNRECOGNIZED;
    }
}
exports.reactionActionFromJSON = reactionActionFromJSON;
function reactionActionToJSON(object) {
    switch (object) {
        case ReactionAction.REACTION_ACTION_UNSPECIFIED:
            return "REACTION_ACTION_UNSPECIFIED";
        case ReactionAction.REACTION_ACTION_ADDED:
            return "REACTION_ACTION_ADDED";
        case ReactionAction.REACTION_ACTION_REMOVED:
            return "REACTION_ACTION_REMOVED";
        case ReactionAction.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.reactionActionToJSON = reactionActionToJSON;
/** Schema enum to represent reaction content types */
var ReactionSchema;
(function (ReactionSchema) {
    ReactionSchema[ReactionSchema["REACTION_SCHEMA_UNSPECIFIED"] = 0] = "REACTION_SCHEMA_UNSPECIFIED";
    ReactionSchema[ReactionSchema["REACTION_SCHEMA_UNICODE"] = 1] = "REACTION_SCHEMA_UNICODE";
    ReactionSchema[ReactionSchema["REACTION_SCHEMA_SHORTCODE"] = 2] = "REACTION_SCHEMA_SHORTCODE";
    ReactionSchema[ReactionSchema["REACTION_SCHEMA_CUSTOM"] = 3] = "REACTION_SCHEMA_CUSTOM";
    ReactionSchema[ReactionSchema["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ReactionSchema = exports.ReactionSchema || (exports.ReactionSchema = {}));
function reactionSchemaFromJSON(object) {
    switch (object) {
        case 0:
        case "REACTION_SCHEMA_UNSPECIFIED":
            return ReactionSchema.REACTION_SCHEMA_UNSPECIFIED;
        case 1:
        case "REACTION_SCHEMA_UNICODE":
            return ReactionSchema.REACTION_SCHEMA_UNICODE;
        case 2:
        case "REACTION_SCHEMA_SHORTCODE":
            return ReactionSchema.REACTION_SCHEMA_SHORTCODE;
        case 3:
        case "REACTION_SCHEMA_CUSTOM":
            return ReactionSchema.REACTION_SCHEMA_CUSTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ReactionSchema.UNRECOGNIZED;
    }
}
exports.reactionSchemaFromJSON = reactionSchemaFromJSON;
function reactionSchemaToJSON(object) {
    switch (object) {
        case ReactionSchema.REACTION_SCHEMA_UNSPECIFIED:
            return "REACTION_SCHEMA_UNSPECIFIED";
        case ReactionSchema.REACTION_SCHEMA_UNICODE:
            return "REACTION_SCHEMA_UNICODE";
        case ReactionSchema.REACTION_SCHEMA_SHORTCODE:
            return "REACTION_SCHEMA_SHORTCODE";
        case ReactionSchema.REACTION_SCHEMA_CUSTOM:
            return "REACTION_SCHEMA_CUSTOM";
        case ReactionSchema.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.reactionSchemaToJSON = reactionSchemaToJSON;
function createBaseReactionV2() {
    return {
        reference: "",
        referenceInboxId: "",
        action: 0,
        content: "",
        schema: 0,
    };
}
exports.ReactionV2 = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reference !== "") {
            writer.uint32(10).string(message.reference);
        }
        if (message.referenceInboxId !== "") {
            writer.uint32(18).string(message.referenceInboxId);
        }
        if (message.action !== 0) {
            writer.uint32(24).int32(message.action);
        }
        if (message.content !== "") {
            writer.uint32(34).string(message.content);
        }
        if (message.schema !== 0) {
            writer.uint32(40).int32(message.schema);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReactionV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.reference = reader.string();
                    break;
                case 2:
                    message.referenceInboxId = reader.string();
                    break;
                case 3:
                    message.action = reader.int32();
                    break;
                case 4:
                    message.content = reader.string();
                    break;
                case 5:
                    message.schema = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            reference: isSet(object.reference) ? String(object.reference) : "",
            referenceInboxId: isSet(object.referenceInboxId)
                ? String(object.referenceInboxId)
                : "",
            action: isSet(object.action) ? reactionActionFromJSON(object.action) : 0,
            content: isSet(object.content) ? String(object.content) : "",
            schema: isSet(object.schema) ? reactionSchemaFromJSON(object.schema) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.reference !== undefined && (obj.reference = message.reference);
        message.referenceInboxId !== undefined &&
            (obj.referenceInboxId = message.referenceInboxId);
        message.action !== undefined &&
            (obj.action = reactionActionToJSON(message.action));
        message.content !== undefined && (obj.content = message.content);
        message.schema !== undefined &&
            (obj.schema = reactionSchemaToJSON(message.schema));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseReactionV2();
        message.reference = (_a = object.reference) !== null && _a !== void 0 ? _a : "";
        message.referenceInboxId = (_b = object.referenceInboxId) !== null && _b !== void 0 ? _b : "";
        message.action = (_c = object.action) !== null && _c !== void 0 ? _c : 0;
        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : "";
        message.schema = (_e = object.schema) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=reaction.pb.js.map
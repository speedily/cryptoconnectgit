import Long from "long";
import { DeviceSyncRequest, DeviceSyncReply, V1UserPreferenceUpdate } from "../../device_sync/content.pb";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.mls.message_contents";
/**
 * Message content encoding structures
 * Copied from V2 code so that we can eventually retire all V2 message content
 */
/**
 * Recognized compression algorithms
 * protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
 */
export declare enum Compression {
    COMPRESSION_DEFLATE = 0,
    COMPRESSION_GZIP = 1,
    UNRECOGNIZED = -1
}
export declare function compressionFromJSON(object: any): Compression;
export declare function compressionToJSON(object: Compression): string;
/** ContentTypeId is used to identify the type of content stored in a Message. */
export interface ContentTypeId {
    /** authority governing this content type */
    authorityId: string;
    /** type identifier */
    typeId: string;
    /** major version of the type */
    versionMajor: number;
    /** minor version of the type */
    versionMinor: number;
}
/**
 * EncodedContent bundles the content with metadata identifying its type
 * and parameters required for correct decoding and presentation of the content.
 */
export interface EncodedContent {
    /**
     * content type identifier used to match the payload with
     * the correct decoding machinery
     */
    type: ContentTypeId | undefined;
    /** optional encoding parameters required to correctly decode the content */
    parameters: {
        [key: string]: string;
    };
    /**
     * optional fallback description of the content that can be used in case
     * the client cannot decode or render the content
     */
    fallback?: string | undefined;
    /**
     * optional compression; the value indicates algorithm used to
     * compress the encoded content bytes
     */
    compression?: Compression | undefined;
    /** encoded content itself */
    content: Uint8Array;
}
export interface EncodedContent_ParametersEntry {
    key: string;
    value: string;
}
/** A PlaintextEnvelope is the outermost payload that gets encrypted by MLS */
export interface PlaintextEnvelope {
    v1: PlaintextEnvelope_V1 | undefined;
    v2: PlaintextEnvelope_V2 | undefined;
}
/** Version 1 of the encrypted envelope */
export interface PlaintextEnvelope_V1 {
    /** Expected to be EncodedContent */
    content: Uint8Array;
    /**
     * A unique value that can be used to ensure that the same content can
     * produce different hashes. May be the sender timestamp.
     */
    idempotencyKey: string;
}
/** Version 2 of the encrypted envelope */
export interface PlaintextEnvelope_V2 {
    /**
     * A unique value that can be used to ensure that the same content can
     * produce different hashes. May be the sender timestamp.
     */
    idempotencyKey: string;
    /** Expected to be EncodedContent */
    content: Uint8Array | undefined;
    /** Initiator sends a request to receive sync payload */
    deviceSyncRequest: DeviceSyncRequest | undefined;
    /** Some other authorized installation sends a reply with a link to payload */
    deviceSyncReply: DeviceSyncReply | undefined;
    /** A serialized user preference update */
    userPreferenceUpdate: V1UserPreferenceUpdate | undefined;
}
export declare const ContentTypeId: {
    encode(message: ContentTypeId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ContentTypeId;
    fromJSON(object: any): ContentTypeId;
    toJSON(message: ContentTypeId): unknown;
    fromPartial<I extends {
        authorityId?: string | undefined;
        typeId?: string | undefined;
        versionMajor?: number | undefined;
        versionMinor?: number | undefined;
    } & {
        authorityId?: string | undefined;
        typeId?: string | undefined;
        versionMajor?: number | undefined;
        versionMinor?: number | undefined;
    } & { [K in Exclude<keyof I, keyof ContentTypeId>]: never; }>(object: I): ContentTypeId;
};
export declare const EncodedContent: {
    encode(message: EncodedContent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EncodedContent;
    fromJSON(object: any): EncodedContent;
    toJSON(message: EncodedContent): unknown;
    fromPartial<I extends {
        type?: {
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } | undefined;
        parameters?: {
            [x: string]: string | undefined;
        } | undefined;
        fallback?: string | undefined;
        compression?: Compression | undefined;
        content?: Uint8Array | undefined;
    } & {
        type?: ({
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } & {
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } & { [K in Exclude<keyof I["type"], keyof ContentTypeId>]: never; }) | undefined;
        parameters?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K_1 in Exclude<keyof I["parameters"], string | number>]: never; }) | undefined;
        fallback?: string | undefined;
        compression?: Compression | undefined;
        content?: Uint8Array | undefined;
    } & { [K_2 in Exclude<keyof I, keyof EncodedContent>]: never; }>(object: I): EncodedContent;
};
export declare const EncodedContent_ParametersEntry: {
    encode(message: EncodedContent_ParametersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EncodedContent_ParametersEntry;
    fromJSON(object: any): EncodedContent_ParametersEntry;
    toJSON(message: EncodedContent_ParametersEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EncodedContent_ParametersEntry>]: never; }>(object: I): EncodedContent_ParametersEntry;
};
export declare const PlaintextEnvelope: {
    encode(message: PlaintextEnvelope, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlaintextEnvelope;
    fromJSON(object: any): PlaintextEnvelope;
    toJSON(message: PlaintextEnvelope): unknown;
    fromPartial<I extends {
        v1?: {
            content?: Uint8Array | undefined;
            idempotencyKey?: string | undefined;
        } | undefined;
        v2?: {
            idempotencyKey?: string | undefined;
            content?: Uint8Array | undefined;
            deviceSyncRequest?: {
                requestId?: string | undefined;
                pinCode?: string | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                options?: {
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } | undefined;
            } | undefined;
            deviceSyncReply?: {
                requestId?: string | undefined;
                url?: string | undefined;
                encryptionKey?: {
                    aes256Gcm?: Uint8Array | undefined;
                } | undefined;
                timestampNs?: string | number | Long | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                metadata?: {
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    exportedAtNs?: string | number | Long | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } | undefined;
            } | undefined;
            userPreferenceUpdate?: {
                contents?: Uint8Array[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            content?: Uint8Array | undefined;
            idempotencyKey?: string | undefined;
        } & {
            content?: Uint8Array | undefined;
            idempotencyKey?: string | undefined;
        } & { [K in Exclude<keyof I["v1"], keyof PlaintextEnvelope_V1>]: never; }) | undefined;
        v2?: ({
            idempotencyKey?: string | undefined;
            content?: Uint8Array | undefined;
            deviceSyncRequest?: {
                requestId?: string | undefined;
                pinCode?: string | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                options?: {
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } | undefined;
            } | undefined;
            deviceSyncReply?: {
                requestId?: string | undefined;
                url?: string | undefined;
                encryptionKey?: {
                    aes256Gcm?: Uint8Array | undefined;
                } | undefined;
                timestampNs?: string | number | Long | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                metadata?: {
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    exportedAtNs?: string | number | Long | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } | undefined;
            } | undefined;
            userPreferenceUpdate?: {
                contents?: Uint8Array[] | undefined;
            } | undefined;
        } & {
            idempotencyKey?: string | undefined;
            content?: Uint8Array | undefined;
            deviceSyncRequest?: ({
                requestId?: string | undefined;
                pinCode?: string | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                options?: {
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } | undefined;
            } & {
                requestId?: string | undefined;
                pinCode?: string | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                options?: ({
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } & {
                    elements?: (import("../../device_sync/device_sync.pb").BackupElementSelection[] & import("../../device_sync/device_sync.pb").BackupElementSelection[] & { [K_1 in Exclude<keyof I["v2"]["deviceSyncRequest"]["options"]["elements"], keyof import("../../device_sync/device_sync.pb").BackupElementSelection[]>]: never; }) | undefined;
                    startNs?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_2 in Exclude<keyof I["v2"]["deviceSyncRequest"]["options"]["startNs"], keyof Long>]: never; }) | undefined;
                    endNs?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_3 in Exclude<keyof I["v2"]["deviceSyncRequest"]["options"]["endNs"], keyof Long>]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I["v2"]["deviceSyncRequest"]["options"], keyof import("../../device_sync/device_sync.pb").BackupOptions>]: never; }) | undefined;
            } & { [K_5 in Exclude<keyof I["v2"]["deviceSyncRequest"], keyof DeviceSyncRequest>]: never; }) | undefined;
            deviceSyncReply?: ({
                requestId?: string | undefined;
                url?: string | undefined;
                encryptionKey?: {
                    aes256Gcm?: Uint8Array | undefined;
                } | undefined;
                timestampNs?: string | number | Long | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                metadata?: {
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    exportedAtNs?: string | number | Long | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } | undefined;
            } & {
                requestId?: string | undefined;
                url?: string | undefined;
                encryptionKey?: ({
                    aes256Gcm?: Uint8Array | undefined;
                } & {
                    aes256Gcm?: Uint8Array | undefined;
                } & { [K_6 in Exclude<keyof I["v2"]["deviceSyncReply"]["encryptionKey"], "aes256Gcm">]: never; }) | undefined;
                timestampNs?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_7 in Exclude<keyof I["v2"]["deviceSyncReply"]["timestampNs"], keyof Long>]: never; }) | undefined;
                kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
                metadata?: ({
                    elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                    exportedAtNs?: string | number | Long | undefined;
                    startNs?: string | number | Long | undefined;
                    endNs?: string | number | Long | undefined;
                } & {
                    elements?: (import("../../device_sync/device_sync.pb").BackupElementSelection[] & import("../../device_sync/device_sync.pb").BackupElementSelection[] & { [K_8 in Exclude<keyof I["v2"]["deviceSyncReply"]["metadata"]["elements"], keyof import("../../device_sync/device_sync.pb").BackupElementSelection[]>]: never; }) | undefined;
                    exportedAtNs?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_9 in Exclude<keyof I["v2"]["deviceSyncReply"]["metadata"]["exportedAtNs"], keyof Long>]: never; }) | undefined;
                    startNs?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_10 in Exclude<keyof I["v2"]["deviceSyncReply"]["metadata"]["startNs"], keyof Long>]: never; }) | undefined;
                    endNs?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_11 in Exclude<keyof I["v2"]["deviceSyncReply"]["metadata"]["endNs"], keyof Long>]: never; }) | undefined;
                } & { [K_12 in Exclude<keyof I["v2"]["deviceSyncReply"]["metadata"], keyof import("../../device_sync/device_sync.pb").BackupMetadataSave>]: never; }) | undefined;
            } & { [K_13 in Exclude<keyof I["v2"]["deviceSyncReply"], keyof DeviceSyncReply>]: never; }) | undefined;
            userPreferenceUpdate?: ({
                contents?: Uint8Array[] | undefined;
            } & {
                contents?: (Uint8Array[] & Uint8Array[] & { [K_14 in Exclude<keyof I["v2"]["userPreferenceUpdate"]["contents"], keyof Uint8Array[]>]: never; }) | undefined;
            } & { [K_15 in Exclude<keyof I["v2"]["userPreferenceUpdate"], "contents">]: never; }) | undefined;
        } & { [K_16 in Exclude<keyof I["v2"], keyof PlaintextEnvelope_V2>]: never; }) | undefined;
    } & { [K_17 in Exclude<keyof I, keyof PlaintextEnvelope>]: never; }>(object: I): PlaintextEnvelope;
};
export declare const PlaintextEnvelope_V1: {
    encode(message: PlaintextEnvelope_V1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlaintextEnvelope_V1;
    fromJSON(object: any): PlaintextEnvelope_V1;
    toJSON(message: PlaintextEnvelope_V1): unknown;
    fromPartial<I extends {
        content?: Uint8Array | undefined;
        idempotencyKey?: string | undefined;
    } & {
        content?: Uint8Array | undefined;
        idempotencyKey?: string | undefined;
    } & { [K in Exclude<keyof I, keyof PlaintextEnvelope_V1>]: never; }>(object: I): PlaintextEnvelope_V1;
};
export declare const PlaintextEnvelope_V2: {
    encode(message: PlaintextEnvelope_V2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlaintextEnvelope_V2;
    fromJSON(object: any): PlaintextEnvelope_V2;
    toJSON(message: PlaintextEnvelope_V2): unknown;
    fromPartial<I extends {
        idempotencyKey?: string | undefined;
        content?: Uint8Array | undefined;
        deviceSyncRequest?: {
            requestId?: string | undefined;
            pinCode?: string | undefined;
            kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
            options?: {
                elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                startNs?: string | number | Long | undefined;
                endNs?: string | number | Long | undefined;
            } | undefined;
        } | undefined;
        deviceSyncReply?: {
            requestId?: string | undefined;
            url?: string | undefined;
            encryptionKey?: {
                aes256Gcm?: Uint8Array | undefined;
            } | undefined;
            timestampNs?: string | number | Long | undefined;
            kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
            metadata?: {
                elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                exportedAtNs?: string | number | Long | undefined;
                startNs?: string | number | Long | undefined;
                endNs?: string | number | Long | undefined;
            } | undefined;
        } | undefined;
        userPreferenceUpdate?: {
            contents?: Uint8Array[] | undefined;
        } | undefined;
    } & {
        idempotencyKey?: string | undefined;
        content?: Uint8Array | undefined;
        deviceSyncRequest?: ({
            requestId?: string | undefined;
            pinCode?: string | undefined;
            kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
            options?: {
                elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                startNs?: string | number | Long | undefined;
                endNs?: string | number | Long | undefined;
            } | undefined;
        } & {
            requestId?: string | undefined;
            pinCode?: string | undefined;
            kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
            options?: ({
                elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                startNs?: string | number | Long | undefined;
                endNs?: string | number | Long | undefined;
            } & {
                elements?: (import("../../device_sync/device_sync.pb").BackupElementSelection[] & import("../../device_sync/device_sync.pb").BackupElementSelection[] & { [K in Exclude<keyof I["deviceSyncRequest"]["options"]["elements"], keyof import("../../device_sync/device_sync.pb").BackupElementSelection[]>]: never; }) | undefined;
                startNs?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_1 in Exclude<keyof I["deviceSyncRequest"]["options"]["startNs"], keyof Long>]: never; }) | undefined;
                endNs?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_2 in Exclude<keyof I["deviceSyncRequest"]["options"]["endNs"], keyof Long>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["deviceSyncRequest"]["options"], keyof import("../../device_sync/device_sync.pb").BackupOptions>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["deviceSyncRequest"], keyof DeviceSyncRequest>]: never; }) | undefined;
        deviceSyncReply?: ({
            requestId?: string | undefined;
            url?: string | undefined;
            encryptionKey?: {
                aes256Gcm?: Uint8Array | undefined;
            } | undefined;
            timestampNs?: string | number | Long | undefined;
            kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
            metadata?: {
                elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                exportedAtNs?: string | number | Long | undefined;
                startNs?: string | number | Long | undefined;
                endNs?: string | number | Long | undefined;
            } | undefined;
        } & {
            requestId?: string | undefined;
            url?: string | undefined;
            encryptionKey?: ({
                aes256Gcm?: Uint8Array | undefined;
            } & {
                aes256Gcm?: Uint8Array | undefined;
            } & { [K_5 in Exclude<keyof I["deviceSyncReply"]["encryptionKey"], "aes256Gcm">]: never; }) | undefined;
            timestampNs?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_6 in Exclude<keyof I["deviceSyncReply"]["timestampNs"], keyof Long>]: never; }) | undefined;
            kind?: import("../../device_sync/device_sync.pb").BackupElementSelection | undefined;
            metadata?: ({
                elements?: import("../../device_sync/device_sync.pb").BackupElementSelection[] | undefined;
                exportedAtNs?: string | number | Long | undefined;
                startNs?: string | number | Long | undefined;
                endNs?: string | number | Long | undefined;
            } & {
                elements?: (import("../../device_sync/device_sync.pb").BackupElementSelection[] & import("../../device_sync/device_sync.pb").BackupElementSelection[] & { [K_7 in Exclude<keyof I["deviceSyncReply"]["metadata"]["elements"], keyof import("../../device_sync/device_sync.pb").BackupElementSelection[]>]: never; }) | undefined;
                exportedAtNs?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_8 in Exclude<keyof I["deviceSyncReply"]["metadata"]["exportedAtNs"], keyof Long>]: never; }) | undefined;
                startNs?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_9 in Exclude<keyof I["deviceSyncReply"]["metadata"]["startNs"], keyof Long>]: never; }) | undefined;
                endNs?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_10 in Exclude<keyof I["deviceSyncReply"]["metadata"]["endNs"], keyof Long>]: never; }) | undefined;
            } & { [K_11 in Exclude<keyof I["deviceSyncReply"]["metadata"], keyof import("../../device_sync/device_sync.pb").BackupMetadataSave>]: never; }) | undefined;
        } & { [K_12 in Exclude<keyof I["deviceSyncReply"], keyof DeviceSyncReply>]: never; }) | undefined;
        userPreferenceUpdate?: ({
            contents?: Uint8Array[] | undefined;
        } & {
            contents?: (Uint8Array[] & Uint8Array[] & { [K_13 in Exclude<keyof I["userPreferenceUpdate"]["contents"], keyof Uint8Array[]>]: never; }) | undefined;
        } & { [K_14 in Exclude<keyof I["userPreferenceUpdate"], "contents">]: never; }) | undefined;
    } & { [K_15 in Exclude<keyof I, keyof PlaintextEnvelope_V2>]: never; }>(object: I): PlaintextEnvelope_V2;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};

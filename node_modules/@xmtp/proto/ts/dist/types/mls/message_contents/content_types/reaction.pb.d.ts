import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.mls.message_contents.content_types";
/**
 * reaction.proto
 * This file defines the ReactionV2 message type and is associated with the following ContentTypeId:
 *
 * ContentTypeId {
 *     authority_id: "xmtp.org",
 *     type_id:      "reaction",
 *     version_major: 2,
 *     version_minor: 0,
 * }
 */
/** Action enum to represent reaction states */
export declare enum ReactionAction {
    REACTION_ACTION_UNSPECIFIED = 0,
    REACTION_ACTION_ADDED = 1,
    REACTION_ACTION_REMOVED = 2,
    UNRECOGNIZED = -1
}
export declare function reactionActionFromJSON(object: any): ReactionAction;
export declare function reactionActionToJSON(object: ReactionAction): string;
/** Schema enum to represent reaction content types */
export declare enum ReactionSchema {
    REACTION_SCHEMA_UNSPECIFIED = 0,
    REACTION_SCHEMA_UNICODE = 1,
    REACTION_SCHEMA_SHORTCODE = 2,
    REACTION_SCHEMA_CUSTOM = 3,
    UNRECOGNIZED = -1
}
export declare function reactionSchemaFromJSON(object: any): ReactionSchema;
export declare function reactionSchemaToJSON(object: ReactionSchema): string;
/** Reaction message type */
export interface ReactionV2 {
    /** The message ID being reacted to */
    reference: string;
    /**
     * The inbox ID of the user who sent the message being reacted to
     * Optional for group messages
     */
    referenceInboxId: string;
    /** The action of the reaction (added or removed) */
    action: ReactionAction;
    /** The content of the reaction */
    content: string;
    /** The schema of the reaction content */
    schema: ReactionSchema;
}
export declare const ReactionV2: {
    encode(message: ReactionV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ReactionV2;
    fromJSON(object: any): ReactionV2;
    toJSON(message: ReactionV2): unknown;
    fromPartial<I extends {
        reference?: string | undefined;
        referenceInboxId?: string | undefined;
        action?: ReactionAction | undefined;
        content?: string | undefined;
        schema?: ReactionSchema | undefined;
    } & {
        reference?: string | undefined;
        referenceInboxId?: string | undefined;
        action?: ReactionAction | undefined;
        content?: string | undefined;
        schema?: ReactionSchema | undefined;
    } & { [K in Exclude<keyof I, keyof ReactionV2>]: never; }>(object: I): ReactionV2;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};

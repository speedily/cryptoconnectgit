import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.mls.message_contents.content_types";
/**
 * multi_remote_attachment.proto
 * This file defines the MultiRemoteAttachment message type and is associated with the following ContentTypeId:
 *
 * ContentTypeId {
 *     authority_id: "xmtp.org",
 *     type_id:      "multiRemoteStaticContent",
 *     version_major: 1,
 *     version_minor: 0,
 * }
 */
/** MultiRemoteAttachment message type */
export interface MultiRemoteAttachment {
    /** Array of attachment information */
    attachments: RemoteAttachmentInfo[];
}
export interface RemoteAttachmentInfo {
    /** The SHA256 hash of the remote content */
    contentDigest: string;
    /** A 32 byte array for decrypting the remote content payload */
    secret: Uint8Array;
    /** A byte array for the nonce used to encrypt the remote content payload */
    nonce: Uint8Array;
    /** A byte array for the salt used to encrypt the remote content payload */
    salt: Uint8Array;
    /** The scheme of the URL. Must be "https://" */
    scheme: string;
    /** The URL of the remote content */
    url: string;
    /** The size of the encrypted content in bytes (max size of 4GB) */
    contentLength?: number | undefined;
    /** The filename of the remote content */
    filename?: string | undefined;
}
export declare const MultiRemoteAttachment: {
    encode(message: MultiRemoteAttachment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultiRemoteAttachment;
    fromJSON(object: any): MultiRemoteAttachment;
    toJSON(message: MultiRemoteAttachment): unknown;
    fromPartial<I extends {
        attachments?: {
            contentDigest?: string | undefined;
            secret?: Uint8Array | undefined;
            nonce?: Uint8Array | undefined;
            salt?: Uint8Array | undefined;
            scheme?: string | undefined;
            url?: string | undefined;
            contentLength?: number | undefined;
            filename?: string | undefined;
        }[] | undefined;
    } & {
        attachments?: ({
            contentDigest?: string | undefined;
            secret?: Uint8Array | undefined;
            nonce?: Uint8Array | undefined;
            salt?: Uint8Array | undefined;
            scheme?: string | undefined;
            url?: string | undefined;
            contentLength?: number | undefined;
            filename?: string | undefined;
        }[] & ({
            contentDigest?: string | undefined;
            secret?: Uint8Array | undefined;
            nonce?: Uint8Array | undefined;
            salt?: Uint8Array | undefined;
            scheme?: string | undefined;
            url?: string | undefined;
            contentLength?: number | undefined;
            filename?: string | undefined;
        } & {
            contentDigest?: string | undefined;
            secret?: Uint8Array | undefined;
            nonce?: Uint8Array | undefined;
            salt?: Uint8Array | undefined;
            scheme?: string | undefined;
            url?: string | undefined;
            contentLength?: number | undefined;
            filename?: string | undefined;
        } & { [K in Exclude<keyof I["attachments"][number], keyof RemoteAttachmentInfo>]: never; })[] & { [K_1 in Exclude<keyof I["attachments"], keyof {
            contentDigest?: string | undefined;
            secret?: Uint8Array | undefined;
            nonce?: Uint8Array | undefined;
            salt?: Uint8Array | undefined;
            scheme?: string | undefined;
            url?: string | undefined;
            contentLength?: number | undefined;
            filename?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "attachments">]: never; }>(object: I): MultiRemoteAttachment;
};
export declare const RemoteAttachmentInfo: {
    encode(message: RemoteAttachmentInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RemoteAttachmentInfo;
    fromJSON(object: any): RemoteAttachmentInfo;
    toJSON(message: RemoteAttachmentInfo): unknown;
    fromPartial<I extends {
        contentDigest?: string | undefined;
        secret?: Uint8Array | undefined;
        nonce?: Uint8Array | undefined;
        salt?: Uint8Array | undefined;
        scheme?: string | undefined;
        url?: string | undefined;
        contentLength?: number | undefined;
        filename?: string | undefined;
    } & {
        contentDigest?: string | undefined;
        secret?: Uint8Array | undefined;
        nonce?: Uint8Array | undefined;
        salt?: Uint8Array | undefined;
        scheme?: string | undefined;
        url?: string | undefined;
        contentLength?: number | undefined;
        filename?: string | undefined;
    } & { [K in Exclude<keyof I, keyof RemoteAttachmentInfo>]: never; }>(object: I): RemoteAttachmentInfo;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};

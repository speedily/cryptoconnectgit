"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlloraChainClient = void 0;
const stargate_1 = require("@cosmjs/stargate");
const stargate_2 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const math_1 = require("@cosmjs/math");
// Import all generated query clients
const query_1 = require("./types/generated/emissions/v7/query");
const query_2 = require("./types/generated/cosmos/bank/v1beta1/query");
const query_3 = require("./types/generated/cosmos/auth/v1beta1/query");
const query_4 = require("./types/generated/cosmos/authz/v1beta1/query");
const query_5 = require("./types/generated/cosmos/circuit/v1/query");
const query_6 = require("./types/generated/cosmos/consensus/v1/query");
const query_7 = require("./types/generated/cosmos/distribution/v1beta1/query");
const query_8 = require("./types/generated/cosmos/evidence/v1beta1/query");
const query_9 = require("./types/generated/cosmos/feegrant/v1beta1/query");
const query_10 = require("./types/generated/cosmos/gov/v1/query");
const query_11 = require("./types/generated/cosmos/mint/v1beta1/query");
const query_12 = require("./types/generated/cosmos/params/v1beta1/query");
const query_13 = require("./types/generated/cosmos/slashing/v1beta1/query");
const query_14 = require("./types/generated/cosmos/staking/v1beta1/query");
const query_15 = require("./types/generated/cosmos/upgrade/v1beta1/query");
// Import all generated tx clients
const tx_1 = require("./types/generated/emissions/v7/tx");
const tx_2 = require("./types/generated/cosmos/bank/v1beta1/tx");
const tx_3 = require("./types/generated/cosmos/auth/v1beta1/tx");
const tx_4 = require("./types/generated/cosmos/authz/v1beta1/tx");
const tx_5 = require("./types/generated/cosmos/circuit/v1/tx");
const tx_6 = require("./types/generated/cosmos/consensus/v1/tx");
const tx_7 = require("./types/generated/cosmos/distribution/v1beta1/tx");
const tx_8 = require("./types/generated/cosmos/evidence/v1beta1/tx");
const tx_9 = require("./types/generated/cosmos/feegrant/v1beta1/tx");
const tx_10 = require("./types/generated/cosmos/gov/v1/tx");
const tx_11 = require("./types/generated/cosmos/mint/v1beta1/tx");
const tx_12 = require("./types/generated/cosmos/slashing/v1beta1/tx");
const tx_13 = require("./types/generated/cosmos/staking/v1beta1/tx");
const tx_14 = require("./types/generated/cosmos/upgrade/v1beta1/tx");
const tx_15 = require("./types/generated/cosmos/bank/v1beta1/tx");
// class AlloraChainRpcClient implements RpcClient {
//   private rpcUrl: string;
//   private signingClient: SigningStargateClient | null = null;
//   private signer: DirectSecp256k1HdWallet | null = null;
//   constructor(rpcUrl: string, signer: DirectSecp256k1HdWallet) {
//     this.rpcUrl = rpcUrl;
//     this.signer = signer;
//   }
//   async connectWithSigner(signer: DirectSecp256k1HdWallet) {
//     this.signingClient = await SigningStargateClient.connectWithSigner(
//       this.rpcUrl,
//       signer,
//       {
//         gasPrice: {
//           amount: Decimal.fromUserInput("10", 0),
//           denom: "uallo",
//         },
//       }
//     );
//   }
//   async request(service: string, method: string, data: Uint8Array): Promise<Uint8Array> {
//     if (!this.signer) {
//       throw new Error("Client not connected. Call connect() first");
//     }
//     const account = (await this.signer.getAccounts())[0];
//     const MessageType = this.getMessageType(service, method);
//     const decodedMsg = MessageType.decode(data);
//     // Create the transaction message
//     const msg = {
//       typeUrl: this.getTypeUrl(service, method),
//       value: decodedMsg
//     };
//     // Sign and broadcast
//     const txResult = await this.signer.signAndBroadcast(
//       account.address,
//       [msg],
//       "auto"
//     );
//     // Convert response to expected format
//     const jsonString = JSON.stringify(txResult, (_, value) =>
//       typeof value === 'bigint' ? value.toString() : value
//     );
//     const txResp = TxResponse.fromJSON(JSON.parse(jsonString));
//     return TxResponse.encode(txResp).finish();
//   }
//   private getMessageType(service: string, method: string) {
//     // Map service+method to corresponding protobuf message type
//     const messageTypes: Record<string, any> = {
//       "emissions.v7.DelegateStake": DelegateStakeRequest,
//       "bank.v1beta1.Send": MsgSend,
//     };
//     const key = `${service}.${method}`;
//     const MessageType = messageTypes[key];
//     if (!MessageType) {
//       throw new Error(`Unknown message type for ${key}`);
//     }
//     return MessageType;
//   }
//   private getTypeUrl(service: string, method: string) {
//     // Map service+method to corresponding protobuf type URL
//     const typeUrls: Record<string, string> = {
//       "emissions.v7.DelegateStake": "/emissions.v7.MsgDelegateStake",
//       "bank.v1beta1.Send": "/cosmos.bank.v1beta1.MsgSend",
//     };
//     const key = `${service}.${method}`;
//     const typeUrl = typeUrls[key];
//     if (!typeUrl) {
//       throw new Error(`Unknown type URL for ${key}`);
//     }
//     return typeUrl;
//   }
// }
class AlloraChainClient {
    constructor(rpcUrl) {
        this.rpcUrl = rpcUrl;
        this.signingClient = null;
        this.signer = null;
    }
    static create(rpcUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new AlloraChainClient(rpcUrl);
            yield instance.initialize();
            return instance;
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const cometClient = yield tendermint_rpc_1.Tendermint34Client.connect(this.rpcUrl);
            const queryClient = new stargate_2.QueryClient(cometClient);
            const client = (0, stargate_2.createProtobufRpcClient)(queryClient);
            this.query = {
                emissions: new query_1.QueryServiceClientImpl(client),
                bank: new query_2.QueryClientImpl(client),
                auth: new query_3.QueryClientImpl(client),
                authz: new query_4.QueryClientImpl(client),
                circuit: new query_5.QueryClientImpl(client),
                consensus: new query_6.QueryClientImpl(client),
                distribution: new query_7.QueryClientImpl(client),
                evidence: new query_8.QueryClientImpl(client),
                feegrant: new query_9.QueryClientImpl(client),
                gov: new query_10.QueryClientImpl(client),
                mint: new query_11.QueryClientImpl(client),
                params: new query_12.QueryClientImpl(client),
                slashing: new query_13.QueryClientImpl(client),
                staking: new query_14.QueryClientImpl(client),
                upgrade: new query_15.QueryClientImpl(client),
            };
        });
    }
    connectSigner(signer) {
        return __awaiter(this, void 0, void 0, function* () {
            this.signingClient = yield stargate_1.SigningStargateClient.connectWithSigner(this.rpcUrl, signer, {
                gasPrice: {
                    amount: math_1.Decimal.fromUserInput("10", 0),
                    denom: "uallo",
                },
            });
            this.signer = signer;
            const signingRpc = {
                request: (service, method, data) => __awaiter(this, void 0, void 0, function* () {
                    console.log("request", service, method, data);
                    if (!this.signingClient) {
                        throw new Error("Signing client not connected");
                    }
                    if (!this.signer) {
                        throw new Error("Signer not connected");
                    }
                    const account = (yield this.signer.getAccounts())[0];
                    const msgSend = tx_15.MsgSend.decode(data);
                    console.log("msgSend", msgSend);
                    // Create the transaction message
                    const msg = {
                        typeUrl: `/cosmos.bank.v1beta1.MsgSend`,
                        value: msgSend,
                    };
                    console.log(account.address, [msg], "auto");
                    // Sign and broadcast the transaction
                    const txResult = yield this.signingClient.signAndBroadcast(account.address, [msg], "auto");
                    return txResult.msgResponses[0].value;
                }),
            };
            this.tx = {
                emissions: new tx_1.MsgServiceClientImpl(signingRpc, {
                    service: "emissions.v7",
                }),
                bank: new tx_2.MsgClientImpl(signingRpc),
                auth: new tx_3.MsgClientImpl(signingRpc),
                authz: new tx_4.MsgClientImpl(signingRpc),
                circuit: new tx_5.MsgClientImpl(signingRpc),
                consensus: new tx_6.MsgClientImpl(signingRpc),
                distribution: new tx_7.MsgClientImpl(signingRpc),
                evidence: new tx_8.MsgClientImpl(signingRpc),
                feegrant: new tx_9.MsgClientImpl(signingRpc),
                gov: new tx_10.MsgClientImpl(signingRpc),
                mint: new tx_11.MsgClientImpl(signingRpc),
                slashing: new tx_12.MsgClientImpl(signingRpc),
                staking: new tx_13.MsgClientImpl(signingRpc),
                upgrade: new tx_14.MsgClientImpl(signingRpc),
            };
        });
    }
}
exports.AlloraChainClient = AlloraChainClient;

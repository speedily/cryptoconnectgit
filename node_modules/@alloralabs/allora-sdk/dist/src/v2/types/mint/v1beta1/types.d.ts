import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "mint.v1beta1";
/** Params defines the parameters for the x/mint module. */
export interface Params {
    /** type of coin to mint */
    mintDenom: string;
    /** maximum total supply of the coin */
    maxSupply: string;
    /** ecosystem treasury fraction ideally emitted per unit time */
    fEmission: string;
    /** one month exponential moving average smoothing factor, alpha_e in the paper */
    oneMonthSmoothingDegree: string;
    /**
     * percentage of the total supply is reserved and locked in the ecosystem
     * treasury
     */
    ecosystemTreasuryPercentOfTotalSupply: string;
    /**
     * percentage of the total supply that is unlocked and usable in the
     * foundation treasury
     */
    foundationTreasuryPercentOfTotalSupply: string;
    /**
     * percentage of the total supply that is unlocked and usable by partipicants
     * at the genesis
     */
    participantsPercentOfTotalSupply: string;
    /**
     * percentage of the total supply that is locked in the investors bucket at
     * the genesis
     */
    investorsPercentOfTotalSupply: string;
    /**
     * percentage of the total supply that is locked in the team bucket at the
     * genesis
     */
    teamPercentOfTotalSupply: string;
    /** The capped max monthly percentage yield (like %APY) */
    maximumMonthlyPercentageYield: string;
    /**
     * percentage of the total supply that is locked in the preseed investors
     * bucket at the genesis
     */
    investorsPreseedPercentOfTotalSupply: string;
}
export declare const Params: MessageFns<Params>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=types.d.ts.map
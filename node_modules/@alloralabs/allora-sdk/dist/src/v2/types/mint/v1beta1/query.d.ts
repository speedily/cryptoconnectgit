import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./types";
export declare const protobufPackage = "mint.v1beta1";
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
}
/** QueryInflationRequest is the request type for the Query/Inflation RPC method. */
export interface QueryInflationRequest {
}
/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC
 * method.
 */
export interface QueryInflationResponse {
    /** inflation is the current minting inflation value. */
    inflation: Uint8Array;
}
/** query for a big dump of mint module info */
export interface QueryEmissionInfoRequest {
}
/** return information about the emissions rate on query */
export interface QueryEmissionInfoResponse {
    params?: Params | undefined;
    ecosystemBalance: string;
    previousBlockEmission: string;
    ecosystemMintSupplyRemaining: string;
    blocksPerMonth: string;
    blockHeightTargetEILastCalculated: string;
    blockHeightTargetEINextCalculated: string;
    networkStakedTokens: string;
    lockedVestingTokensTotal: string;
    lockedVestingTokensInvestorsPreseed: string;
    lockedVestingTokensInvestorsSeed: string;
    lockedVestingTokensTeam: string;
    ecosystemLocked: string;
    circulatingSupply: string;
    maxSupply: string;
    targetEmissionRatePerUnitStakedToken: string;
    reputersPercent: string;
    validatorsPercent: string;
    maximumMonthlyEmissionPerUnitStakedToken: string;
    targetRewardEmissionPerUnitStakedToken: string;
    emissionPerUnitStakedToken: string;
    emissionPerMonth: string;
    blockEmission: string;
    validatorCut: string;
    alloraRewardsCut: string;
    previousRewardEmissionPerUnitStakedToken: string;
}
export declare const QueryParamsRequest: MessageFns<QueryParamsRequest>;
export declare const QueryParamsResponse: MessageFns<QueryParamsResponse>;
export declare const QueryInflationRequest: MessageFns<QueryInflationRequest>;
export declare const QueryInflationResponse: MessageFns<QueryInflationResponse>;
export declare const QueryEmissionInfoRequest: MessageFns<QueryEmissionInfoRequest>;
export declare const QueryEmissionInfoResponse: MessageFns<QueryEmissionInfoResponse>;
/** Query provides defines the gRPC querier service. */
export interface Query {
    /** Params returns the total set of minting parameters. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** Inflation returns the current minting inflation value. */
    Inflation(request: QueryInflationRequest): Promise<QueryInflationResponse>;
    EmissionInfo(request: QueryEmissionInfoRequest): Promise<QueryEmissionInfoResponse>;
}
export declare const QueryServiceName = "mint.v1beta1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    Inflation(request: QueryInflationRequest): Promise<QueryInflationResponse>;
    EmissionInfo(request: QueryEmissionInfoRequest): Promise<QueryEmissionInfoResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=query.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "cosmos.counter.v1";
/** QueryGetCountRequest defines the request type for querying x/mock count. */
export interface QueryGetCountRequest {
}
/** QueryGetCountResponse defines the response type for querying x/mock count. */
export interface QueryGetCountResponse {
    totalCount: string;
}
export declare const QueryGetCountRequest: MessageFns<QueryGetCountRequest>;
export declare const QueryGetCountResponse: MessageFns<QueryGetCountResponse>;
/** Query defines the gRPC querier service. */
export interface Query {
    /** GetCount queries the parameters of x/Counter module. */
    GetCount(request: QueryGetCountRequest): Promise<QueryGetCountResponse>;
}
export declare const QueryServiceName = "cosmos.counter.v1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetCount(request: QueryGetCountRequest): Promise<QueryGetCountResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=query.d.ts.map
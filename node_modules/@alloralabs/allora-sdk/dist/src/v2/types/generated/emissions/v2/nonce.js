"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/nonce.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReputerRequestNonces = exports.ReputerRequestNonce = exports.Nonces = exports.Nonce = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "emissions.v2";
function createBaseNonce() {
    return { blockHeight: "0" };
}
exports.Nonce = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.Nonce.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNonce();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseNonces() {
    return { nonces: [] };
}
exports.Nonces = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.nonces) {
            exports.Nonce.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNonces();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nonces.push(exports.Nonce.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.nonces) ? object.nonces.map((e) => exports.Nonce.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.nonces) === null || _a === void 0 ? void 0 : _a.length) {
            obj.nonces = message.nonces.map((e) => exports.Nonce.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Nonces.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNonces();
        message.nonces = ((_a = object.nonces) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Nonce.fromPartial(e))) || [];
        return message;
    },
};
function createBaseReputerRequestNonce() {
    return { reputerNonce: undefined };
}
exports.ReputerRequestNonce = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputerNonce !== undefined) {
            exports.Nonce.encode(message.reputerNonce, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReputerRequestNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputerNonce = exports.Nonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { reputerNonce: isSet(object.reputerNonce) ? exports.Nonce.fromJSON(object.reputerNonce) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputerNonce !== undefined) {
            obj.reputerNonce = exports.Nonce.toJSON(message.reputerNonce);
        }
        return obj;
    },
    create(base) {
        return exports.ReputerRequestNonce.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseReputerRequestNonce();
        message.reputerNonce = (object.reputerNonce !== undefined && object.reputerNonce !== null)
            ? exports.Nonce.fromPartial(object.reputerNonce)
            : undefined;
        return message;
    },
};
function createBaseReputerRequestNonces() {
    return { nonces: [] };
}
exports.ReputerRequestNonces = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.nonces) {
            exports.ReputerRequestNonce.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReputerRequestNonces();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nonces.push(exports.ReputerRequestNonce.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nonces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.nonces)
                ? object.nonces.map((e) => exports.ReputerRequestNonce.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.nonces) === null || _a === void 0 ? void 0 : _a.length) {
            obj.nonces = message.nonces.map((e) => exports.ReputerRequestNonce.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ReputerRequestNonces.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseReputerRequestNonces();
        message.nonces = ((_a = object.nonces) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ReputerRequestNonce.fromPartial(e))) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

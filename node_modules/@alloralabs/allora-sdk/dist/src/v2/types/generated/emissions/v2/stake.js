"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/stake.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegatorInfo = exports.DelegateStakeRemovalInfo = exports.StakeRemovalInfo = exports.StakeInfo = exports.DelegateStakePlacement = exports.StakePlacement = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "emissions.v2";
function createBaseStakePlacement() {
    return { blockRemovalStarted: "0", topicId: "0", reputer: "", amount: "" };
}
exports.StakePlacement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockRemovalStarted !== "0") {
            writer.uint32(8).int64(message.blockRemovalStarted);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.amount !== "") {
            writer.uint32(34).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStakePlacement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockRemovalStarted = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockRemovalStarted !== "0") {
            obj.blockRemovalStarted = message.blockRemovalStarted;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.StakePlacement.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStakePlacement();
        message.blockRemovalStarted = (_a = object.blockRemovalStarted) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDelegateStakePlacement() {
    return { blockRemovalStarted: "0", topicId: "0", reputer: "", delegator: "", amount: "" };
}
exports.DelegateStakePlacement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockRemovalStarted !== "0") {
            writer.uint32(8).int64(message.blockRemovalStarted);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.delegator !== "") {
            writer.uint32(34).string(message.delegator);
        }
        if (message.amount !== "") {
            writer.uint32(42).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegateStakePlacement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockRemovalStarted = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockRemovalStarted !== "0") {
            obj.blockRemovalStarted = message.blockRemovalStarted;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.DelegateStakePlacement.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseDelegateStakePlacement();
        message.blockRemovalStarted = (_a = object.blockRemovalStarted) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.delegator = (_d = object.delegator) !== null && _d !== void 0 ? _d : "";
        message.amount = (_e = object.amount) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseStakeInfo() {
    return { topicId: "0", reputer: "", amount: "" };
}
exports.StakeInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStakeInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.StakeInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseStakeInfo();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseStakeRemovalInfo() {
    return { blockRemovalStarted: "0", topicId: "0", reputer: "", amount: "", blockRemovalCompleted: "0" };
}
exports.StakeRemovalInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockRemovalStarted !== "0") {
            writer.uint32(8).int64(message.blockRemovalStarted);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.amount !== "") {
            writer.uint32(34).string(message.amount);
        }
        if (message.blockRemovalCompleted !== "0") {
            writer.uint32(40).int64(message.blockRemovalCompleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStakeRemovalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockRemovalStarted = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.blockRemovalCompleted = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            blockRemovalCompleted: isSet(object.blockRemovalCompleted)
                ? globalThis.String(object.blockRemovalCompleted)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockRemovalStarted !== "0") {
            obj.blockRemovalStarted = message.blockRemovalStarted;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.blockRemovalCompleted !== "0") {
            obj.blockRemovalCompleted = message.blockRemovalCompleted;
        }
        return obj;
    },
    create(base) {
        return exports.StakeRemovalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseStakeRemovalInfo();
        message.blockRemovalStarted = (_a = object.blockRemovalStarted) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : "";
        message.blockRemovalCompleted = (_e = object.blockRemovalCompleted) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseDelegateStakeRemovalInfo() {
    return { blockRemovalStarted: "0", topicId: "0", reputer: "", delegator: "", amount: "", blockRemovalCompleted: "0" };
}
exports.DelegateStakeRemovalInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockRemovalStarted !== "0") {
            writer.uint32(8).int64(message.blockRemovalStarted);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.delegator !== "") {
            writer.uint32(34).string(message.delegator);
        }
        if (message.amount !== "") {
            writer.uint32(42).string(message.amount);
        }
        if (message.blockRemovalCompleted !== "0") {
            writer.uint32(48).int64(message.blockRemovalCompleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegateStakeRemovalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockRemovalStarted = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.blockRemovalCompleted = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockRemovalStarted: isSet(object.blockRemovalStarted) ? globalThis.String(object.blockRemovalStarted) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            blockRemovalCompleted: isSet(object.blockRemovalCompleted)
                ? globalThis.String(object.blockRemovalCompleted)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockRemovalStarted !== "0") {
            obj.blockRemovalStarted = message.blockRemovalStarted;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.blockRemovalCompleted !== "0") {
            obj.blockRemovalCompleted = message.blockRemovalCompleted;
        }
        return obj;
    },
    create(base) {
        return exports.DelegateStakeRemovalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseDelegateStakeRemovalInfo();
        message.blockRemovalStarted = (_a = object.blockRemovalStarted) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        message.delegator = (_d = object.delegator) !== null && _d !== void 0 ? _d : "";
        message.amount = (_e = object.amount) !== null && _e !== void 0 ? _e : "";
        message.blockRemovalCompleted = (_f = object.blockRemovalCompleted) !== null && _f !== void 0 ? _f : "0";
        return message;
    },
};
function createBaseDelegatorInfo() {
    return { amount: "", rewardDebt: "" };
}
exports.DelegatorInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        if (message.rewardDebt !== "") {
            writer.uint32(18).string(message.rewardDebt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegatorInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rewardDebt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            rewardDebt: isSet(object.rewardDebt) ? globalThis.String(object.rewardDebt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.rewardDebt !== "") {
            obj.rewardDebt = message.rewardDebt;
        }
        return obj;
    },
    create(base) {
        return exports.DelegatorInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDelegatorInfo();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        message.rewardDebt = (_b = object.rewardDebt) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

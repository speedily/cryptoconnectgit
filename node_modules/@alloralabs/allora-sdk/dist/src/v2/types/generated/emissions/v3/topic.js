"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v3/topic.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicIdWeightPair = exports.TopicIds = exports.TimestampedActorNonce = exports.TopicList = exports.Topic = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const nonce_1 = require("./nonce");
exports.protobufPackage = "emissions.v3";
function createBaseTopic() {
    return {
        id: "0",
        creator: "",
        metadata: "",
        lossMethod: "",
        epochLastEnded: "0",
        epochLength: "0",
        groundTruthLag: "0",
        pNorm: "",
        alphaRegret: "",
        allowNegative: false,
        epsilon: "",
        initialRegret: "",
        workerSubmissionWindow: "0",
        meritSortitionAlpha: "",
        activeInfererQuantile: "",
        activeForecasterQuantile: "",
        activeReputerQuantile: "",
    };
}
exports.Topic = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.creator !== "") {
            writer.uint32(18).string(message.creator);
        }
        if (message.metadata !== "") {
            writer.uint32(26).string(message.metadata);
        }
        if (message.lossMethod !== "") {
            writer.uint32(42).string(message.lossMethod);
        }
        if (message.epochLastEnded !== "0") {
            writer.uint32(64).int64(message.epochLastEnded);
        }
        if (message.epochLength !== "0") {
            writer.uint32(72).int64(message.epochLength);
        }
        if (message.groundTruthLag !== "0") {
            writer.uint32(80).int64(message.groundTruthLag);
        }
        if (message.pNorm !== "") {
            writer.uint32(98).string(message.pNorm);
        }
        if (message.alphaRegret !== "") {
            writer.uint32(106).string(message.alphaRegret);
        }
        if (message.allowNegative !== false) {
            writer.uint32(112).bool(message.allowNegative);
        }
        if (message.epsilon !== "") {
            writer.uint32(122).string(message.epsilon);
        }
        if (message.initialRegret !== "") {
            writer.uint32(130).string(message.initialRegret);
        }
        if (message.workerSubmissionWindow !== "0") {
            writer.uint32(136).int64(message.workerSubmissionWindow);
        }
        if (message.meritSortitionAlpha !== "") {
            writer.uint32(146).string(message.meritSortitionAlpha);
        }
        if (message.activeInfererQuantile !== "") {
            writer.uint32(154).string(message.activeInfererQuantile);
        }
        if (message.activeForecasterQuantile !== "") {
            writer.uint32(162).string(message.activeForecasterQuantile);
        }
        if (message.activeReputerQuantile !== "") {
            writer.uint32(170).string(message.activeReputerQuantile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lossMethod = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.epochLastEnded = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.epochLength = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.groundTruthLag = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.pNorm = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.alphaRegret = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.allowNegative = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.epsilon = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.initialRegret = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.workerSubmissionWindow = reader.int64().toString();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.meritSortitionAlpha = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.activeInfererQuantile = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.activeForecasterQuantile = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.activeReputerQuantile = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            lossMethod: isSet(object.lossMethod) ? globalThis.String(object.lossMethod) : "",
            epochLastEnded: isSet(object.epochLastEnded) ? globalThis.String(object.epochLastEnded) : "0",
            epochLength: isSet(object.epochLength) ? globalThis.String(object.epochLength) : "0",
            groundTruthLag: isSet(object.groundTruthLag) ? globalThis.String(object.groundTruthLag) : "0",
            pNorm: isSet(object.pNorm) ? globalThis.String(object.pNorm) : "",
            alphaRegret: isSet(object.alphaRegret) ? globalThis.String(object.alphaRegret) : "",
            allowNegative: isSet(object.allowNegative) ? globalThis.Boolean(object.allowNegative) : false,
            epsilon: isSet(object.epsilon) ? globalThis.String(object.epsilon) : "",
            initialRegret: isSet(object.initialRegret) ? globalThis.String(object.initialRegret) : "",
            workerSubmissionWindow: isSet(object.workerSubmissionWindow)
                ? globalThis.String(object.workerSubmissionWindow)
                : "0",
            meritSortitionAlpha: isSet(object.meritSortitionAlpha) ? globalThis.String(object.meritSortitionAlpha) : "",
            activeInfererQuantile: isSet(object.activeInfererQuantile) ? globalThis.String(object.activeInfererQuantile) : "",
            activeForecasterQuantile: isSet(object.activeForecasterQuantile)
                ? globalThis.String(object.activeForecasterQuantile)
                : "",
            activeReputerQuantile: isSet(object.activeReputerQuantile) ? globalThis.String(object.activeReputerQuantile) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.lossMethod !== "") {
            obj.lossMethod = message.lossMethod;
        }
        if (message.epochLastEnded !== "0") {
            obj.epochLastEnded = message.epochLastEnded;
        }
        if (message.epochLength !== "0") {
            obj.epochLength = message.epochLength;
        }
        if (message.groundTruthLag !== "0") {
            obj.groundTruthLag = message.groundTruthLag;
        }
        if (message.pNorm !== "") {
            obj.pNorm = message.pNorm;
        }
        if (message.alphaRegret !== "") {
            obj.alphaRegret = message.alphaRegret;
        }
        if (message.allowNegative !== false) {
            obj.allowNegative = message.allowNegative;
        }
        if (message.epsilon !== "") {
            obj.epsilon = message.epsilon;
        }
        if (message.initialRegret !== "") {
            obj.initialRegret = message.initialRegret;
        }
        if (message.workerSubmissionWindow !== "0") {
            obj.workerSubmissionWindow = message.workerSubmissionWindow;
        }
        if (message.meritSortitionAlpha !== "") {
            obj.meritSortitionAlpha = message.meritSortitionAlpha;
        }
        if (message.activeInfererQuantile !== "") {
            obj.activeInfererQuantile = message.activeInfererQuantile;
        }
        if (message.activeForecasterQuantile !== "") {
            obj.activeForecasterQuantile = message.activeForecasterQuantile;
        }
        if (message.activeReputerQuantile !== "") {
            obj.activeReputerQuantile = message.activeReputerQuantile;
        }
        return obj;
    },
    create(base) {
        return exports.Topic.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        const message = createBaseTopic();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "0";
        message.creator = (_b = object.creator) !== null && _b !== void 0 ? _b : "";
        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : "";
        message.lossMethod = (_d = object.lossMethod) !== null && _d !== void 0 ? _d : "";
        message.epochLastEnded = (_e = object.epochLastEnded) !== null && _e !== void 0 ? _e : "0";
        message.epochLength = (_f = object.epochLength) !== null && _f !== void 0 ? _f : "0";
        message.groundTruthLag = (_g = object.groundTruthLag) !== null && _g !== void 0 ? _g : "0";
        message.pNorm = (_h = object.pNorm) !== null && _h !== void 0 ? _h : "";
        message.alphaRegret = (_j = object.alphaRegret) !== null && _j !== void 0 ? _j : "";
        message.allowNegative = (_k = object.allowNegative) !== null && _k !== void 0 ? _k : false;
        message.epsilon = (_l = object.epsilon) !== null && _l !== void 0 ? _l : "";
        message.initialRegret = (_m = object.initialRegret) !== null && _m !== void 0 ? _m : "";
        message.workerSubmissionWindow = (_o = object.workerSubmissionWindow) !== null && _o !== void 0 ? _o : "0";
        message.meritSortitionAlpha = (_p = object.meritSortitionAlpha) !== null && _p !== void 0 ? _p : "";
        message.activeInfererQuantile = (_q = object.activeInfererQuantile) !== null && _q !== void 0 ? _q : "";
        message.activeForecasterQuantile = (_r = object.activeForecasterQuantile) !== null && _r !== void 0 ? _r : "";
        message.activeReputerQuantile = (_s = object.activeReputerQuantile) !== null && _s !== void 0 ? _s : "";
        return message;
    },
};
function createBaseTopicList() {
    return { topics: [] };
}
exports.TopicList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.topics) {
            exports.Topic.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topics.push(exports.Topic.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => exports.Topic.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => exports.Topic.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TopicList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicList();
        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Topic.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTimestampedActorNonce() {
    return { blockHeight: "0", nonce: undefined };
}
exports.TimestampedActorNonce = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.nonce !== undefined) {
            nonce_1.Nonce.encode(message.nonce, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestampedActorNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nonce = nonce_1.Nonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            nonce: isSet(object.nonce) ? nonce_1.Nonce.fromJSON(object.nonce) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.nonce !== undefined) {
            obj.nonce = nonce_1.Nonce.toJSON(message.nonce);
        }
        return obj;
    },
    create(base) {
        return exports.TimestampedActorNonce.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTimestampedActorNonce();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.nonce = (object.nonce !== undefined && object.nonce !== null) ? nonce_1.Nonce.fromPartial(object.nonce) : undefined;
        return message;
    },
};
function createBaseTopicIds() {
    return { topicIds: [] };
}
exports.TopicIds = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.topicIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.topicIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.topicIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicIds) ? object.topicIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.topicIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topicIds = message.topicIds;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIds.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIds();
        message.topicIds = ((_a = object.topicIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseTopicIdWeightPair() {
    return { topicId: "0", weight: "" };
}
exports.TopicIdWeightPair = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdWeightPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdWeightPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdWeightPair();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.weight = (_b = object.weight) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Nonce } from "../v3/nonce";
import { ValueBundle } from "../v3/reputer";
export declare const protobufPackage = "emissions.v7";
export declare enum ActorType {
    ACTOR_TYPE_INFERER_UNSPECIFIED = 0,
    ACTOR_TYPE_FORECASTER = 1,
    ACTOR_TYPE_REPUTER = 2,
    UNRECOGNIZED = -1
}
export declare function actorTypeFromJSON(object: any): ActorType;
export declare function actorTypeToJSON(object: ActorType): string;
export interface EventScoresSet {
    actorType: ActorType;
    topicId: string;
    blockHeight: string;
    addresses: string[];
    scores: string[];
}
export interface EventRewardsSettled {
    actorType: ActorType;
    topicId: string;
    blockHeight: string;
    addresses: string[];
    rewards: string[];
}
export interface EventNetworkLossSet {
    topicId: string;
    blockHeight: string;
    valueBundle?: ValueBundle | undefined;
}
export interface EventForecastTaskScoreSet {
    topicId: string;
    score: string;
}
export interface EventWorkerLastCommitSet {
    topicId: string;
    blockHeight: string;
    nonce?: Nonce | undefined;
}
export interface EventReputerLastCommitSet {
    topicId: string;
    blockHeight: string;
    nonce?: Nonce | undefined;
}
export interface EventTopicRewardsSet {
    topicIds: string[];
    rewards: string[];
}
export interface EventEMAScoresSet {
    actorType: ActorType;
    topicId: string;
    nonce: string;
    addresses: string[];
    scores: string[];
    isActive: boolean[];
}
export interface EventListeningCoefficientsSet {
    actorType: ActorType;
    topicId: string;
    blockHeight: string;
    addresses: string[];
    coefficients: string[];
}
export interface EventInfererNetworkRegretSet {
    topicId: string;
    blockHeight: string;
    addresses: string[];
    regrets: string[];
}
export interface EventForecasterNetworkRegretSet {
    topicId: string;
    blockHeight: string;
    addresses: string[];
    regrets: string[];
}
export interface EventNaiveInfererNetworkRegretSet {
    topicId: string;
    blockHeight: string;
    addresses: string[];
    regrets: string[];
}
export interface EventTopicInitialRegretSet {
    topicId: string;
    blockHeight: string;
    regret: string;
}
export interface EventTopicInitialEmaScoreSet {
    actorType: ActorType;
    topicId: string;
    blockHeight: string;
    score: string;
}
export declare const EventScoresSet: MessageFns<EventScoresSet>;
export declare const EventRewardsSettled: MessageFns<EventRewardsSettled>;
export declare const EventNetworkLossSet: MessageFns<EventNetworkLossSet>;
export declare const EventForecastTaskScoreSet: MessageFns<EventForecastTaskScoreSet>;
export declare const EventWorkerLastCommitSet: MessageFns<EventWorkerLastCommitSet>;
export declare const EventReputerLastCommitSet: MessageFns<EventReputerLastCommitSet>;
export declare const EventTopicRewardsSet: MessageFns<EventTopicRewardsSet>;
export declare const EventEMAScoresSet: MessageFns<EventEMAScoresSet>;
export declare const EventListeningCoefficientsSet: MessageFns<EventListeningCoefficientsSet>;
export declare const EventInfererNetworkRegretSet: MessageFns<EventInfererNetworkRegretSet>;
export declare const EventForecasterNetworkRegretSet: MessageFns<EventForecasterNetworkRegretSet>;
export declare const EventNaiveInfererNetworkRegretSet: MessageFns<EventNaiveInfererNetworkRegretSet>;
export declare const EventTopicInitialRegretSet: MessageFns<EventTopicInitialRegretSet>;
export declare const EventTopicInitialEmaScoreSet: MessageFns<EventTopicInitialEmaScoreSet>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=events.d.ts.map
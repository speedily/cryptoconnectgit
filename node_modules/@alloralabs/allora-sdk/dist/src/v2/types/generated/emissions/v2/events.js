"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventNetworkLossSet = exports.EventRewardsSettled = exports.EventScoresSet = exports.ActorType = exports.protobufPackage = void 0;
exports.actorTypeFromJSON = actorTypeFromJSON;
exports.actorTypeToJSON = actorTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const reputer_1 = require("./reputer");
exports.protobufPackage = "emissions.v2";
var ActorType;
(function (ActorType) {
    ActorType[ActorType["INFERER"] = 0] = "INFERER";
    ActorType[ActorType["FORECASTER"] = 1] = "FORECASTER";
    ActorType[ActorType["REPUTER"] = 2] = "REPUTER";
    ActorType[ActorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ActorType || (exports.ActorType = ActorType = {}));
function actorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "INFERER":
            return ActorType.INFERER;
        case 1:
        case "FORECASTER":
            return ActorType.FORECASTER;
        case 2:
        case "REPUTER":
            return ActorType.REPUTER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ActorType.UNRECOGNIZED;
    }
}
function actorTypeToJSON(object) {
    switch (object) {
        case ActorType.INFERER:
            return "INFERER";
        case ActorType.FORECASTER:
            return "FORECASTER";
        case ActorType.REPUTER:
            return "REPUTER";
        case ActorType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseEventScoresSet() {
    return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], scores: [] };
}
exports.EventScoresSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.scores) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventScoresSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scores.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.scores) === null || _b === void 0 ? void 0 : _b.length) {
            obj.scores = message.scores;
        }
        return obj;
    },
    create(base) {
        return exports.EventScoresSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventScoresSet();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        message.addresses = ((_d = object.addresses) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.scores = ((_e = object.scores) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventRewardsSettled() {
    return { actorType: 0, topicId: "0", blockHeight: "0", addresses: [], rewards: [] };
}
exports.EventRewardsSettled = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorType !== 0) {
            writer.uint32(8).int32(message.actorType);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(24).int64(message.blockHeight);
        }
        for (const v of message.addresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.rewards) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRewardsSettled();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.rewards.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorType: isSet(object.actorType) ? actorTypeFromJSON(object.actorType) : 0,
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            rewards: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.actorType !== 0) {
            obj.actorType = actorTypeToJSON(message.actorType);
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.rewards) === null || _b === void 0 ? void 0 : _b.length) {
            obj.rewards = message.rewards;
        }
        return obj;
    },
    create(base) {
        return exports.EventRewardsSettled.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventRewardsSettled();
        message.actorType = (_a = object.actorType) !== null && _a !== void 0 ? _a : 0;
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.blockHeight = (_c = object.blockHeight) !== null && _c !== void 0 ? _c : "0";
        message.addresses = ((_d = object.addresses) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.rewards = ((_e = object.rewards) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventNetworkLossSet() {
    return { topicId: "0", blockHeight: "0", valueBundle: undefined };
}
exports.EventNetworkLossSet = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        if (message.valueBundle !== undefined) {
            reputer_1.ValueBundle.encode(message.valueBundle, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventNetworkLossSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.valueBundle = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            valueBundle: isSet(object.valueBundle) ? reputer_1.ValueBundle.fromJSON(object.valueBundle) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.valueBundle !== undefined) {
            obj.valueBundle = reputer_1.ValueBundle.toJSON(message.valueBundle);
        }
        return obj;
    },
    create(base) {
        return exports.EventNetworkLossSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventNetworkLossSet();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        message.valueBundle = (object.valueBundle !== undefined && object.valueBundle !== null)
            ? reputer_1.ValueBundle.fromPartial(object.valueBundle)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

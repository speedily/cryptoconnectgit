import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "emissions.v3";
/**
 * Bad naming convention, only used in StakeRemovals
 * DEPRECATED in ConsensusVersion = 2
 * TO BE DELETED in ConsensusVersion = 3
 */
export interface StakePlacement {
    blockRemovalStarted: string;
    topicId: string;
    reputer: string;
    amount: string;
}
/**
 * Bad naming convention, only used in StakeRemovals
 * DEPRECATED in ConsensusVersion = 2
 * TO BE DELETED in ConsensusVersion = 3
 */
export interface DelegateStakePlacement {
    blockRemovalStarted: string;
    topicId: string;
    reputer: string;
    delegator: string;
    amount: string;
}
/** Introduced in ConsensusVersion = 2 */
export interface StakeInfo {
    topicId: string;
    reputer: string;
    amount: string;
}
/** Introduced in ConsensusVersion = 2 */
export interface StakeRemovalInfo {
    blockRemovalStarted: string;
    topicId: string;
    reputer: string;
    amount: string;
    blockRemovalCompleted: string;
}
/** Introduced in ConsensusVersion = 2 */
export interface DelegateStakeRemovalInfo {
    blockRemovalStarted: string;
    topicId: string;
    reputer: string;
    delegator: string;
    amount: string;
    blockRemovalCompleted: string;
}
export interface DelegatorInfo {
    amount: string;
    rewardDebt: string;
}
export declare const StakePlacement: MessageFns<StakePlacement>;
export declare const DelegateStakePlacement: MessageFns<DelegateStakePlacement>;
export declare const StakeInfo: MessageFns<StakeInfo>;
export declare const StakeRemovalInfo: MessageFns<StakeRemovalInfo>;
export declare const DelegateStakeRemovalInfo: MessageFns<DelegateStakeRemovalInfo>;
export declare const DelegatorInfo: MessageFns<DelegatorInfo>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=stake.d.ts.map
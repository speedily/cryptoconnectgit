"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/counter/v1/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgIncreaseCountResponse = exports.MsgIncreaseCounter = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "cosmos.counter.v1";
function createBaseMsgIncreaseCounter() {
    return { signer: "", count: "0" };
}
exports.MsgIncreaseCounter = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.signer !== "") {
            writer.uint32(10).string(message.signer);
        }
        if (message.count !== "0") {
            writer.uint32(16).int64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIncreaseCounter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.count = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            count: isSet(object.count) ? globalThis.String(object.count) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.count !== "0") {
            obj.count = message.count;
        }
        return obj;
    },
    create(base) {
        return exports.MsgIncreaseCounter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgIncreaseCounter();
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.count = (_b = object.count) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseMsgIncreaseCountResponse() {
    return { newCount: "0" };
}
exports.MsgIncreaseCountResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.newCount !== "0") {
            writer.uint32(8).int64(message.newCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIncreaseCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.newCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newCount: isSet(object.newCount) ? globalThis.String(object.newCount) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.newCount !== "0") {
            obj.newCount = message.newCount;
        }
        return obj;
    },
    create(base) {
        return exports.MsgIncreaseCountResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgIncreaseCountResponse();
        message.newCount = (_a = object.newCount) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
exports.MsgServiceName = "cosmos.counter.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.IncreaseCount = this.IncreaseCount.bind(this);
    }
    IncreaseCount(request) {
        const data = exports.MsgIncreaseCounter.encode(request).finish();
        const promise = this.rpc.request(this.service, "IncreaseCount", data);
        return promise.then((data) => exports.MsgIncreaseCountResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Nonce } from "./nonce";
export declare const protobufPackage = "emissions.v2";
export interface TimestampedValue {
    /** height at which value calculated or received */
    blockHeight: string;
    value: string;
}
export interface Inference {
    topicId: string;
    blockHeight: string;
    inferer: string;
    value: string;
    extraData: Uint8Array;
    proof: string;
}
export interface Inferences {
    inferences: Inference[];
}
export interface ForecastElement {
    inferer: string;
    value: string;
}
export interface Forecast {
    topicId: string;
    blockHeight: string;
    forecaster: string;
    forecastElements: ForecastElement[];
    extraData: Uint8Array;
}
export interface Forecasts {
    forecasts: Forecast[];
}
export interface InferenceForecastBundle {
    inference?: Inference | undefined;
    forecast?: Forecast | undefined;
}
export interface WorkerDataBundle {
    worker: string;
    nonce?: Nonce | undefined;
    topicId: string;
    inferenceForecastsBundle?: InferenceForecastBundle | undefined;
    inferencesForecastsBundleSignature: Uint8Array;
    pubkey: string;
}
/** This will be in the incoming message, sent by leader */
export interface WorkerDataBundles {
    workerDataBundles: WorkerDataBundle[];
}
export declare const TimestampedValue: MessageFns<TimestampedValue>;
export declare const Inference: MessageFns<Inference>;
export declare const Inferences: MessageFns<Inferences>;
export declare const ForecastElement: MessageFns<ForecastElement>;
export declare const Forecast: MessageFns<Forecast>;
export declare const Forecasts: MessageFns<Forecasts>;
export declare const InferenceForecastBundle: MessageFns<InferenceForecastBundle>;
export declare const WorkerDataBundle: MessageFns<WorkerDataBundle>;
export declare const WorkerDataBundles: MessageFns<WorkerDataBundles>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=worker.d.ts.map
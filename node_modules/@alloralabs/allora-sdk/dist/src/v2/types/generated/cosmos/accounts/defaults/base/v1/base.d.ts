import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "cosmos.accounts.defaults.base.v1";
/** MsgInit is used to initialize a base account. */
export interface MsgInit {
    /** pub_key defines the secp256k1 pubkey for the account. */
    pubKey: Uint8Array;
}
/**
 * MsgInitResponse is the response returned after base account initialization.
 * This is empty.
 */
export interface MsgInitResponse {
}
/** MsgSwapPubKey is used to change the pubkey for the account. */
export interface MsgSwapPubKey {
    /** new_pub_key defines the secp256k1 pubkey to swap the account to. */
    newPubKey: Uint8Array;
}
/**
 * MsgSwapPubKeyResponse is the response for the MsgSwapPubKey message.
 * This is empty.
 */
export interface MsgSwapPubKeyResponse {
}
/** QuerySequence is the request for the account sequence. */
export interface QuerySequence {
}
/** QuerySequenceResponse returns the sequence of the account. */
export interface QuerySequenceResponse {
    /** sequence is the current sequence of the account. */
    sequence: string;
}
export declare const MsgInit: MessageFns<MsgInit>;
export declare const MsgInitResponse: MessageFns<MsgInitResponse>;
export declare const MsgSwapPubKey: MessageFns<MsgSwapPubKey>;
export declare const MsgSwapPubKeyResponse: MessageFns<MsgSwapPubKeyResponse>;
export declare const QuerySequence: MessageFns<QuerySequence>;
export declare const QuerySequenceResponse: MessageFns<QuerySequenceResponse>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=base.d.ts.map
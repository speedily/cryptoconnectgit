"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v3/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockHeightTopicIdWeightPair = exports.BlockHeightTopicIds = exports.TopicIdTimestampedActorNonce = exports.TopicIdActorIdActorIdTimeStampedValue = exports.TopicIdActorIdTimeStampedValue = exports.TopicIdAndReputerRequestNonces = exports.TopicIdAndNonces = exports.TopicIdBlockHeightValueBundles = exports.TopicIdBlockHeightReputerValueBundles = exports.TopicIdBlockHeightForecasts = exports.TopicIdBlockHeightInferences = exports.TopicIdAndDec = exports.LibP2pKeyAndOffchainNode = exports.TopicIdActorIdForecast = exports.TopicIdActorIdInference = exports.DelegatorReputerTopicIdBlockHeight = exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo = exports.ActorIdTopicIdBlockHeight = exports.BlockHeightTopicIdReputerStakeRemovalInfo = exports.TopicIdDelegatorReputerDelegatorInfo = exports.TopicIdActorIdInt = exports.TopicIdAndInt = exports.TopicIdActorIdDec = exports.TopicIdActorIdListeningCoefficient = exports.TopicIdActorIdScore = exports.TopicIdBlockHeightScores = exports.BlockHeightAndTopicIds = exports.TopicIdAndBlockHeight = exports.TopicAndActorId = exports.TopicIdAndTopic = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const node_1 = require("./node");
const nonce_1 = require("./nonce");
const params_1 = require("./params");
const reputer_1 = require("./reputer");
const score_1 = require("./score");
const stake_1 = require("./stake");
const topic_1 = require("./topic");
const types_1 = require("./types");
const worker_1 = require("./worker");
exports.protobufPackage = "emissions.v3";
function createBaseGenesisState() {
    return {
        params: undefined,
        nextTopicId: "0",
        topics: [],
        activeTopics: [],
        rewardableTopics: [],
        topicWorkers: [],
        topicReputers: [],
        topicRewardNonce: [],
        infererScoresByBlock: [],
        forecasterScoresByBlock: [],
        reputerScoresByBlock: [],
        infererScoreEmas: [],
        forecasterScoreEmas: [],
        reputerScoreEmas: [],
        reputerListeningCoefficient: [],
        previousReputerRewardFraction: [],
        previousInferenceRewardFraction: [],
        previousForecastRewardFraction: [],
        previousForecasterScoreRatio: [],
        totalStake: "",
        topicStake: [],
        stakeReputerAuthority: [],
        stakeSumFromDelegator: [],
        delegatedStakes: [],
        stakeFromDelegatorsUponReputer: [],
        delegateRewardPerShare: [],
        stakeRemovalsByBlock: [],
        stakeRemovalsByActor: [],
        delegateStakeRemovalsByBlock: [],
        delegateStakeRemovalsByActor: [],
        inferences: [],
        forecasts: [],
        workers: [],
        reputers: [],
        topicFeeRevenue: [],
        previousTopicWeight: [],
        allInferences: [],
        allForecasts: [],
        allLossBundles: [],
        networkLossBundles: [],
        previousPercentageRewardToStakedReputers: "",
        openWorkerWindows: [],
        unfulfilledWorkerNonces: [],
        unfulfilledReputerNonces: [],
        lastDripBlock: [],
        latestInfererNetworkRegrets: [],
        latestForecasterNetworkRegrets: [],
        latestOneInForecasterNetworkRegrets: [],
        latestNaiveInfererNetworkRegrets: [],
        latestOneOutInfererInfererNetworkRegrets: [],
        latestOneOutInfererForecasterNetworkRegrets: [],
        latestOneOutForecasterInfererNetworkRegrets: [],
        latestOneOutForecasterForecasterNetworkRegrets: [],
        coreTeamAddresses: [],
        topicLastWorkerCommit: [],
        topicLastReputerCommit: [],
        topicToNextPossibleChurningBlock: [],
        blockToActiveTopics: [],
        blockToLowestActiveTopicWeight: [],
        previousTopicQuantileInfererScoreEma: [],
        previousTopicQuantileForecasterScoreEma: [],
        previousTopicQuantileReputerScoreEma: [],
    };
}
exports.GenesisState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        if (message.nextTopicId !== "0") {
            writer.uint32(24).uint64(message.nextTopicId);
        }
        for (const v of message.topics) {
            exports.TopicIdAndTopic.encode(v, writer.uint32(34).fork()).join();
        }
        writer.uint32(42).fork();
        for (const v of message.activeTopics) {
            writer.uint64(v);
        }
        writer.join();
        writer.uint32(50).fork();
        for (const v of message.rewardableTopics) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.topicWorkers) {
            exports.TopicAndActorId.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.topicReputers) {
            exports.TopicAndActorId.encode(v, writer.uint32(66).fork()).join();
        }
        for (const v of message.topicRewardNonce) {
            exports.TopicIdAndBlockHeight.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.infererScoresByBlock) {
            exports.TopicIdBlockHeightScores.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.forecasterScoresByBlock) {
            exports.TopicIdBlockHeightScores.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.reputerScoresByBlock) {
            exports.TopicIdBlockHeightScores.encode(v, writer.uint32(98).fork()).join();
        }
        for (const v of message.infererScoreEmas) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(482).fork()).join();
        }
        for (const v of message.forecasterScoreEmas) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(490).fork()).join();
        }
        for (const v of message.reputerScoreEmas) {
            exports.TopicIdActorIdScore.encode(v, writer.uint32(498).fork()).join();
        }
        for (const v of message.reputerListeningCoefficient) {
            exports.TopicIdActorIdListeningCoefficient.encode(v, writer.uint32(130).fork()).join();
        }
        for (const v of message.previousReputerRewardFraction) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.previousInferenceRewardFraction) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.previousForecastRewardFraction) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(154).fork()).join();
        }
        for (const v of message.previousForecasterScoreRatio) {
            exports.TopicIdAndDec.encode(v, writer.uint32(162).fork()).join();
        }
        if (message.totalStake !== "") {
            writer.uint32(170).string(message.totalStake);
        }
        for (const v of message.topicStake) {
            exports.TopicIdAndInt.encode(v, writer.uint32(178).fork()).join();
        }
        for (const v of message.stakeReputerAuthority) {
            exports.TopicIdActorIdInt.encode(v, writer.uint32(186).fork()).join();
        }
        for (const v of message.stakeSumFromDelegator) {
            exports.TopicIdActorIdInt.encode(v, writer.uint32(194).fork()).join();
        }
        for (const v of message.delegatedStakes) {
            exports.TopicIdDelegatorReputerDelegatorInfo.encode(v, writer.uint32(202).fork()).join();
        }
        for (const v of message.stakeFromDelegatorsUponReputer) {
            exports.TopicIdActorIdInt.encode(v, writer.uint32(210).fork()).join();
        }
        for (const v of message.delegateRewardPerShare) {
            exports.TopicIdActorIdDec.encode(v, writer.uint32(218).fork()).join();
        }
        for (const v of message.stakeRemovalsByBlock) {
            exports.BlockHeightTopicIdReputerStakeRemovalInfo.encode(v, writer.uint32(226).fork()).join();
        }
        for (const v of message.stakeRemovalsByActor) {
            exports.ActorIdTopicIdBlockHeight.encode(v, writer.uint32(234).fork()).join();
        }
        for (const v of message.delegateStakeRemovalsByBlock) {
            exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.encode(v, writer.uint32(242).fork()).join();
        }
        for (const v of message.delegateStakeRemovalsByActor) {
            exports.DelegatorReputerTopicIdBlockHeight.encode(v, writer.uint32(250).fork()).join();
        }
        for (const v of message.inferences) {
            exports.TopicIdActorIdInference.encode(v, writer.uint32(258).fork()).join();
        }
        for (const v of message.forecasts) {
            exports.TopicIdActorIdForecast.encode(v, writer.uint32(266).fork()).join();
        }
        for (const v of message.workers) {
            exports.LibP2pKeyAndOffchainNode.encode(v, writer.uint32(274).fork()).join();
        }
        for (const v of message.reputers) {
            exports.LibP2pKeyAndOffchainNode.encode(v, writer.uint32(282).fork()).join();
        }
        for (const v of message.topicFeeRevenue) {
            exports.TopicIdAndInt.encode(v, writer.uint32(290).fork()).join();
        }
        for (const v of message.previousTopicWeight) {
            exports.TopicIdAndDec.encode(v, writer.uint32(298).fork()).join();
        }
        for (const v of message.allInferences) {
            exports.TopicIdBlockHeightInferences.encode(v, writer.uint32(306).fork()).join();
        }
        for (const v of message.allForecasts) {
            exports.TopicIdBlockHeightForecasts.encode(v, writer.uint32(314).fork()).join();
        }
        for (const v of message.allLossBundles) {
            exports.TopicIdBlockHeightReputerValueBundles.encode(v, writer.uint32(322).fork()).join();
        }
        for (const v of message.networkLossBundles) {
            exports.TopicIdBlockHeightValueBundles.encode(v, writer.uint32(330).fork()).join();
        }
        if (message.previousPercentageRewardToStakedReputers !== "") {
            writer.uint32(338).string(message.previousPercentageRewardToStakedReputers);
        }
        for (const v of message.openWorkerWindows) {
            exports.BlockHeightAndTopicIds.encode(v, writer.uint32(442).fork()).join();
        }
        for (const v of message.unfulfilledWorkerNonces) {
            exports.TopicIdAndNonces.encode(v, writer.uint32(346).fork()).join();
        }
        for (const v of message.unfulfilledReputerNonces) {
            exports.TopicIdAndReputerRequestNonces.encode(v, writer.uint32(354).fork()).join();
        }
        for (const v of message.lastDripBlock) {
            exports.TopicIdAndBlockHeight.encode(v, writer.uint32(450).fork()).join();
        }
        for (const v of message.latestInfererNetworkRegrets) {
            exports.TopicIdActorIdTimeStampedValue.encode(v, writer.uint32(362).fork()).join();
        }
        for (const v of message.latestForecasterNetworkRegrets) {
            exports.TopicIdActorIdTimeStampedValue.encode(v, writer.uint32(370).fork()).join();
        }
        for (const v of message.latestOneInForecasterNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(378).fork()).join();
        }
        for (const v of message.latestNaiveInfererNetworkRegrets) {
            exports.TopicIdActorIdTimeStampedValue.encode(v, writer.uint32(386).fork()).join();
        }
        for (const v of message.latestOneOutInfererInfererNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(394).fork()).join();
        }
        for (const v of message.latestOneOutInfererForecasterNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(402).fork()).join();
        }
        for (const v of message.latestOneOutForecasterInfererNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(410).fork()).join();
        }
        for (const v of message.latestOneOutForecasterForecasterNetworkRegrets) {
            exports.TopicIdActorIdActorIdTimeStampedValue.encode(v, writer.uint32(418).fork()).join();
        }
        for (const v of message.coreTeamAddresses) {
            writer.uint32(18).string(v);
        }
        for (const v of message.topicLastWorkerCommit) {
            exports.TopicIdTimestampedActorNonce.encode(v, writer.uint32(426).fork()).join();
        }
        for (const v of message.topicLastReputerCommit) {
            exports.TopicIdTimestampedActorNonce.encode(v, writer.uint32(434).fork()).join();
        }
        for (const v of message.topicToNextPossibleChurningBlock) {
            exports.TopicIdAndBlockHeight.encode(v, writer.uint32(458).fork()).join();
        }
        for (const v of message.blockToActiveTopics) {
            exports.BlockHeightTopicIds.encode(v, writer.uint32(466).fork()).join();
        }
        for (const v of message.blockToLowestActiveTopicWeight) {
            exports.BlockHeightTopicIdWeightPair.encode(v, writer.uint32(474).fork()).join();
        }
        for (const v of message.previousTopicQuantileInfererScoreEma) {
            exports.TopicIdAndDec.encode(v, writer.uint32(506).fork()).join();
        }
        for (const v of message.previousTopicQuantileForecasterScoreEma) {
            exports.TopicIdAndDec.encode(v, writer.uint32(514).fork()).join();
        }
        for (const v of message.previousTopicQuantileReputerScoreEma) {
            exports.TopicIdAndDec.encode(v, writer.uint32(522).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nextTopicId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.topics.push(exports.TopicIdAndTopic.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag === 40) {
                        message.activeTopics.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.activeTopics.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 6: {
                    if (tag === 48) {
                        message.rewardableTopics.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.rewardableTopics.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.topicWorkers.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.topicReputers.push(exports.TopicAndActorId.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.topicRewardNonce.push(exports.TopicIdAndBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.infererScoresByBlock.push(exports.TopicIdBlockHeightScores.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.forecasterScoresByBlock.push(exports.TopicIdBlockHeightScores.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.reputerScoresByBlock.push(exports.TopicIdBlockHeightScores.decode(reader, reader.uint32()));
                    continue;
                }
                case 60: {
                    if (tag !== 482) {
                        break;
                    }
                    message.infererScoreEmas.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 61: {
                    if (tag !== 490) {
                        break;
                    }
                    message.forecasterScoreEmas.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 62: {
                    if (tag !== 498) {
                        break;
                    }
                    message.reputerScoreEmas.push(exports.TopicIdActorIdScore.decode(reader, reader.uint32()));
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.reputerListeningCoefficient.push(exports.TopicIdActorIdListeningCoefficient.decode(reader, reader.uint32()));
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.previousReputerRewardFraction.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.previousInferenceRewardFraction.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.previousForecastRewardFraction.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.previousForecasterScoreRatio.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.totalStake = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.topicStake.push(exports.TopicIdAndInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.stakeReputerAuthority.push(exports.TopicIdActorIdInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.stakeSumFromDelegator.push(exports.TopicIdActorIdInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.delegatedStakes.push(exports.TopicIdDelegatorReputerDelegatorInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.stakeFromDelegatorsUponReputer.push(exports.TopicIdActorIdInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.delegateRewardPerShare.push(exports.TopicIdActorIdDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.stakeRemovalsByBlock.push(exports.BlockHeightTopicIdReputerStakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.stakeRemovalsByActor.push(exports.ActorIdTopicIdBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.delegateStakeRemovalsByBlock.push(exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.delegateStakeRemovalsByActor.push(exports.DelegatorReputerTopicIdBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.inferences.push(exports.TopicIdActorIdInference.decode(reader, reader.uint32()));
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.forecasts.push(exports.TopicIdActorIdForecast.decode(reader, reader.uint32()));
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.workers.push(exports.LibP2pKeyAndOffchainNode.decode(reader, reader.uint32()));
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.reputers.push(exports.LibP2pKeyAndOffchainNode.decode(reader, reader.uint32()));
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.topicFeeRevenue.push(exports.TopicIdAndInt.decode(reader, reader.uint32()));
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.previousTopicWeight.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.allInferences.push(exports.TopicIdBlockHeightInferences.decode(reader, reader.uint32()));
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.allForecasts.push(exports.TopicIdBlockHeightForecasts.decode(reader, reader.uint32()));
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.allLossBundles.push(exports.TopicIdBlockHeightReputerValueBundles.decode(reader, reader.uint32()));
                    continue;
                }
                case 41: {
                    if (tag !== 330) {
                        break;
                    }
                    message.networkLossBundles.push(exports.TopicIdBlockHeightValueBundles.decode(reader, reader.uint32()));
                    continue;
                }
                case 42: {
                    if (tag !== 338) {
                        break;
                    }
                    message.previousPercentageRewardToStakedReputers = reader.string();
                    continue;
                }
                case 55: {
                    if (tag !== 442) {
                        break;
                    }
                    message.openWorkerWindows.push(exports.BlockHeightAndTopicIds.decode(reader, reader.uint32()));
                    continue;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.unfulfilledWorkerNonces.push(exports.TopicIdAndNonces.decode(reader, reader.uint32()));
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.unfulfilledReputerNonces.push(exports.TopicIdAndReputerRequestNonces.decode(reader, reader.uint32()));
                    continue;
                }
                case 56: {
                    if (tag !== 450) {
                        break;
                    }
                    message.lastDripBlock.push(exports.TopicIdAndBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 45: {
                    if (tag !== 362) {
                        break;
                    }
                    message.latestInfererNetworkRegrets.push(exports.TopicIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 46: {
                    if (tag !== 370) {
                        break;
                    }
                    message.latestForecasterNetworkRegrets.push(exports.TopicIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 47: {
                    if (tag !== 378) {
                        break;
                    }
                    message.latestOneInForecasterNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 48: {
                    if (tag !== 386) {
                        break;
                    }
                    message.latestNaiveInfererNetworkRegrets.push(exports.TopicIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 49: {
                    if (tag !== 394) {
                        break;
                    }
                    message.latestOneOutInfererInfererNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 50: {
                    if (tag !== 402) {
                        break;
                    }
                    message.latestOneOutInfererForecasterNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 51: {
                    if (tag !== 410) {
                        break;
                    }
                    message.latestOneOutForecasterInfererNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 52: {
                    if (tag !== 418) {
                        break;
                    }
                    message.latestOneOutForecasterForecasterNetworkRegrets.push(exports.TopicIdActorIdActorIdTimeStampedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.coreTeamAddresses.push(reader.string());
                    continue;
                }
                case 53: {
                    if (tag !== 426) {
                        break;
                    }
                    message.topicLastWorkerCommit.push(exports.TopicIdTimestampedActorNonce.decode(reader, reader.uint32()));
                    continue;
                }
                case 54: {
                    if (tag !== 434) {
                        break;
                    }
                    message.topicLastReputerCommit.push(exports.TopicIdTimestampedActorNonce.decode(reader, reader.uint32()));
                    continue;
                }
                case 57: {
                    if (tag !== 458) {
                        break;
                    }
                    message.topicToNextPossibleChurningBlock.push(exports.TopicIdAndBlockHeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 58: {
                    if (tag !== 466) {
                        break;
                    }
                    message.blockToActiveTopics.push(exports.BlockHeightTopicIds.decode(reader, reader.uint32()));
                    continue;
                }
                case 59: {
                    if (tag !== 474) {
                        break;
                    }
                    message.blockToLowestActiveTopicWeight.push(exports.BlockHeightTopicIdWeightPair.decode(reader, reader.uint32()));
                    continue;
                }
                case 63: {
                    if (tag !== 506) {
                        break;
                    }
                    message.previousTopicQuantileInfererScoreEma.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 64: {
                    if (tag !== 514) {
                        break;
                    }
                    message.previousTopicQuantileForecasterScoreEma.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
                case 65: {
                    if (tag !== 522) {
                        break;
                    }
                    message.previousTopicQuantileReputerScoreEma.push(exports.TopicIdAndDec.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            nextTopicId: isSet(object.nextTopicId) ? globalThis.String(object.nextTopicId) : "0",
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics)
                ? object.topics.map((e) => exports.TopicIdAndTopic.fromJSON(e))
                : [],
            activeTopics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.activeTopics)
                ? object.activeTopics.map((e) => globalThis.String(e))
                : [],
            rewardableTopics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewardableTopics)
                ? object.rewardableTopics.map((e) => globalThis.String(e))
                : [],
            topicWorkers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicWorkers)
                ? object.topicWorkers.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            topicReputers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicReputers)
                ? object.topicReputers.map((e) => exports.TopicAndActorId.fromJSON(e))
                : [],
            topicRewardNonce: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicRewardNonce)
                ? object.topicRewardNonce.map((e) => exports.TopicIdAndBlockHeight.fromJSON(e))
                : [],
            infererScoresByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererScoresByBlock)
                ? object.infererScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.fromJSON(e))
                : [],
            forecasterScoresByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterScoresByBlock)
                ? object.forecasterScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.fromJSON(e))
                : [],
            reputerScoresByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerScoresByBlock)
                ? object.reputerScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.fromJSON(e))
                : [],
            infererScoreEmas: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererScoreEmas)
                ? object.infererScoreEmas.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            forecasterScoreEmas: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterScoreEmas)
                ? object.forecasterScoreEmas.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            reputerScoreEmas: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerScoreEmas)
                ? object.reputerScoreEmas.map((e) => exports.TopicIdActorIdScore.fromJSON(e))
                : [],
            reputerListeningCoefficient: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerListeningCoefficient)
                ? object.reputerListeningCoefficient.map((e) => exports.TopicIdActorIdListeningCoefficient.fromJSON(e))
                : [],
            previousReputerRewardFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousReputerRewardFraction)
                ? object.previousReputerRewardFraction.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            previousInferenceRewardFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousInferenceRewardFraction)
                ? object.previousInferenceRewardFraction.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            previousForecastRewardFraction: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousForecastRewardFraction)
                ? object.previousForecastRewardFraction.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            previousForecasterScoreRatio: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousForecasterScoreRatio)
                ? object.previousForecasterScoreRatio.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            totalStake: isSet(object.totalStake) ? globalThis.String(object.totalStake) : "",
            topicStake: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicStake)
                ? object.topicStake.map((e) => exports.TopicIdAndInt.fromJSON(e))
                : [],
            stakeReputerAuthority: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeReputerAuthority)
                ? object.stakeReputerAuthority.map((e) => exports.TopicIdActorIdInt.fromJSON(e))
                : [],
            stakeSumFromDelegator: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeSumFromDelegator)
                ? object.stakeSumFromDelegator.map((e) => exports.TopicIdActorIdInt.fromJSON(e))
                : [],
            delegatedStakes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegatedStakes)
                ? object.delegatedStakes.map((e) => exports.TopicIdDelegatorReputerDelegatorInfo.fromJSON(e))
                : [],
            stakeFromDelegatorsUponReputer: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeFromDelegatorsUponReputer)
                ? object.stakeFromDelegatorsUponReputer.map((e) => exports.TopicIdActorIdInt.fromJSON(e))
                : [],
            delegateRewardPerShare: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegateRewardPerShare)
                ? object.delegateRewardPerShare.map((e) => exports.TopicIdActorIdDec.fromJSON(e))
                : [],
            stakeRemovalsByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeRemovalsByBlock)
                ? object.stakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdReputerStakeRemovalInfo.fromJSON(e))
                : [],
            stakeRemovalsByActor: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakeRemovalsByActor)
                ? object.stakeRemovalsByActor.map((e) => exports.ActorIdTopicIdBlockHeight.fromJSON(e))
                : [],
            delegateStakeRemovalsByBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegateStakeRemovalsByBlock)
                ? object.delegateStakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.fromJSON(e))
                : [],
            delegateStakeRemovalsByActor: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.delegateStakeRemovalsByActor)
                ? object.delegateStakeRemovalsByActor.map((e) => exports.DelegatorReputerTopicIdBlockHeight.fromJSON(e))
                : [],
            inferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inferences)
                ? object.inferences.map((e) => exports.TopicIdActorIdInference.fromJSON(e))
                : [],
            forecasts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasts)
                ? object.forecasts.map((e) => exports.TopicIdActorIdForecast.fromJSON(e))
                : [],
            workers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.workers)
                ? object.workers.map((e) => exports.LibP2pKeyAndOffchainNode.fromJSON(e))
                : [],
            reputers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputers)
                ? object.reputers.map((e) => exports.LibP2pKeyAndOffchainNode.fromJSON(e))
                : [],
            topicFeeRevenue: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicFeeRevenue)
                ? object.topicFeeRevenue.map((e) => exports.TopicIdAndInt.fromJSON(e))
                : [],
            previousTopicWeight: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicWeight)
                ? object.previousTopicWeight.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            allInferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allInferences)
                ? object.allInferences.map((e) => exports.TopicIdBlockHeightInferences.fromJSON(e))
                : [],
            allForecasts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allForecasts)
                ? object.allForecasts.map((e) => exports.TopicIdBlockHeightForecasts.fromJSON(e))
                : [],
            allLossBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allLossBundles)
                ? object.allLossBundles.map((e) => exports.TopicIdBlockHeightReputerValueBundles.fromJSON(e))
                : [],
            networkLossBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.networkLossBundles)
                ? object.networkLossBundles.map((e) => exports.TopicIdBlockHeightValueBundles.fromJSON(e))
                : [],
            previousPercentageRewardToStakedReputers: isSet(object.previousPercentageRewardToStakedReputers)
                ? globalThis.String(object.previousPercentageRewardToStakedReputers)
                : "",
            openWorkerWindows: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.openWorkerWindows)
                ? object.openWorkerWindows.map((e) => exports.BlockHeightAndTopicIds.fromJSON(e))
                : [],
            unfulfilledWorkerNonces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.unfulfilledWorkerNonces)
                ? object.unfulfilledWorkerNonces.map((e) => exports.TopicIdAndNonces.fromJSON(e))
                : [],
            unfulfilledReputerNonces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.unfulfilledReputerNonces)
                ? object.unfulfilledReputerNonces.map((e) => exports.TopicIdAndReputerRequestNonces.fromJSON(e))
                : [],
            lastDripBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lastDripBlock)
                ? object.lastDripBlock.map((e) => exports.TopicIdAndBlockHeight.fromJSON(e))
                : [],
            latestInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestInfererNetworkRegrets)
                ? object.latestInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestForecasterNetworkRegrets)
                ? object.latestForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneInForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneInForecasterNetworkRegrets)
                ? object.latestOneInForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestNaiveInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestNaiveInfererNetworkRegrets)
                ? object.latestNaiveInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutInfererInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutInfererInfererNetworkRegrets)
                ? object.latestOneOutInfererInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutInfererForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutInfererForecasterNetworkRegrets)
                ? object.latestOneOutInfererForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutForecasterInfererNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutForecasterInfererNetworkRegrets)
                ? object.latestOneOutForecasterInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            latestOneOutForecasterForecasterNetworkRegrets: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.latestOneOutForecasterForecasterNetworkRegrets)
                ? object.latestOneOutForecasterForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromJSON(e))
                : [],
            coreTeamAddresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coreTeamAddresses)
                ? object.coreTeamAddresses.map((e) => globalThis.String(e))
                : [],
            topicLastWorkerCommit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicLastWorkerCommit)
                ? object.topicLastWorkerCommit.map((e) => exports.TopicIdTimestampedActorNonce.fromJSON(e))
                : [],
            topicLastReputerCommit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicLastReputerCommit)
                ? object.topicLastReputerCommit.map((e) => exports.TopicIdTimestampedActorNonce.fromJSON(e))
                : [],
            topicToNextPossibleChurningBlock: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topicToNextPossibleChurningBlock)
                ? object.topicToNextPossibleChurningBlock.map((e) => exports.TopicIdAndBlockHeight.fromJSON(e))
                : [],
            blockToActiveTopics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blockToActiveTopics)
                ? object.blockToActiveTopics.map((e) => exports.BlockHeightTopicIds.fromJSON(e))
                : [],
            blockToLowestActiveTopicWeight: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blockToLowestActiveTopicWeight)
                ? object.blockToLowestActiveTopicWeight.map((e) => exports.BlockHeightTopicIdWeightPair.fromJSON(e))
                : [],
            previousTopicQuantileInfererScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicQuantileInfererScoreEma)
                ? object.previousTopicQuantileInfererScoreEma.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            previousTopicQuantileForecasterScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicQuantileForecasterScoreEma)
                ? object.previousTopicQuantileForecasterScoreEma.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
            previousTopicQuantileReputerScoreEma: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.previousTopicQuantileReputerScoreEma)
                ? object.previousTopicQuantileReputerScoreEma.map((e) => exports.TopicIdAndDec.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33;
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if (message.nextTopicId !== "0") {
            obj.nextTopicId = message.nextTopicId;
        }
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => exports.TopicIdAndTopic.toJSON(e));
        }
        if ((_b = message.activeTopics) === null || _b === void 0 ? void 0 : _b.length) {
            obj.activeTopics = message.activeTopics;
        }
        if ((_c = message.rewardableTopics) === null || _c === void 0 ? void 0 : _c.length) {
            obj.rewardableTopics = message.rewardableTopics;
        }
        if ((_d = message.topicWorkers) === null || _d === void 0 ? void 0 : _d.length) {
            obj.topicWorkers = message.topicWorkers.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_e = message.topicReputers) === null || _e === void 0 ? void 0 : _e.length) {
            obj.topicReputers = message.topicReputers.map((e) => exports.TopicAndActorId.toJSON(e));
        }
        if ((_f = message.topicRewardNonce) === null || _f === void 0 ? void 0 : _f.length) {
            obj.topicRewardNonce = message.topicRewardNonce.map((e) => exports.TopicIdAndBlockHeight.toJSON(e));
        }
        if ((_g = message.infererScoresByBlock) === null || _g === void 0 ? void 0 : _g.length) {
            obj.infererScoresByBlock = message.infererScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.toJSON(e));
        }
        if ((_h = message.forecasterScoresByBlock) === null || _h === void 0 ? void 0 : _h.length) {
            obj.forecasterScoresByBlock = message.forecasterScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.toJSON(e));
        }
        if ((_j = message.reputerScoresByBlock) === null || _j === void 0 ? void 0 : _j.length) {
            obj.reputerScoresByBlock = message.reputerScoresByBlock.map((e) => exports.TopicIdBlockHeightScores.toJSON(e));
        }
        if ((_k = message.infererScoreEmas) === null || _k === void 0 ? void 0 : _k.length) {
            obj.infererScoreEmas = message.infererScoreEmas.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_l = message.forecasterScoreEmas) === null || _l === void 0 ? void 0 : _l.length) {
            obj.forecasterScoreEmas = message.forecasterScoreEmas.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_m = message.reputerScoreEmas) === null || _m === void 0 ? void 0 : _m.length) {
            obj.reputerScoreEmas = message.reputerScoreEmas.map((e) => exports.TopicIdActorIdScore.toJSON(e));
        }
        if ((_o = message.reputerListeningCoefficient) === null || _o === void 0 ? void 0 : _o.length) {
            obj.reputerListeningCoefficient = message.reputerListeningCoefficient.map((e) => exports.TopicIdActorIdListeningCoefficient.toJSON(e));
        }
        if ((_p = message.previousReputerRewardFraction) === null || _p === void 0 ? void 0 : _p.length) {
            obj.previousReputerRewardFraction = message.previousReputerRewardFraction.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_q = message.previousInferenceRewardFraction) === null || _q === void 0 ? void 0 : _q.length) {
            obj.previousInferenceRewardFraction = message.previousInferenceRewardFraction.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_r = message.previousForecastRewardFraction) === null || _r === void 0 ? void 0 : _r.length) {
            obj.previousForecastRewardFraction = message.previousForecastRewardFraction.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_s = message.previousForecasterScoreRatio) === null || _s === void 0 ? void 0 : _s.length) {
            obj.previousForecasterScoreRatio = message.previousForecasterScoreRatio.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if (message.totalStake !== "") {
            obj.totalStake = message.totalStake;
        }
        if ((_t = message.topicStake) === null || _t === void 0 ? void 0 : _t.length) {
            obj.topicStake = message.topicStake.map((e) => exports.TopicIdAndInt.toJSON(e));
        }
        if ((_u = message.stakeReputerAuthority) === null || _u === void 0 ? void 0 : _u.length) {
            obj.stakeReputerAuthority = message.stakeReputerAuthority.map((e) => exports.TopicIdActorIdInt.toJSON(e));
        }
        if ((_v = message.stakeSumFromDelegator) === null || _v === void 0 ? void 0 : _v.length) {
            obj.stakeSumFromDelegator = message.stakeSumFromDelegator.map((e) => exports.TopicIdActorIdInt.toJSON(e));
        }
        if ((_w = message.delegatedStakes) === null || _w === void 0 ? void 0 : _w.length) {
            obj.delegatedStakes = message.delegatedStakes.map((e) => exports.TopicIdDelegatorReputerDelegatorInfo.toJSON(e));
        }
        if ((_x = message.stakeFromDelegatorsUponReputer) === null || _x === void 0 ? void 0 : _x.length) {
            obj.stakeFromDelegatorsUponReputer = message.stakeFromDelegatorsUponReputer.map((e) => exports.TopicIdActorIdInt.toJSON(e));
        }
        if ((_y = message.delegateRewardPerShare) === null || _y === void 0 ? void 0 : _y.length) {
            obj.delegateRewardPerShare = message.delegateRewardPerShare.map((e) => exports.TopicIdActorIdDec.toJSON(e));
        }
        if ((_z = message.stakeRemovalsByBlock) === null || _z === void 0 ? void 0 : _z.length) {
            obj.stakeRemovalsByBlock = message.stakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdReputerStakeRemovalInfo.toJSON(e));
        }
        if ((_0 = message.stakeRemovalsByActor) === null || _0 === void 0 ? void 0 : _0.length) {
            obj.stakeRemovalsByActor = message.stakeRemovalsByActor.map((e) => exports.ActorIdTopicIdBlockHeight.toJSON(e));
        }
        if ((_1 = message.delegateStakeRemovalsByBlock) === null || _1 === void 0 ? void 0 : _1.length) {
            obj.delegateStakeRemovalsByBlock = message.delegateStakeRemovalsByBlock.map((e) => exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.toJSON(e));
        }
        if ((_2 = message.delegateStakeRemovalsByActor) === null || _2 === void 0 ? void 0 : _2.length) {
            obj.delegateStakeRemovalsByActor = message.delegateStakeRemovalsByActor.map((e) => exports.DelegatorReputerTopicIdBlockHeight.toJSON(e));
        }
        if ((_3 = message.inferences) === null || _3 === void 0 ? void 0 : _3.length) {
            obj.inferences = message.inferences.map((e) => exports.TopicIdActorIdInference.toJSON(e));
        }
        if ((_4 = message.forecasts) === null || _4 === void 0 ? void 0 : _4.length) {
            obj.forecasts = message.forecasts.map((e) => exports.TopicIdActorIdForecast.toJSON(e));
        }
        if ((_5 = message.workers) === null || _5 === void 0 ? void 0 : _5.length) {
            obj.workers = message.workers.map((e) => exports.LibP2pKeyAndOffchainNode.toJSON(e));
        }
        if ((_6 = message.reputers) === null || _6 === void 0 ? void 0 : _6.length) {
            obj.reputers = message.reputers.map((e) => exports.LibP2pKeyAndOffchainNode.toJSON(e));
        }
        if ((_7 = message.topicFeeRevenue) === null || _7 === void 0 ? void 0 : _7.length) {
            obj.topicFeeRevenue = message.topicFeeRevenue.map((e) => exports.TopicIdAndInt.toJSON(e));
        }
        if ((_8 = message.previousTopicWeight) === null || _8 === void 0 ? void 0 : _8.length) {
            obj.previousTopicWeight = message.previousTopicWeight.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_9 = message.allInferences) === null || _9 === void 0 ? void 0 : _9.length) {
            obj.allInferences = message.allInferences.map((e) => exports.TopicIdBlockHeightInferences.toJSON(e));
        }
        if ((_10 = message.allForecasts) === null || _10 === void 0 ? void 0 : _10.length) {
            obj.allForecasts = message.allForecasts.map((e) => exports.TopicIdBlockHeightForecasts.toJSON(e));
        }
        if ((_11 = message.allLossBundles) === null || _11 === void 0 ? void 0 : _11.length) {
            obj.allLossBundles = message.allLossBundles.map((e) => exports.TopicIdBlockHeightReputerValueBundles.toJSON(e));
        }
        if ((_12 = message.networkLossBundles) === null || _12 === void 0 ? void 0 : _12.length) {
            obj.networkLossBundles = message.networkLossBundles.map((e) => exports.TopicIdBlockHeightValueBundles.toJSON(e));
        }
        if (message.previousPercentageRewardToStakedReputers !== "") {
            obj.previousPercentageRewardToStakedReputers = message.previousPercentageRewardToStakedReputers;
        }
        if ((_13 = message.openWorkerWindows) === null || _13 === void 0 ? void 0 : _13.length) {
            obj.openWorkerWindows = message.openWorkerWindows.map((e) => exports.BlockHeightAndTopicIds.toJSON(e));
        }
        if ((_14 = message.unfulfilledWorkerNonces) === null || _14 === void 0 ? void 0 : _14.length) {
            obj.unfulfilledWorkerNonces = message.unfulfilledWorkerNonces.map((e) => exports.TopicIdAndNonces.toJSON(e));
        }
        if ((_15 = message.unfulfilledReputerNonces) === null || _15 === void 0 ? void 0 : _15.length) {
            obj.unfulfilledReputerNonces = message.unfulfilledReputerNonces.map((e) => exports.TopicIdAndReputerRequestNonces.toJSON(e));
        }
        if ((_16 = message.lastDripBlock) === null || _16 === void 0 ? void 0 : _16.length) {
            obj.lastDripBlock = message.lastDripBlock.map((e) => exports.TopicIdAndBlockHeight.toJSON(e));
        }
        if ((_17 = message.latestInfererNetworkRegrets) === null || _17 === void 0 ? void 0 : _17.length) {
            obj.latestInfererNetworkRegrets = message.latestInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_18 = message.latestForecasterNetworkRegrets) === null || _18 === void 0 ? void 0 : _18.length) {
            obj.latestForecasterNetworkRegrets = message.latestForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_19 = message.latestOneInForecasterNetworkRegrets) === null || _19 === void 0 ? void 0 : _19.length) {
            obj.latestOneInForecasterNetworkRegrets = message.latestOneInForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_20 = message.latestNaiveInfererNetworkRegrets) === null || _20 === void 0 ? void 0 : _20.length) {
            obj.latestNaiveInfererNetworkRegrets = message.latestNaiveInfererNetworkRegrets.map((e) => exports.TopicIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_21 = message.latestOneOutInfererInfererNetworkRegrets) === null || _21 === void 0 ? void 0 : _21.length) {
            obj.latestOneOutInfererInfererNetworkRegrets = message.latestOneOutInfererInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_22 = message.latestOneOutInfererForecasterNetworkRegrets) === null || _22 === void 0 ? void 0 : _22.length) {
            obj.latestOneOutInfererForecasterNetworkRegrets = message.latestOneOutInfererForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_23 = message.latestOneOutForecasterInfererNetworkRegrets) === null || _23 === void 0 ? void 0 : _23.length) {
            obj.latestOneOutForecasterInfererNetworkRegrets = message.latestOneOutForecasterInfererNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_24 = message.latestOneOutForecasterForecasterNetworkRegrets) === null || _24 === void 0 ? void 0 : _24.length) {
            obj.latestOneOutForecasterForecasterNetworkRegrets = message.latestOneOutForecasterForecasterNetworkRegrets.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.toJSON(e));
        }
        if ((_25 = message.coreTeamAddresses) === null || _25 === void 0 ? void 0 : _25.length) {
            obj.coreTeamAddresses = message.coreTeamAddresses;
        }
        if ((_26 = message.topicLastWorkerCommit) === null || _26 === void 0 ? void 0 : _26.length) {
            obj.topicLastWorkerCommit = message.topicLastWorkerCommit.map((e) => exports.TopicIdTimestampedActorNonce.toJSON(e));
        }
        if ((_27 = message.topicLastReputerCommit) === null || _27 === void 0 ? void 0 : _27.length) {
            obj.topicLastReputerCommit = message.topicLastReputerCommit.map((e) => exports.TopicIdTimestampedActorNonce.toJSON(e));
        }
        if ((_28 = message.topicToNextPossibleChurningBlock) === null || _28 === void 0 ? void 0 : _28.length) {
            obj.topicToNextPossibleChurningBlock = message.topicToNextPossibleChurningBlock.map((e) => exports.TopicIdAndBlockHeight.toJSON(e));
        }
        if ((_29 = message.blockToActiveTopics) === null || _29 === void 0 ? void 0 : _29.length) {
            obj.blockToActiveTopics = message.blockToActiveTopics.map((e) => exports.BlockHeightTopicIds.toJSON(e));
        }
        if ((_30 = message.blockToLowestActiveTopicWeight) === null || _30 === void 0 ? void 0 : _30.length) {
            obj.blockToLowestActiveTopicWeight = message.blockToLowestActiveTopicWeight.map((e) => exports.BlockHeightTopicIdWeightPair.toJSON(e));
        }
        if ((_31 = message.previousTopicQuantileInfererScoreEma) === null || _31 === void 0 ? void 0 : _31.length) {
            obj.previousTopicQuantileInfererScoreEma = message.previousTopicQuantileInfererScoreEma.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_32 = message.previousTopicQuantileForecasterScoreEma) === null || _32 === void 0 ? void 0 : _32.length) {
            obj.previousTopicQuantileForecasterScoreEma = message.previousTopicQuantileForecasterScoreEma.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        if ((_33 = message.previousTopicQuantileReputerScoreEma) === null || _33 === void 0 ? void 0 : _33.length) {
            obj.previousTopicQuantileReputerScoreEma = message.previousTopicQuantileReputerScoreEma.map((e) => exports.TopicIdAndDec.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36;
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        message.nextTopicId = (_a = object.nextTopicId) !== null && _a !== void 0 ? _a : "0";
        message.topics = ((_b = object.topics) === null || _b === void 0 ? void 0 : _b.map((e) => exports.TopicIdAndTopic.fromPartial(e))) || [];
        message.activeTopics = ((_c = object.activeTopics) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.rewardableTopics = ((_d = object.rewardableTopics) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.topicWorkers = ((_e = object.topicWorkers) === null || _e === void 0 ? void 0 : _e.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.topicReputers = ((_f = object.topicReputers) === null || _f === void 0 ? void 0 : _f.map((e) => exports.TopicAndActorId.fromPartial(e))) || [];
        message.topicRewardNonce = ((_g = object.topicRewardNonce) === null || _g === void 0 ? void 0 : _g.map((e) => exports.TopicIdAndBlockHeight.fromPartial(e))) || [];
        message.infererScoresByBlock = ((_h = object.infererScoresByBlock) === null || _h === void 0 ? void 0 : _h.map((e) => exports.TopicIdBlockHeightScores.fromPartial(e))) ||
            [];
        message.forecasterScoresByBlock =
            ((_j = object.forecasterScoresByBlock) === null || _j === void 0 ? void 0 : _j.map((e) => exports.TopicIdBlockHeightScores.fromPartial(e))) || [];
        message.reputerScoresByBlock = ((_k = object.reputerScoresByBlock) === null || _k === void 0 ? void 0 : _k.map((e) => exports.TopicIdBlockHeightScores.fromPartial(e))) ||
            [];
        message.infererScoreEmas = ((_l = object.infererScoreEmas) === null || _l === void 0 ? void 0 : _l.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.forecasterScoreEmas = ((_m = object.forecasterScoreEmas) === null || _m === void 0 ? void 0 : _m.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.reputerScoreEmas = ((_o = object.reputerScoreEmas) === null || _o === void 0 ? void 0 : _o.map((e) => exports.TopicIdActorIdScore.fromPartial(e))) || [];
        message.reputerListeningCoefficient =
            ((_p = object.reputerListeningCoefficient) === null || _p === void 0 ? void 0 : _p.map((e) => exports.TopicIdActorIdListeningCoefficient.fromPartial(e))) || [];
        message.previousReputerRewardFraction =
            ((_q = object.previousReputerRewardFraction) === null || _q === void 0 ? void 0 : _q.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.previousInferenceRewardFraction =
            ((_r = object.previousInferenceRewardFraction) === null || _r === void 0 ? void 0 : _r.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.previousForecastRewardFraction =
            ((_s = object.previousForecastRewardFraction) === null || _s === void 0 ? void 0 : _s.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.previousForecasterScoreRatio =
            ((_t = object.previousForecasterScoreRatio) === null || _t === void 0 ? void 0 : _t.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.totalStake = (_u = object.totalStake) !== null && _u !== void 0 ? _u : "";
        message.topicStake = ((_v = object.topicStake) === null || _v === void 0 ? void 0 : _v.map((e) => exports.TopicIdAndInt.fromPartial(e))) || [];
        message.stakeReputerAuthority = ((_w = object.stakeReputerAuthority) === null || _w === void 0 ? void 0 : _w.map((e) => exports.TopicIdActorIdInt.fromPartial(e))) || [];
        message.stakeSumFromDelegator = ((_x = object.stakeSumFromDelegator) === null || _x === void 0 ? void 0 : _x.map((e) => exports.TopicIdActorIdInt.fromPartial(e))) || [];
        message.delegatedStakes = ((_y = object.delegatedStakes) === null || _y === void 0 ? void 0 : _y.map((e) => exports.TopicIdDelegatorReputerDelegatorInfo.fromPartial(e))) ||
            [];
        message.stakeFromDelegatorsUponReputer =
            ((_z = object.stakeFromDelegatorsUponReputer) === null || _z === void 0 ? void 0 : _z.map((e) => exports.TopicIdActorIdInt.fromPartial(e))) || [];
        message.delegateRewardPerShare = ((_0 = object.delegateRewardPerShare) === null || _0 === void 0 ? void 0 : _0.map((e) => exports.TopicIdActorIdDec.fromPartial(e))) || [];
        message.stakeRemovalsByBlock =
            ((_1 = object.stakeRemovalsByBlock) === null || _1 === void 0 ? void 0 : _1.map((e) => exports.BlockHeightTopicIdReputerStakeRemovalInfo.fromPartial(e))) || [];
        message.stakeRemovalsByActor = ((_2 = object.stakeRemovalsByActor) === null || _2 === void 0 ? void 0 : _2.map((e) => exports.ActorIdTopicIdBlockHeight.fromPartial(e))) ||
            [];
        message.delegateStakeRemovalsByBlock =
            ((_3 = object.delegateStakeRemovalsByBlock) === null || _3 === void 0 ? void 0 : _3.map((e) => exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.fromPartial(e))) || [];
        message.delegateStakeRemovalsByActor =
            ((_4 = object.delegateStakeRemovalsByActor) === null || _4 === void 0 ? void 0 : _4.map((e) => exports.DelegatorReputerTopicIdBlockHeight.fromPartial(e))) || [];
        message.inferences = ((_5 = object.inferences) === null || _5 === void 0 ? void 0 : _5.map((e) => exports.TopicIdActorIdInference.fromPartial(e))) || [];
        message.forecasts = ((_6 = object.forecasts) === null || _6 === void 0 ? void 0 : _6.map((e) => exports.TopicIdActorIdForecast.fromPartial(e))) || [];
        message.workers = ((_7 = object.workers) === null || _7 === void 0 ? void 0 : _7.map((e) => exports.LibP2pKeyAndOffchainNode.fromPartial(e))) || [];
        message.reputers = ((_8 = object.reputers) === null || _8 === void 0 ? void 0 : _8.map((e) => exports.LibP2pKeyAndOffchainNode.fromPartial(e))) || [];
        message.topicFeeRevenue = ((_9 = object.topicFeeRevenue) === null || _9 === void 0 ? void 0 : _9.map((e) => exports.TopicIdAndInt.fromPartial(e))) || [];
        message.previousTopicWeight = ((_10 = object.previousTopicWeight) === null || _10 === void 0 ? void 0 : _10.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.allInferences = ((_11 = object.allInferences) === null || _11 === void 0 ? void 0 : _11.map((e) => exports.TopicIdBlockHeightInferences.fromPartial(e))) || [];
        message.allForecasts = ((_12 = object.allForecasts) === null || _12 === void 0 ? void 0 : _12.map((e) => exports.TopicIdBlockHeightForecasts.fromPartial(e))) || [];
        message.allLossBundles = ((_13 = object.allLossBundles) === null || _13 === void 0 ? void 0 : _13.map((e) => exports.TopicIdBlockHeightReputerValueBundles.fromPartial(e))) ||
            [];
        message.networkLossBundles = ((_14 = object.networkLossBundles) === null || _14 === void 0 ? void 0 : _14.map((e) => exports.TopicIdBlockHeightValueBundles.fromPartial(e))) ||
            [];
        message.previousPercentageRewardToStakedReputers = (_15 = object.previousPercentageRewardToStakedReputers) !== null && _15 !== void 0 ? _15 : "";
        message.openWorkerWindows = ((_16 = object.openWorkerWindows) === null || _16 === void 0 ? void 0 : _16.map((e) => exports.BlockHeightAndTopicIds.fromPartial(e))) || [];
        message.unfulfilledWorkerNonces = ((_17 = object.unfulfilledWorkerNonces) === null || _17 === void 0 ? void 0 : _17.map((e) => exports.TopicIdAndNonces.fromPartial(e))) || [];
        message.unfulfilledReputerNonces =
            ((_18 = object.unfulfilledReputerNonces) === null || _18 === void 0 ? void 0 : _18.map((e) => exports.TopicIdAndReputerRequestNonces.fromPartial(e))) || [];
        message.lastDripBlock = ((_19 = object.lastDripBlock) === null || _19 === void 0 ? void 0 : _19.map((e) => exports.TopicIdAndBlockHeight.fromPartial(e))) || [];
        message.latestInfererNetworkRegrets =
            ((_20 = object.latestInfererNetworkRegrets) === null || _20 === void 0 ? void 0 : _20.map((e) => exports.TopicIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestForecasterNetworkRegrets =
            ((_21 = object.latestForecasterNetworkRegrets) === null || _21 === void 0 ? void 0 : _21.map((e) => exports.TopicIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneInForecasterNetworkRegrets =
            ((_22 = object.latestOneInForecasterNetworkRegrets) === null || _22 === void 0 ? void 0 : _22.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) ||
                [];
        message.latestNaiveInfererNetworkRegrets =
            ((_23 = object.latestNaiveInfererNetworkRegrets) === null || _23 === void 0 ? void 0 : _23.map((e) => exports.TopicIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutInfererInfererNetworkRegrets =
            ((_24 = object.latestOneOutInfererInfererNetworkRegrets) === null || _24 === void 0 ? void 0 : _24.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutInfererForecasterNetworkRegrets =
            ((_25 = object.latestOneOutInfererForecasterNetworkRegrets) === null || _25 === void 0 ? void 0 : _25.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutForecasterInfererNetworkRegrets =
            ((_26 = object.latestOneOutForecasterInfererNetworkRegrets) === null || _26 === void 0 ? void 0 : _26.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.latestOneOutForecasterForecasterNetworkRegrets =
            ((_27 = object.latestOneOutForecasterForecasterNetworkRegrets) === null || _27 === void 0 ? void 0 : _27.map((e) => exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(e))) || [];
        message.coreTeamAddresses = ((_28 = object.coreTeamAddresses) === null || _28 === void 0 ? void 0 : _28.map((e) => e)) || [];
        message.topicLastWorkerCommit =
            ((_29 = object.topicLastWorkerCommit) === null || _29 === void 0 ? void 0 : _29.map((e) => exports.TopicIdTimestampedActorNonce.fromPartial(e))) || [];
        message.topicLastReputerCommit =
            ((_30 = object.topicLastReputerCommit) === null || _30 === void 0 ? void 0 : _30.map((e) => exports.TopicIdTimestampedActorNonce.fromPartial(e))) || [];
        message.topicToNextPossibleChurningBlock =
            ((_31 = object.topicToNextPossibleChurningBlock) === null || _31 === void 0 ? void 0 : _31.map((e) => exports.TopicIdAndBlockHeight.fromPartial(e))) || [];
        message.blockToActiveTopics = ((_32 = object.blockToActiveTopics) === null || _32 === void 0 ? void 0 : _32.map((e) => exports.BlockHeightTopicIds.fromPartial(e))) || [];
        message.blockToLowestActiveTopicWeight =
            ((_33 = object.blockToLowestActiveTopicWeight) === null || _33 === void 0 ? void 0 : _33.map((e) => exports.BlockHeightTopicIdWeightPair.fromPartial(e))) || [];
        message.previousTopicQuantileInfererScoreEma =
            ((_34 = object.previousTopicQuantileInfererScoreEma) === null || _34 === void 0 ? void 0 : _34.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.previousTopicQuantileForecasterScoreEma =
            ((_35 = object.previousTopicQuantileForecasterScoreEma) === null || _35 === void 0 ? void 0 : _35.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        message.previousTopicQuantileReputerScoreEma =
            ((_36 = object.previousTopicQuantileReputerScoreEma) === null || _36 === void 0 ? void 0 : _36.map((e) => exports.TopicIdAndDec.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTopicIdAndTopic() {
    return { TopicId: "0", Topic: undefined };
}
exports.TopicIdAndTopic = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.Topic !== undefined) {
            topic_1.Topic.encode(message.Topic, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndTopic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.Topic = topic_1.Topic.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Topic: isSet(object.Topic) ? topic_1.Topic.fromJSON(object.Topic) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Topic !== undefined) {
            obj.Topic = topic_1.Topic.toJSON(message.Topic);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndTopic.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdAndTopic();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.Topic = (object.Topic !== undefined && object.Topic !== null) ? topic_1.Topic.fromPartial(object.Topic) : undefined;
        return message;
    },
};
function createBaseTopicAndActorId() {
    return { TopicId: "0", ActorId: "" };
}
exports.TopicAndActorId = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicAndActorId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        return obj;
    },
    create(base) {
        return exports.TopicAndActorId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicAndActorId();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTopicIdAndBlockHeight() {
    return { TopicId: "0", BlockHeight: "0" };
}
exports.TopicIdAndBlockHeight = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(16).int64(message.BlockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndBlockHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndBlockHeight.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdAndBlockHeight();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.BlockHeight = (_b = object.BlockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseBlockHeightAndTopicIds() {
    return { BlockHeight: "0", TopicIds: [] };
}
exports.BlockHeightAndTopicIds = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.BlockHeight !== "0") {
            writer.uint32(8).int64(message.BlockHeight);
        }
        writer.uint32(18).fork();
        for (const v of message.TopicIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightAndTopicIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.TopicIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.TopicIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            TopicIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.TopicIds) ? object.TopicIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if ((_a = message.TopicIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.TopicIds = message.TopicIds;
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightAndTopicIds.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBlockHeightAndTopicIds();
        message.BlockHeight = (_a = object.BlockHeight) !== null && _a !== void 0 ? _a : "0";
        message.TopicIds = ((_b = object.TopicIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseTopicIdBlockHeightScores() {
    return { TopicId: "0", BlockHeight: "0", Scores: undefined };
}
exports.TopicIdBlockHeightScores = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(16).int64(message.BlockHeight);
        }
        if (message.Scores !== undefined) {
            score_1.Scores.encode(message.Scores, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightScores();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            Scores: isSet(object.Scores) ? score_1.Scores.fromJSON(object.Scores) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.Scores !== undefined) {
            obj.Scores = score_1.Scores.toJSON(message.Scores);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightScores.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightScores();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.BlockHeight = (_b = object.BlockHeight) !== null && _b !== void 0 ? _b : "0";
        message.Scores = (object.Scores !== undefined && object.Scores !== null)
            ? score_1.Scores.fromPartial(object.Scores)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdScore() {
    return { TopicId: "0", ActorId: "", Score: undefined };
}
exports.TopicIdActorIdScore = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.Score !== undefined) {
            score_1.Score.encode(message.Score, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdScore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            Score: isSet(object.Score) ? score_1.Score.fromJSON(object.Score) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.Score !== undefined) {
            obj.Score = score_1.Score.toJSON(message.Score);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdScore.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdScore();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.Score = (object.Score !== undefined && object.Score !== null) ? score_1.Score.fromPartial(object.Score) : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdListeningCoefficient() {
    return { TopicId: "0", ActorId: "", ListeningCoefficient: undefined };
}
exports.TopicIdActorIdListeningCoefficient = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.ListeningCoefficient !== undefined) {
            types_1.ListeningCoefficient.encode(message.ListeningCoefficient, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdListeningCoefficient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ListeningCoefficient = types_1.ListeningCoefficient.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            ListeningCoefficient: isSet(object.ListeningCoefficient)
                ? types_1.ListeningCoefficient.fromJSON(object.ListeningCoefficient)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.ListeningCoefficient !== undefined) {
            obj.ListeningCoefficient = types_1.ListeningCoefficient.toJSON(message.ListeningCoefficient);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdListeningCoefficient.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdListeningCoefficient();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.ListeningCoefficient = (object.ListeningCoefficient !== undefined && object.ListeningCoefficient !== null)
            ? types_1.ListeningCoefficient.fromPartial(object.ListeningCoefficient)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdDec() {
    return { TopicId: "0", ActorId: "", Dec: "" };
}
exports.TopicIdActorIdDec = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.Dec !== "") {
            writer.uint32(26).string(message.Dec);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdDec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Dec = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            Dec: isSet(object.Dec) ? globalThis.String(object.Dec) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.Dec !== "") {
            obj.Dec = message.Dec;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdDec.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdDec();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.Dec = (_c = object.Dec) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseTopicIdAndInt() {
    return { TopicId: "0", Int: "" };
}
exports.TopicIdAndInt = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.Int !== "") {
            writer.uint32(18).string(message.Int);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndInt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.Int = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Int: isSet(object.Int) ? globalThis.String(object.Int) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Int !== "") {
            obj.Int = message.Int;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndInt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdAndInt();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.Int = (_b = object.Int) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTopicIdActorIdInt() {
    return { TopicId: "0", ActorId: "", Int: "" };
}
exports.TopicIdActorIdInt = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.Int !== "") {
            writer.uint32(26).string(message.Int);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdInt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Int = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            Int: isSet(object.Int) ? globalThis.String(object.Int) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.Int !== "") {
            obj.Int = message.Int;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdInt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdInt();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.Int = (_c = object.Int) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseTopicIdDelegatorReputerDelegatorInfo() {
    return { TopicId: "0", Delegator: "", Reputer: "", DelegatorInfo: undefined };
}
exports.TopicIdDelegatorReputerDelegatorInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.Delegator !== "") {
            writer.uint32(18).string(message.Delegator);
        }
        if (message.Reputer !== "") {
            writer.uint32(26).string(message.Reputer);
        }
        if (message.DelegatorInfo !== undefined) {
            stake_1.DelegatorInfo.encode(message.DelegatorInfo, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdDelegatorReputerDelegatorInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.Delegator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.DelegatorInfo = stake_1.DelegatorInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Delegator: isSet(object.Delegator) ? globalThis.String(object.Delegator) : "",
            Reputer: isSet(object.Reputer) ? globalThis.String(object.Reputer) : "",
            DelegatorInfo: isSet(object.DelegatorInfo) ? stake_1.DelegatorInfo.fromJSON(object.DelegatorInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Delegator !== "") {
            obj.Delegator = message.Delegator;
        }
        if (message.Reputer !== "") {
            obj.Reputer = message.Reputer;
        }
        if (message.DelegatorInfo !== undefined) {
            obj.DelegatorInfo = stake_1.DelegatorInfo.toJSON(message.DelegatorInfo);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdDelegatorReputerDelegatorInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdDelegatorReputerDelegatorInfo();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.Delegator = (_b = object.Delegator) !== null && _b !== void 0 ? _b : "";
        message.Reputer = (_c = object.Reputer) !== null && _c !== void 0 ? _c : "";
        message.DelegatorInfo = (object.DelegatorInfo !== undefined && object.DelegatorInfo !== null)
            ? stake_1.DelegatorInfo.fromPartial(object.DelegatorInfo)
            : undefined;
        return message;
    },
};
function createBaseBlockHeightTopicIdReputerStakeRemovalInfo() {
    return { BlockHeight: "0", TopicId: "0", Reputer: "", StakeRemovalInfo: undefined };
}
exports.BlockHeightTopicIdReputerStakeRemovalInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.BlockHeight !== "0") {
            writer.uint32(8).int64(message.BlockHeight);
        }
        if (message.TopicId !== "0") {
            writer.uint32(16).uint64(message.TopicId);
        }
        if (message.Reputer !== "") {
            writer.uint32(26).string(message.Reputer);
        }
        if (message.StakeRemovalInfo !== undefined) {
            stake_1.StakeRemovalInfo.encode(message.StakeRemovalInfo, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIdReputerStakeRemovalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.StakeRemovalInfo = stake_1.StakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Reputer: isSet(object.Reputer) ? globalThis.String(object.Reputer) : "",
            StakeRemovalInfo: isSet(object.StakeRemovalInfo) ? stake_1.StakeRemovalInfo.fromJSON(object.StakeRemovalInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Reputer !== "") {
            obj.Reputer = message.Reputer;
        }
        if (message.StakeRemovalInfo !== undefined) {
            obj.StakeRemovalInfo = stake_1.StakeRemovalInfo.toJSON(message.StakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIdReputerStakeRemovalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBlockHeightTopicIdReputerStakeRemovalInfo();
        message.BlockHeight = (_a = object.BlockHeight) !== null && _a !== void 0 ? _a : "0";
        message.TopicId = (_b = object.TopicId) !== null && _b !== void 0 ? _b : "0";
        message.Reputer = (_c = object.Reputer) !== null && _c !== void 0 ? _c : "";
        message.StakeRemovalInfo = (object.StakeRemovalInfo !== undefined && object.StakeRemovalInfo !== null)
            ? stake_1.StakeRemovalInfo.fromPartial(object.StakeRemovalInfo)
            : undefined;
        return message;
    },
};
function createBaseActorIdTopicIdBlockHeight() {
    return { ActorId: "", TopicId: "0", BlockHeight: "0" };
}
exports.ActorIdTopicIdBlockHeight = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ActorId !== "") {
            writer.uint32(10).string(message.ActorId);
        }
        if (message.TopicId !== "0") {
            writer.uint32(16).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(24).int64(message.BlockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActorIdTopicIdBlockHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.ActorIdTopicIdBlockHeight.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseActorIdTopicIdBlockHeight();
        message.ActorId = (_a = object.ActorId) !== null && _a !== void 0 ? _a : "";
        message.TopicId = (_b = object.TopicId) !== null && _b !== void 0 ? _b : "0";
        message.BlockHeight = (_c = object.BlockHeight) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseBlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo() {
    return { BlockHeight: "0", TopicId: "0", Delegator: "", Reputer: "", DelegateStakeRemovalInfo: undefined };
}
exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.BlockHeight !== "0") {
            writer.uint32(8).int64(message.BlockHeight);
        }
        if (message.TopicId !== "0") {
            writer.uint32(16).uint64(message.TopicId);
        }
        if (message.Delegator !== "") {
            writer.uint32(26).string(message.Delegator);
        }
        if (message.Reputer !== "") {
            writer.uint32(34).string(message.Reputer);
        }
        if (message.DelegateStakeRemovalInfo !== undefined) {
            stake_1.DelegateStakeRemovalInfo.encode(message.DelegateStakeRemovalInfo, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Delegator = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.Reputer = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.DelegateStakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Delegator: isSet(object.Delegator) ? globalThis.String(object.Delegator) : "",
            Reputer: isSet(object.Reputer) ? globalThis.String(object.Reputer) : "",
            DelegateStakeRemovalInfo: isSet(object.DelegateStakeRemovalInfo)
                ? stake_1.DelegateStakeRemovalInfo.fromJSON(object.DelegateStakeRemovalInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Delegator !== "") {
            obj.Delegator = message.Delegator;
        }
        if (message.Reputer !== "") {
            obj.Reputer = message.Reputer;
        }
        if (message.DelegateStakeRemovalInfo !== undefined) {
            obj.DelegateStakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.toJSON(message.DelegateStakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo();
        message.BlockHeight = (_a = object.BlockHeight) !== null && _a !== void 0 ? _a : "0";
        message.TopicId = (_b = object.TopicId) !== null && _b !== void 0 ? _b : "0";
        message.Delegator = (_c = object.Delegator) !== null && _c !== void 0 ? _c : "";
        message.Reputer = (_d = object.Reputer) !== null && _d !== void 0 ? _d : "";
        message.DelegateStakeRemovalInfo =
            (object.DelegateStakeRemovalInfo !== undefined && object.DelegateStakeRemovalInfo !== null)
                ? stake_1.DelegateStakeRemovalInfo.fromPartial(object.DelegateStakeRemovalInfo)
                : undefined;
        return message;
    },
};
function createBaseDelegatorReputerTopicIdBlockHeight() {
    return { Delegator: "", Reputer: "", TopicId: "0", BlockHeight: "0" };
}
exports.DelegatorReputerTopicIdBlockHeight = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.Delegator !== "") {
            writer.uint32(10).string(message.Delegator);
        }
        if (message.Reputer !== "") {
            writer.uint32(18).string(message.Reputer);
        }
        if (message.TopicId !== "0") {
            writer.uint32(24).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(32).int64(message.BlockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelegatorReputerTopicIdBlockHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.Delegator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.Reputer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Delegator: isSet(object.Delegator) ? globalThis.String(object.Delegator) : "",
            Reputer: isSet(object.Reputer) ? globalThis.String(object.Reputer) : "",
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Delegator !== "") {
            obj.Delegator = message.Delegator;
        }
        if (message.Reputer !== "") {
            obj.Reputer = message.Reputer;
        }
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.DelegatorReputerTopicIdBlockHeight.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseDelegatorReputerTopicIdBlockHeight();
        message.Delegator = (_a = object.Delegator) !== null && _a !== void 0 ? _a : "";
        message.Reputer = (_b = object.Reputer) !== null && _b !== void 0 ? _b : "";
        message.TopicId = (_c = object.TopicId) !== null && _c !== void 0 ? _c : "0";
        message.BlockHeight = (_d = object.BlockHeight) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseTopicIdActorIdInference() {
    return { TopicId: "0", ActorId: "", Inference: undefined };
}
exports.TopicIdActorIdInference = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.Inference !== undefined) {
            worker_1.Inference.encode(message.Inference, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdInference();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Inference = worker_1.Inference.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            Inference: isSet(object.Inference) ? worker_1.Inference.fromJSON(object.Inference) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.Inference !== undefined) {
            obj.Inference = worker_1.Inference.toJSON(message.Inference);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdInference.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdInference();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.Inference = (object.Inference !== undefined && object.Inference !== null)
            ? worker_1.Inference.fromPartial(object.Inference)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdForecast() {
    return { TopicId: "0", ActorId: "", Forecast: undefined };
}
exports.TopicIdActorIdForecast = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.Forecast !== undefined) {
            worker_1.Forecast.encode(message.Forecast, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdForecast();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Forecast = worker_1.Forecast.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            Forecast: isSet(object.Forecast) ? worker_1.Forecast.fromJSON(object.Forecast) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.Forecast !== undefined) {
            obj.Forecast = worker_1.Forecast.toJSON(message.Forecast);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdForecast.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdForecast();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.Forecast = (object.Forecast !== undefined && object.Forecast !== null)
            ? worker_1.Forecast.fromPartial(object.Forecast)
            : undefined;
        return message;
    },
};
function createBaseLibP2pKeyAndOffchainNode() {
    return { LibP2pKey: "", OffchainNode: undefined };
}
exports.LibP2pKeyAndOffchainNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.LibP2pKey !== "") {
            writer.uint32(10).string(message.LibP2pKey);
        }
        if (message.OffchainNode !== undefined) {
            node_1.OffchainNode.encode(message.OffchainNode, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLibP2pKeyAndOffchainNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.LibP2pKey = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.OffchainNode = node_1.OffchainNode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            LibP2pKey: isSet(object.LibP2pKey) ? globalThis.String(object.LibP2pKey) : "",
            OffchainNode: isSet(object.OffchainNode) ? node_1.OffchainNode.fromJSON(object.OffchainNode) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.LibP2pKey !== "") {
            obj.LibP2pKey = message.LibP2pKey;
        }
        if (message.OffchainNode !== undefined) {
            obj.OffchainNode = node_1.OffchainNode.toJSON(message.OffchainNode);
        }
        return obj;
    },
    create(base) {
        return exports.LibP2pKeyAndOffchainNode.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLibP2pKeyAndOffchainNode();
        message.LibP2pKey = (_a = object.LibP2pKey) !== null && _a !== void 0 ? _a : "";
        message.OffchainNode = (object.OffchainNode !== undefined && object.OffchainNode !== null)
            ? node_1.OffchainNode.fromPartial(object.OffchainNode)
            : undefined;
        return message;
    },
};
function createBaseTopicIdAndDec() {
    return { TopicId: "0", Dec: "" };
}
exports.TopicIdAndDec = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.Dec !== "") {
            writer.uint32(18).string(message.Dec);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndDec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.Dec = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Dec: isSet(object.Dec) ? globalThis.String(object.Dec) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Dec !== "") {
            obj.Dec = message.Dec;
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndDec.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdAndDec();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.Dec = (_b = object.Dec) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTopicIdBlockHeightInferences() {
    return { TopicId: "0", BlockHeight: "0", Inferences: undefined };
}
exports.TopicIdBlockHeightInferences = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(16).int64(message.BlockHeight);
        }
        if (message.Inferences !== undefined) {
            worker_1.Inferences.encode(message.Inferences, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightInferences();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Inferences = worker_1.Inferences.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            Inferences: isSet(object.Inferences) ? worker_1.Inferences.fromJSON(object.Inferences) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.Inferences !== undefined) {
            obj.Inferences = worker_1.Inferences.toJSON(message.Inferences);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightInferences.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightInferences();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.BlockHeight = (_b = object.BlockHeight) !== null && _b !== void 0 ? _b : "0";
        message.Inferences = (object.Inferences !== undefined && object.Inferences !== null)
            ? worker_1.Inferences.fromPartial(object.Inferences)
            : undefined;
        return message;
    },
};
function createBaseTopicIdBlockHeightForecasts() {
    return { TopicId: "0", BlockHeight: "0", Forecasts: undefined };
}
exports.TopicIdBlockHeightForecasts = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(16).int64(message.BlockHeight);
        }
        if (message.Forecasts !== undefined) {
            worker_1.Forecasts.encode(message.Forecasts, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightForecasts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Forecasts = worker_1.Forecasts.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            Forecasts: isSet(object.Forecasts) ? worker_1.Forecasts.fromJSON(object.Forecasts) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.Forecasts !== undefined) {
            obj.Forecasts = worker_1.Forecasts.toJSON(message.Forecasts);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightForecasts.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightForecasts();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.BlockHeight = (_b = object.BlockHeight) !== null && _b !== void 0 ? _b : "0";
        message.Forecasts = (object.Forecasts !== undefined && object.Forecasts !== null)
            ? worker_1.Forecasts.fromPartial(object.Forecasts)
            : undefined;
        return message;
    },
};
function createBaseTopicIdBlockHeightReputerValueBundles() {
    return { TopicId: "0", BlockHeight: "0", ReputerValueBundles: undefined };
}
exports.TopicIdBlockHeightReputerValueBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(16).int64(message.BlockHeight);
        }
        if (message.ReputerValueBundles !== undefined) {
            reputer_1.ReputerValueBundles.encode(message.ReputerValueBundles, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightReputerValueBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ReputerValueBundles = reputer_1.ReputerValueBundles.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            ReputerValueBundles: isSet(object.ReputerValueBundles)
                ? reputer_1.ReputerValueBundles.fromJSON(object.ReputerValueBundles)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.ReputerValueBundles !== undefined) {
            obj.ReputerValueBundles = reputer_1.ReputerValueBundles.toJSON(message.ReputerValueBundles);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightReputerValueBundles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightReputerValueBundles();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.BlockHeight = (_b = object.BlockHeight) !== null && _b !== void 0 ? _b : "0";
        message.ReputerValueBundles = (object.ReputerValueBundles !== undefined && object.ReputerValueBundles !== null)
            ? reputer_1.ReputerValueBundles.fromPartial(object.ReputerValueBundles)
            : undefined;
        return message;
    },
};
function createBaseTopicIdBlockHeightValueBundles() {
    return { TopicId: "0", BlockHeight: "0", ValueBundle: undefined };
}
exports.TopicIdBlockHeightValueBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.BlockHeight !== "0") {
            writer.uint32(16).int64(message.BlockHeight);
        }
        if (message.ValueBundle !== undefined) {
            reputer_1.ValueBundle.encode(message.ValueBundle, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdBlockHeightValueBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ValueBundle = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            ValueBundle: isSet(object.ValueBundle) ? reputer_1.ValueBundle.fromJSON(object.ValueBundle) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.ValueBundle !== undefined) {
            obj.ValueBundle = reputer_1.ValueBundle.toJSON(message.ValueBundle);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdBlockHeightValueBundles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdBlockHeightValueBundles();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.BlockHeight = (_b = object.BlockHeight) !== null && _b !== void 0 ? _b : "0";
        message.ValueBundle = (object.ValueBundle !== undefined && object.ValueBundle !== null)
            ? reputer_1.ValueBundle.fromPartial(object.ValueBundle)
            : undefined;
        return message;
    },
};
function createBaseTopicIdAndNonces() {
    return { TopicId: "0", Nonces: undefined };
}
exports.TopicIdAndNonces = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.Nonces !== undefined) {
            nonce_1.Nonces.encode(message.Nonces, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndNonces();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.Nonces = nonce_1.Nonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            Nonces: isSet(object.Nonces) ? nonce_1.Nonces.fromJSON(object.Nonces) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.Nonces !== undefined) {
            obj.Nonces = nonce_1.Nonces.toJSON(message.Nonces);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndNonces.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdAndNonces();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.Nonces = (object.Nonces !== undefined && object.Nonces !== null)
            ? nonce_1.Nonces.fromPartial(object.Nonces)
            : undefined;
        return message;
    },
};
function createBaseTopicIdAndReputerRequestNonces() {
    return { TopicId: "0", ReputerRequestNonces: undefined };
}
exports.TopicIdAndReputerRequestNonces = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ReputerRequestNonces !== undefined) {
            nonce_1.ReputerRequestNonces.encode(message.ReputerRequestNonces, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdAndReputerRequestNonces();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ReputerRequestNonces = nonce_1.ReputerRequestNonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ReputerRequestNonces: isSet(object.ReputerRequestNonces)
                ? nonce_1.ReputerRequestNonces.fromJSON(object.ReputerRequestNonces)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ReputerRequestNonces !== undefined) {
            obj.ReputerRequestNonces = nonce_1.ReputerRequestNonces.toJSON(message.ReputerRequestNonces);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdAndReputerRequestNonces.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdAndReputerRequestNonces();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ReputerRequestNonces = (object.ReputerRequestNonces !== undefined && object.ReputerRequestNonces !== null)
            ? nonce_1.ReputerRequestNonces.fromPartial(object.ReputerRequestNonces)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdTimeStampedValue() {
    return { TopicId: "0", ActorId: "", TimestampedValue: undefined };
}
exports.TopicIdActorIdTimeStampedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId !== "") {
            writer.uint32(18).string(message.ActorId);
        }
        if (message.TimestampedValue !== undefined) {
            worker_1.TimestampedValue.encode(message.TimestampedValue, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdTimeStampedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.TimestampedValue = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId: isSet(object.ActorId) ? globalThis.String(object.ActorId) : "",
            TimestampedValue: isSet(object.TimestampedValue) ? worker_1.TimestampedValue.fromJSON(object.TimestampedValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId !== "") {
            obj.ActorId = message.ActorId;
        }
        if (message.TimestampedValue !== undefined) {
            obj.TimestampedValue = worker_1.TimestampedValue.toJSON(message.TimestampedValue);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdTimeStampedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTopicIdActorIdTimeStampedValue();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId = (_b = object.ActorId) !== null && _b !== void 0 ? _b : "";
        message.TimestampedValue = (object.TimestampedValue !== undefined && object.TimestampedValue !== null)
            ? worker_1.TimestampedValue.fromPartial(object.TimestampedValue)
            : undefined;
        return message;
    },
};
function createBaseTopicIdActorIdActorIdTimeStampedValue() {
    return { TopicId: "0", ActorId1: "", ActorId2: "", TimestampedValue: undefined };
}
exports.TopicIdActorIdActorIdTimeStampedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.ActorId1 !== "") {
            writer.uint32(18).string(message.ActorId1);
        }
        if (message.ActorId2 !== "") {
            writer.uint32(26).string(message.ActorId2);
        }
        if (message.TimestampedValue !== undefined) {
            worker_1.TimestampedValue.encode(message.TimestampedValue, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdActorIdActorIdTimeStampedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ActorId1 = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ActorId2 = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.TimestampedValue = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            ActorId1: isSet(object.ActorId1) ? globalThis.String(object.ActorId1) : "",
            ActorId2: isSet(object.ActorId2) ? globalThis.String(object.ActorId2) : "",
            TimestampedValue: isSet(object.TimestampedValue) ? worker_1.TimestampedValue.fromJSON(object.TimestampedValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.ActorId1 !== "") {
            obj.ActorId1 = message.ActorId1;
        }
        if (message.ActorId2 !== "") {
            obj.ActorId2 = message.ActorId2;
        }
        if (message.TimestampedValue !== undefined) {
            obj.TimestampedValue = worker_1.TimestampedValue.toJSON(message.TimestampedValue);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdActorIdActorIdTimeStampedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTopicIdActorIdActorIdTimeStampedValue();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.ActorId1 = (_b = object.ActorId1) !== null && _b !== void 0 ? _b : "";
        message.ActorId2 = (_c = object.ActorId2) !== null && _c !== void 0 ? _c : "";
        message.TimestampedValue = (object.TimestampedValue !== undefined && object.TimestampedValue !== null)
            ? worker_1.TimestampedValue.fromPartial(object.TimestampedValue)
            : undefined;
        return message;
    },
};
function createBaseTopicIdTimestampedActorNonce() {
    return { TopicId: "0", TimestampedActorNonce: undefined };
}
exports.TopicIdTimestampedActorNonce = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.TopicId !== "0") {
            writer.uint32(8).uint64(message.TopicId);
        }
        if (message.TimestampedActorNonce !== undefined) {
            topic_1.TimestampedActorNonce.encode(message.TimestampedActorNonce, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopicIdTimestampedActorNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.TopicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.TimestampedActorNonce = topic_1.TimestampedActorNonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            TopicId: isSet(object.TopicId) ? globalThis.String(object.TopicId) : "0",
            TimestampedActorNonce: isSet(object.TimestampedActorNonce)
                ? topic_1.TimestampedActorNonce.fromJSON(object.TimestampedActorNonce)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.TopicId !== "0") {
            obj.TopicId = message.TopicId;
        }
        if (message.TimestampedActorNonce !== undefined) {
            obj.TimestampedActorNonce = topic_1.TimestampedActorNonce.toJSON(message.TimestampedActorNonce);
        }
        return obj;
    },
    create(base) {
        return exports.TopicIdTimestampedActorNonce.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTopicIdTimestampedActorNonce();
        message.TopicId = (_a = object.TopicId) !== null && _a !== void 0 ? _a : "0";
        message.TimestampedActorNonce =
            (object.TimestampedActorNonce !== undefined && object.TimestampedActorNonce !== null)
                ? topic_1.TimestampedActorNonce.fromPartial(object.TimestampedActorNonce)
                : undefined;
        return message;
    },
};
function createBaseBlockHeightTopicIds() {
    return { BlockHeight: "0", TopicIds: undefined };
}
exports.BlockHeightTopicIds = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.BlockHeight !== "0") {
            writer.uint32(8).int64(message.BlockHeight);
        }
        if (message.TopicIds !== undefined) {
            topic_1.TopicIds.encode(message.TopicIds, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.TopicIds = topic_1.TopicIds.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            TopicIds: isSet(object.TopicIds) ? topic_1.TopicIds.fromJSON(object.TopicIds) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.TopicIds !== undefined) {
            obj.TopicIds = topic_1.TopicIds.toJSON(message.TopicIds);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIds.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockHeightTopicIds();
        message.BlockHeight = (_a = object.BlockHeight) !== null && _a !== void 0 ? _a : "0";
        message.TopicIds = (object.TopicIds !== undefined && object.TopicIds !== null)
            ? topic_1.TopicIds.fromPartial(object.TopicIds)
            : undefined;
        return message;
    },
};
function createBaseBlockHeightTopicIdWeightPair() {
    return { BlockHeight: "0", TopicWeight: undefined };
}
exports.BlockHeightTopicIdWeightPair = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.BlockHeight !== "0") {
            writer.uint32(8).int64(message.BlockHeight);
        }
        if (message.TopicWeight !== undefined) {
            topic_1.TopicIdWeightPair.encode(message.TopicWeight, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockHeightTopicIdWeightPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.BlockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.TopicWeight = topic_1.TopicIdWeightPair.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            BlockHeight: isSet(object.BlockHeight) ? globalThis.String(object.BlockHeight) : "0",
            TopicWeight: isSet(object.TopicWeight) ? topic_1.TopicIdWeightPair.fromJSON(object.TopicWeight) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.BlockHeight !== "0") {
            obj.BlockHeight = message.BlockHeight;
        }
        if (message.TopicWeight !== undefined) {
            obj.TopicWeight = topic_1.TopicIdWeightPair.toJSON(message.TopicWeight);
        }
        return obj;
    },
    create(base) {
        return exports.BlockHeightTopicIdWeightPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockHeightTopicIdWeightPair();
        message.BlockHeight = (_a = object.BlockHeight) !== null && _a !== void 0 ? _a : "0";
        message.TopicWeight = (object.TopicWeight !== undefined && object.TopicWeight !== null)
            ? topic_1.TopicIdWeightPair.fromPartial(object.TopicWeight)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

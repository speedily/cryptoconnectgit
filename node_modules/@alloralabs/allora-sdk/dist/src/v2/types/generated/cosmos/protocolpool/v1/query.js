"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/protocolpool/v1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryUnclaimedBudgetResponse = exports.QueryUnclaimedBudgetRequest = exports.QueryCommunityPoolResponse = exports.QueryCommunityPoolRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const coin_1 = require("../../base/v1beta1/coin");
exports.protobufPackage = "cosmos.protocolpool.v1";
function createBaseQueryCommunityPoolRequest() {
    return {};
}
exports.QueryCommunityPoolRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCommunityPoolRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryCommunityPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryCommunityPoolRequest();
        return message;
    },
};
function createBaseQueryCommunityPoolResponse() {
    return { pool: [] };
}
exports.QueryCommunityPoolResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.pool) {
            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCommunityPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pool.push(coin_1.DecCoin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pool: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pool) ? object.pool.map((e) => coin_1.DecCoin.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.pool) === null || _a === void 0 ? void 0 : _a.length) {
            obj.pool = message.pool.map((e) => coin_1.DecCoin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryCommunityPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCommunityPoolResponse();
        message.pool = ((_a = object.pool) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.DecCoin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryUnclaimedBudgetRequest() {
    return { address: "" };
}
exports.QueryUnclaimedBudgetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryUnclaimedBudgetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryUnclaimedBudgetRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryUnclaimedBudgetRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryUnclaimedBudgetResponse() {
    return {
        totalBudget: undefined,
        claimedAmount: undefined,
        unclaimedAmount: undefined,
        nextClaimFrom: undefined,
        period: undefined,
        tranchesLeft: "0",
    };
}
exports.QueryUnclaimedBudgetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalBudget !== undefined) {
            coin_1.Coin.encode(message.totalBudget, writer.uint32(10).fork()).join();
        }
        if (message.claimedAmount !== undefined) {
            coin_1.Coin.encode(message.claimedAmount, writer.uint32(18).fork()).join();
        }
        if (message.unclaimedAmount !== undefined) {
            coin_1.Coin.encode(message.unclaimedAmount, writer.uint32(26).fork()).join();
        }
        if (message.nextClaimFrom !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.nextClaimFrom), writer.uint32(34).fork()).join();
        }
        if (message.period !== undefined) {
            duration_1.Duration.encode(message.period, writer.uint32(42).fork()).join();
        }
        if (message.tranchesLeft !== "0") {
            writer.uint32(48).uint64(message.tranchesLeft);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryUnclaimedBudgetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.totalBudget = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.claimedAmount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.unclaimedAmount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.nextClaimFrom = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.period = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.tranchesLeft = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalBudget: isSet(object.totalBudget) ? coin_1.Coin.fromJSON(object.totalBudget) : undefined,
            claimedAmount: isSet(object.claimedAmount) ? coin_1.Coin.fromJSON(object.claimedAmount) : undefined,
            unclaimedAmount: isSet(object.unclaimedAmount) ? coin_1.Coin.fromJSON(object.unclaimedAmount) : undefined,
            nextClaimFrom: isSet(object.nextClaimFrom) ? fromJsonTimestamp(object.nextClaimFrom) : undefined,
            period: isSet(object.period) ? duration_1.Duration.fromJSON(object.period) : undefined,
            tranchesLeft: isSet(object.tranchesLeft) ? globalThis.String(object.tranchesLeft) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalBudget !== undefined) {
            obj.totalBudget = coin_1.Coin.toJSON(message.totalBudget);
        }
        if (message.claimedAmount !== undefined) {
            obj.claimedAmount = coin_1.Coin.toJSON(message.claimedAmount);
        }
        if (message.unclaimedAmount !== undefined) {
            obj.unclaimedAmount = coin_1.Coin.toJSON(message.unclaimedAmount);
        }
        if (message.nextClaimFrom !== undefined) {
            obj.nextClaimFrom = message.nextClaimFrom.toISOString();
        }
        if (message.period !== undefined) {
            obj.period = duration_1.Duration.toJSON(message.period);
        }
        if (message.tranchesLeft !== "0") {
            obj.tranchesLeft = message.tranchesLeft;
        }
        return obj;
    },
    create(base) {
        return exports.QueryUnclaimedBudgetResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryUnclaimedBudgetResponse();
        message.totalBudget = (object.totalBudget !== undefined && object.totalBudget !== null)
            ? coin_1.Coin.fromPartial(object.totalBudget)
            : undefined;
        message.claimedAmount = (object.claimedAmount !== undefined && object.claimedAmount !== null)
            ? coin_1.Coin.fromPartial(object.claimedAmount)
            : undefined;
        message.unclaimedAmount = (object.unclaimedAmount !== undefined && object.unclaimedAmount !== null)
            ? coin_1.Coin.fromPartial(object.unclaimedAmount)
            : undefined;
        message.nextClaimFrom = (_a = object.nextClaimFrom) !== null && _a !== void 0 ? _a : undefined;
        message.period = (object.period !== undefined && object.period !== null)
            ? duration_1.Duration.fromPartial(object.period)
            : undefined;
        message.tranchesLeft = (_b = object.tranchesLeft) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
exports.QueryServiceName = "cosmos.protocolpool.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.CommunityPool = this.CommunityPool.bind(this);
        this.UnclaimedBudget = this.UnclaimedBudget.bind(this);
    }
    CommunityPool(request) {
        const data = exports.QueryCommunityPoolRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CommunityPool", data);
        return promise.then((data) => exports.QueryCommunityPoolResponse.decode(new wire_1.BinaryReader(data)));
    }
    UnclaimedBudget(request) {
        const data = exports.QueryUnclaimedBudgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnclaimedBudget", data);
        return promise.then((data) => exports.QueryUnclaimedBudgetResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

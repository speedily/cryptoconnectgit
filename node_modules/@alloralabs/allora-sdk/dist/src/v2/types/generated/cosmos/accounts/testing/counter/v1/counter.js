"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/testing/counter/v1/counter.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryCounterResponse = exports.QueryCounterRequest = exports.MsgTestDependenciesResponse = exports.MsgTestDependencies = exports.MsgIncreaseCounterResponse = exports.MsgIncreaseCounter = exports.MsgInitResponse = exports.MsgInit = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const coin_1 = require("../../../../base/v1beta1/coin");
exports.protobufPackage = "cosmos.accounts.testing.counter.v1";
function createBaseMsgInit() {
    return { initialValue: "0" };
}
exports.MsgInit = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.initialValue !== "0") {
            writer.uint32(8).uint64(message.initialValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.initialValue = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { initialValue: isSet(object.initialValue) ? globalThis.String(object.initialValue) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.initialValue !== "0") {
            obj.initialValue = message.initialValue;
        }
        return obj;
    },
    create(base) {
        return exports.MsgInit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgInit();
        message.initialValue = (_a = object.initialValue) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseMsgInitResponse() {
    return {};
}
exports.MsgInitResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgInitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgInitResponse();
        return message;
    },
};
function createBaseMsgIncreaseCounter() {
    return { amount: "0" };
}
exports.MsgIncreaseCounter = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "0") {
            writer.uint32(8).uint64(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIncreaseCounter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.amount = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "0") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.MsgIncreaseCounter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgIncreaseCounter();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseMsgIncreaseCounterResponse() {
    return { newAmount: "0" };
}
exports.MsgIncreaseCounterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.newAmount !== "0") {
            writer.uint32(8).uint64(message.newAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIncreaseCounterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.newAmount = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newAmount: isSet(object.newAmount) ? globalThis.String(object.newAmount) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.newAmount !== "0") {
            obj.newAmount = message.newAmount;
        }
        return obj;
    },
    create(base) {
        return exports.MsgIncreaseCounterResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgIncreaseCounterResponse();
        message.newAmount = (_a = object.newAmount) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseMsgTestDependencies() {
    return {};
}
exports.MsgTestDependencies = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTestDependencies();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgTestDependencies.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgTestDependencies();
        return message;
    },
};
function createBaseMsgTestDependenciesResponse() {
    return { chainId: "", address: "", beforeGas: "0", afterGas: "0", funds: [] };
}
exports.MsgTestDependenciesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.beforeGas !== "0") {
            writer.uint32(24).uint64(message.beforeGas);
        }
        if (message.afterGas !== "0") {
            writer.uint32(32).uint64(message.afterGas);
        }
        for (const v of message.funds) {
            coin_1.Coin.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTestDependenciesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.beforeGas = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.afterGas = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            beforeGas: isSet(object.beforeGas) ? globalThis.String(object.beforeGas) : "0",
            afterGas: isSet(object.afterGas) ? globalThis.String(object.afterGas) : "0",
            funds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.funds) ? object.funds.map((e) => coin_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.beforeGas !== "0") {
            obj.beforeGas = message.beforeGas;
        }
        if (message.afterGas !== "0") {
            obj.afterGas = message.afterGas;
        }
        if ((_a = message.funds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.funds = message.funds.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgTestDependenciesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgTestDependenciesResponse();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.beforeGas = (_c = object.beforeGas) !== null && _c !== void 0 ? _c : "0";
        message.afterGas = (_d = object.afterGas) !== null && _d !== void 0 ? _d : "0";
        message.funds = ((_e = object.funds) === null || _e === void 0 ? void 0 : _e.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryCounterRequest() {
    return {};
}
exports.QueryCounterRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCounterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryCounterRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryCounterRequest();
        return message;
    },
};
function createBaseQueryCounterResponse() {
    return { value: "0" };
}
exports.QueryCounterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== "0") {
            writer.uint32(8).uint64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCounterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "0") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCounterResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCounterResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/interfaces/account_abstraction/v1/interface.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryAuthenticationMethodsResponse = exports.QueryAuthenticationMethods = exports.MsgAuthenticateResponse = exports.MsgAuthenticate = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const tx_1 = require("../../../../tx/v1beta1/tx");
exports.protobufPackage = "cosmos.accounts.interfaces.account_abstraction.v1";
function createBaseMsgAuthenticate() {
    return { bundler: "", rawTx: undefined, tx: undefined, signerIndex: 0 };
}
exports.MsgAuthenticate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bundler !== "") {
            writer.uint32(10).string(message.bundler);
        }
        if (message.rawTx !== undefined) {
            tx_1.TxRaw.encode(message.rawTx, writer.uint32(18).fork()).join();
        }
        if (message.tx !== undefined) {
            tx_1.Tx.encode(message.tx, writer.uint32(26).fork()).join();
        }
        if (message.signerIndex !== 0) {
            writer.uint32(32).uint32(message.signerIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAuthenticate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bundler = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rawTx = tx_1.TxRaw.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tx = tx_1.Tx.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.signerIndex = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundler: isSet(object.bundler) ? globalThis.String(object.bundler) : "",
            rawTx: isSet(object.rawTx) ? tx_1.TxRaw.fromJSON(object.rawTx) : undefined,
            tx: isSet(object.tx) ? tx_1.Tx.fromJSON(object.tx) : undefined,
            signerIndex: isSet(object.signerIndex) ? globalThis.Number(object.signerIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bundler !== "") {
            obj.bundler = message.bundler;
        }
        if (message.rawTx !== undefined) {
            obj.rawTx = tx_1.TxRaw.toJSON(message.rawTx);
        }
        if (message.tx !== undefined) {
            obj.tx = tx_1.Tx.toJSON(message.tx);
        }
        if (message.signerIndex !== 0) {
            obj.signerIndex = Math.round(message.signerIndex);
        }
        return obj;
    },
    create(base) {
        return exports.MsgAuthenticate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgAuthenticate();
        message.bundler = (_a = object.bundler) !== null && _a !== void 0 ? _a : "";
        message.rawTx = (object.rawTx !== undefined && object.rawTx !== null) ? tx_1.TxRaw.fromPartial(object.rawTx) : undefined;
        message.tx = (object.tx !== undefined && object.tx !== null) ? tx_1.Tx.fromPartial(object.tx) : undefined;
        message.signerIndex = (_b = object.signerIndex) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMsgAuthenticateResponse() {
    return {};
}
exports.MsgAuthenticateResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAuthenticateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgAuthenticateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgAuthenticateResponse();
        return message;
    },
};
function createBaseQueryAuthenticationMethods() {
    return {};
}
exports.QueryAuthenticationMethods = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAuthenticationMethods();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryAuthenticationMethods.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryAuthenticationMethods();
        return message;
    },
};
function createBaseQueryAuthenticationMethodsResponse() {
    return { authenticationMethods: [] };
}
exports.QueryAuthenticationMethodsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.authenticationMethods) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAuthenticationMethodsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authenticationMethods.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authenticationMethods: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.authenticationMethods)
                ? object.authenticationMethods.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.authenticationMethods) === null || _a === void 0 ? void 0 : _a.length) {
            obj.authenticationMethods = message.authenticationMethods;
        }
        return obj;
    },
    create(base) {
        return exports.QueryAuthenticationMethodsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryAuthenticationMethodsResponse();
        message.authenticationMethods = ((_a = object.authenticationMethods) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

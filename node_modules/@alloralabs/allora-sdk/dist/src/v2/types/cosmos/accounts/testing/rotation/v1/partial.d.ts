import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "cosmos.accounts.testing.rotation.v1";
/**
 * MsgInit is the init message used to create a new account
 * abstraction implementation that we use for testing, this account
 * also allows for rotating the public key.
 */
export interface MsgInit {
    pubKeyBytes: Uint8Array;
}
/** MsgInitResponse is the init message response. */
export interface MsgInitResponse {
}
/**
 * MsgRotatePubKey is the message used to swap the public key
 * of the account.
 */
export interface MsgRotatePubKey {
    newPubKeyBytes: Uint8Array;
}
/** MsgRotatePubKeyResponse is the MsgRotatePubKey response. */
export interface MsgRotatePubKeyResponse {
}
export declare const MsgInit: MessageFns<MsgInit>;
export declare const MsgInitResponse: MessageFns<MsgInitResponse>;
export declare const MsgRotatePubKey: MessageFns<MsgRotatePubKey>;
export declare const MsgRotatePubKeyResponse: MessageFns<MsgRotatePubKeyResponse>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=partial.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Tx, TxRaw } from "../../../../tx/v1beta1/tx";
export declare const protobufPackage = "cosmos.accounts.interfaces.account_abstraction.v1";
/**
 * MsgAuthenticate is a message that an x/account account abstraction implementer
 * must handle to authenticate a transaction. Always ensure the caller is the Accounts module.
 */
export interface MsgAuthenticate {
    /**
     * bundler defines the address of the bundler that sent the operation.
     * NOTE: in case the operation was sent directly by the user, this field will reflect
     * the user address.
     */
    bundler: string;
    /** raw_tx defines the raw version of the tx, this is useful to compute the signature quickly. */
    rawTx?: TxRaw | undefined;
    /** tx defines the decoded version of the tx, coming from raw_tx. */
    tx?: Tx | undefined;
    /**
     * signer_index defines the index of the signer in the tx.
     * Specifically this can be used to extract the signature at the correct
     * index.
     */
    signerIndex: number;
}
/**
 * MsgAuthenticateResponse is the response to MsgAuthenticate.
 * The authentication either fails or succeeds, this is why
 * there are no auxiliary fields to the response.
 */
export interface MsgAuthenticateResponse {
}
/**
 * QueryAuthenticationMethods is a query that an x/account account abstraction implementer
 * must handle to return the authentication methods that the account supports.
 */
export interface QueryAuthenticationMethods {
}
/** QueryAuthenticationMethodsResponse is the response to QueryAuthenticationMethods. */
export interface QueryAuthenticationMethodsResponse {
    /** authentication_methods are the authentication methods that the account supports. */
    authenticationMethods: string[];
}
export declare const MsgAuthenticate: MessageFns<MsgAuthenticate>;
export declare const MsgAuthenticateResponse: MessageFns<MsgAuthenticateResponse>;
export declare const QueryAuthenticationMethods: MessageFns<QueryAuthenticationMethods>;
export declare const QueryAuthenticationMethodsResponse: MessageFns<QueryAuthenticationMethodsResponse>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=interface.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "cosmos.authz.v1beta1";
/**
 * EventGrant is emitted on Msg/Grant
 *
 * Since: cosmos-sdk 0.43
 */
export interface EventGrant {
    /** Msg type URL for which an authorization is granted */
    msgTypeUrl: string;
    /** Granter account address */
    granter: string;
    /** Grantee account address */
    grantee: string;
}
/**
 * EventRevoke is emitted on Msg/Revoke
 *
 * Since: cosmos-sdk 0.43
 */
export interface EventRevoke {
    /** Msg type URL for which an authorization is revoked */
    msgTypeUrl: string;
    /** Granter account address */
    granter: string;
    /** Grantee account address */
    grantee: string;
}
/**
 * EventPruneExpiredGrants is emitted on Msg/PruneExpiredGrants
 *
 * Since: x/authz 1.0.0
 */
export interface EventPruneExpiredGrants {
    /** Address of the pruner */
    pruner: string;
}
export declare const EventGrant: MessageFns<EventGrant>;
export declare const EventRevoke: MessageFns<EventRevoke>;
export declare const EventPruneExpiredGrants: MessageFns<EventPruneExpiredGrants>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=event.d.ts.map
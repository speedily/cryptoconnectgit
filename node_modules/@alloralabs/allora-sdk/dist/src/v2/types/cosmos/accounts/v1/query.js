"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/v1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.AccountNumberResponse = exports.AccountNumberRequest = exports.AccountTypeResponse = exports.AccountTypeRequest = exports.SchemaResponse_Handler = exports.SchemaResponse = exports.SchemaRequest = exports.AccountQueryResponse = exports.AccountQueryRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const any_1 = require("../../../google/protobuf/any");
exports.protobufPackage = "cosmos.accounts.v1";
function createBaseAccountQueryRequest() {
    return { target: "", request: undefined };
}
exports.AccountQueryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.target !== "") {
            writer.uint32(10).string(message.target);
        }
        if (message.request !== undefined) {
            any_1.Any.encode(message.request, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.request = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            target: isSet(object.target) ? globalThis.String(object.target) : "",
            request: isSet(object.request) ? any_1.Any.fromJSON(object.request) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.target !== "") {
            obj.target = message.target;
        }
        if (message.request !== undefined) {
            obj.request = any_1.Any.toJSON(message.request);
        }
        return obj;
    },
    create(base) {
        return exports.AccountQueryRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAccountQueryRequest();
        message.target = (_a = object.target) !== null && _a !== void 0 ? _a : "";
        message.request = (object.request !== undefined && object.request !== null)
            ? any_1.Any.fromPartial(object.request)
            : undefined;
        return message;
    },
};
function createBaseAccountQueryResponse() {
    return { response: undefined };
}
exports.AccountQueryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== undefined) {
            any_1.Any.encode(message.response, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountQueryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.response = any_1.Any.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { response: isSet(object.response) ? any_1.Any.fromJSON(object.response) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== undefined) {
            obj.response = any_1.Any.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.AccountQueryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAccountQueryResponse();
        message.response = (object.response !== undefined && object.response !== null)
            ? any_1.Any.fromPartial(object.response)
            : undefined;
        return message;
    },
};
function createBaseSchemaRequest() {
    return { accountType: "" };
}
exports.SchemaRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountType !== "") {
            writer.uint32(10).string(message.accountType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSchemaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accountType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountType: isSet(object.accountType) ? globalThis.String(object.accountType) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountType !== "") {
            obj.accountType = message.accountType;
        }
        return obj;
    },
    create(base) {
        return exports.SchemaRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSchemaRequest();
        message.accountType = (_a = object.accountType) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseSchemaResponse() {
    return { initSchema: undefined, executeHandlers: [], queryHandlers: [] };
}
exports.SchemaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.initSchema !== undefined) {
            exports.SchemaResponse_Handler.encode(message.initSchema, writer.uint32(10).fork()).join();
        }
        for (const v of message.executeHandlers) {
            exports.SchemaResponse_Handler.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.queryHandlers) {
            exports.SchemaResponse_Handler.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.initSchema = exports.SchemaResponse_Handler.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.executeHandlers.push(exports.SchemaResponse_Handler.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queryHandlers.push(exports.SchemaResponse_Handler.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            initSchema: isSet(object.initSchema) ? exports.SchemaResponse_Handler.fromJSON(object.initSchema) : undefined,
            executeHandlers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.executeHandlers)
                ? object.executeHandlers.map((e) => exports.SchemaResponse_Handler.fromJSON(e))
                : [],
            queryHandlers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queryHandlers)
                ? object.queryHandlers.map((e) => exports.SchemaResponse_Handler.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.initSchema !== undefined) {
            obj.initSchema = exports.SchemaResponse_Handler.toJSON(message.initSchema);
        }
        if ((_a = message.executeHandlers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.executeHandlers = message.executeHandlers.map((e) => exports.SchemaResponse_Handler.toJSON(e));
        }
        if ((_b = message.queryHandlers) === null || _b === void 0 ? void 0 : _b.length) {
            obj.queryHandlers = message.queryHandlers.map((e) => exports.SchemaResponse_Handler.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SchemaResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSchemaResponse();
        message.initSchema = (object.initSchema !== undefined && object.initSchema !== null)
            ? exports.SchemaResponse_Handler.fromPartial(object.initSchema)
            : undefined;
        message.executeHandlers = ((_a = object.executeHandlers) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SchemaResponse_Handler.fromPartial(e))) || [];
        message.queryHandlers = ((_b = object.queryHandlers) === null || _b === void 0 ? void 0 : _b.map((e) => exports.SchemaResponse_Handler.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSchemaResponse_Handler() {
    return { request: "", response: "" };
}
exports.SchemaResponse_Handler = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.request !== "") {
            writer.uint32(10).string(message.request);
        }
        if (message.response !== "") {
            writer.uint32(18).string(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSchemaResponse_Handler();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.request = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? globalThis.String(object.request) : "",
            response: isSet(object.response) ? globalThis.String(object.response) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== "") {
            obj.request = message.request;
        }
        if (message.response !== "") {
            obj.response = message.response;
        }
        return obj;
    },
    create(base) {
        return exports.SchemaResponse_Handler.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSchemaResponse_Handler();
        message.request = (_a = object.request) !== null && _a !== void 0 ? _a : "";
        message.response = (_b = object.response) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAccountTypeRequest() {
    return { address: "" };
}
exports.AccountTypeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountTypeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AccountTypeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAccountTypeRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAccountTypeResponse() {
    return { accountType: "" };
}
exports.AccountTypeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountType !== "") {
            writer.uint32(10).string(message.accountType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountTypeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accountType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountType: isSet(object.accountType) ? globalThis.String(object.accountType) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountType !== "") {
            obj.accountType = message.accountType;
        }
        return obj;
    },
    create(base) {
        return exports.AccountTypeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAccountTypeResponse();
        message.accountType = (_a = object.accountType) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAccountNumberRequest() {
    return { address: "" };
}
exports.AccountNumberRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountNumberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.AccountNumberRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAccountNumberRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAccountNumberResponse() {
    return { number: "0" };
}
exports.AccountNumberResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.number !== "0") {
            writer.uint32(8).uint64(message.number);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountNumberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.number = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { number: isSet(object.number) ? globalThis.String(object.number) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.number !== "0") {
            obj.number = message.number;
        }
        return obj;
    },
    create(base) {
        return exports.AccountNumberResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAccountNumberResponse();
        message.number = (_a = object.number) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
exports.QueryServiceName = "cosmos.accounts.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.AccountQuery = this.AccountQuery.bind(this);
        this.Schema = this.Schema.bind(this);
        this.AccountType = this.AccountType.bind(this);
        this.AccountNumber = this.AccountNumber.bind(this);
    }
    AccountQuery(request) {
        const data = exports.AccountQueryRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AccountQuery", data);
        return promise.then((data) => exports.AccountQueryResponse.decode(new wire_1.BinaryReader(data)));
    }
    Schema(request) {
        const data = exports.SchemaRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Schema", data);
        return promise.then((data) => exports.SchemaResponse.decode(new wire_1.BinaryReader(data)));
    }
    AccountType(request) {
        const data = exports.AccountTypeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AccountType", data);
        return promise.then((data) => exports.AccountTypeResponse.decode(new wire_1.BinaryReader(data)));
    }
    AccountNumber(request) {
        const data = exports.AccountNumberRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AccountNumber", data);
        return promise.then((data) => exports.AccountNumberResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

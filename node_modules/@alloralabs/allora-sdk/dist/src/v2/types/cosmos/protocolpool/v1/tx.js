"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/protocolpool/v1/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgWithdrawContinuousFundResponse = exports.MsgWithdrawContinuousFund = exports.MsgCancelContinuousFundResponse = exports.MsgCancelContinuousFund = exports.MsgCreateContinuousFundResponse = exports.MsgCreateContinuousFund = exports.MsgClaimBudgetResponse = exports.MsgClaimBudget = exports.MsgSubmitBudgetProposalResponse = exports.MsgSubmitBudgetProposal = exports.MsgCommunityPoolSpendResponse = exports.MsgCommunityPoolSpend = exports.MsgFundCommunityPoolResponse = exports.MsgFundCommunityPool = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const coin_1 = require("../../base/v1beta1/coin");
exports.protobufPackage = "cosmos.protocolpool.v1";
function createBaseMsgFundCommunityPool() {
    return { amount: [], depositor: "" };
}
exports.MsgFundCommunityPool = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.amount) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.depositor !== "") {
            writer.uint32(18).string(message.depositor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFundCommunityPool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.depositor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
            depositor: isSet(object.depositor) ? globalThis.String(object.depositor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.amount) === null || _a === void 0 ? void 0 : _a.length) {
            obj.amount = message.amount.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.depositor !== "") {
            obj.depositor = message.depositor;
        }
        return obj;
    },
    create(base) {
        return exports.MsgFundCommunityPool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgFundCommunityPool();
        message.amount = ((_a = object.amount) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.depositor = (_b = object.depositor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgFundCommunityPoolResponse() {
    return {};
}
exports.MsgFundCommunityPoolResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFundCommunityPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgFundCommunityPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgFundCommunityPoolResponse();
        return message;
    },
};
function createBaseMsgCommunityPoolSpend() {
    return { authority: "", recipient: "", amount: [] };
}
exports.MsgCommunityPoolSpend = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        for (const v of message.amount) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCommunityPoolSpend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
            amount: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        if ((_a = message.amount) === null || _a === void 0 ? void 0 : _a.length) {
            obj.amount = message.amount.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCommunityPoolSpend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgCommunityPoolSpend();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.recipient = (_b = object.recipient) !== null && _b !== void 0 ? _b : "";
        message.amount = ((_c = object.amount) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgCommunityPoolSpendResponse() {
    return {};
}
exports.MsgCommunityPoolSpendResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCommunityPoolSpendResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgCommunityPoolSpendResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgCommunityPoolSpendResponse();
        return message;
    },
};
function createBaseMsgSubmitBudgetProposal() {
    return {
        authority: "",
        recipientAddress: "",
        totalBudget: undefined,
        startTime: undefined,
        tranches: "0",
        period: undefined,
    };
}
exports.MsgSubmitBudgetProposal = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.recipientAddress !== "") {
            writer.uint32(18).string(message.recipientAddress);
        }
        if (message.totalBudget !== undefined) {
            coin_1.Coin.encode(message.totalBudget, writer.uint32(26).fork()).join();
        }
        if (message.startTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
        }
        if (message.tranches !== "0") {
            writer.uint32(40).uint64(message.tranches);
        }
        if (message.period !== undefined) {
            duration_1.Duration.encode(message.period, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSubmitBudgetProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.recipientAddress = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.totalBudget = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.tranches = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.period = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "",
            totalBudget: isSet(object.totalBudget) ? coin_1.Coin.fromJSON(object.totalBudget) : undefined,
            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
            tranches: isSet(object.tranches) ? globalThis.String(object.tranches) : "0",
            period: isSet(object.period) ? duration_1.Duration.fromJSON(object.period) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.recipientAddress !== "") {
            obj.recipientAddress = message.recipientAddress;
        }
        if (message.totalBudget !== undefined) {
            obj.totalBudget = coin_1.Coin.toJSON(message.totalBudget);
        }
        if (message.startTime !== undefined) {
            obj.startTime = message.startTime.toISOString();
        }
        if (message.tranches !== "0") {
            obj.tranches = message.tranches;
        }
        if (message.period !== undefined) {
            obj.period = duration_1.Duration.toJSON(message.period);
        }
        return obj;
    },
    create(base) {
        return exports.MsgSubmitBudgetProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgSubmitBudgetProposal();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.recipientAddress = (_b = object.recipientAddress) !== null && _b !== void 0 ? _b : "";
        message.totalBudget = (object.totalBudget !== undefined && object.totalBudget !== null)
            ? coin_1.Coin.fromPartial(object.totalBudget)
            : undefined;
        message.startTime = (_c = object.startTime) !== null && _c !== void 0 ? _c : undefined;
        message.tranches = (_d = object.tranches) !== null && _d !== void 0 ? _d : "0";
        message.period = (object.period !== undefined && object.period !== null)
            ? duration_1.Duration.fromPartial(object.period)
            : undefined;
        return message;
    },
};
function createBaseMsgSubmitBudgetProposalResponse() {
    return {};
}
exports.MsgSubmitBudgetProposalResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSubmitBudgetProposalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgSubmitBudgetProposalResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgSubmitBudgetProposalResponse();
        return message;
    },
};
function createBaseMsgClaimBudget() {
    return { recipientAddress: "" };
}
exports.MsgClaimBudget = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.recipientAddress !== "") {
            writer.uint32(10).string(message.recipientAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimBudget();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.recipientAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.recipientAddress !== "") {
            obj.recipientAddress = message.recipientAddress;
        }
        return obj;
    },
    create(base) {
        return exports.MsgClaimBudget.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgClaimBudget();
        message.recipientAddress = (_a = object.recipientAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMsgClaimBudgetResponse() {
    return { amount: undefined };
}
exports.MsgClaimBudgetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimBudgetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        return obj;
    },
    create(base) {
        return exports.MsgClaimBudgetResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMsgClaimBudgetResponse();
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? coin_1.Coin.fromPartial(object.amount)
            : undefined;
        return message;
    },
};
function createBaseMsgCreateContinuousFund() {
    return { authority: "", recipient: "", percentage: "", expiry: undefined };
}
exports.MsgCreateContinuousFund = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        if (message.percentage !== "") {
            writer.uint32(26).string(message.percentage);
        }
        if (message.expiry !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expiry), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateContinuousFund();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.percentage = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.expiry = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
            percentage: isSet(object.percentage) ? globalThis.String(object.percentage) : "",
            expiry: isSet(object.expiry) ? fromJsonTimestamp(object.expiry) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        if (message.percentage !== "") {
            obj.percentage = message.percentage;
        }
        if (message.expiry !== undefined) {
            obj.expiry = message.expiry.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateContinuousFund.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgCreateContinuousFund();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.recipient = (_b = object.recipient) !== null && _b !== void 0 ? _b : "";
        message.percentage = (_c = object.percentage) !== null && _c !== void 0 ? _c : "";
        message.expiry = (_d = object.expiry) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseMsgCreateContinuousFundResponse() {
    return {};
}
exports.MsgCreateContinuousFundResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateContinuousFundResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgCreateContinuousFundResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgCreateContinuousFundResponse();
        return message;
    },
};
function createBaseMsgCancelContinuousFund() {
    return { authority: "", recipientAddress: "" };
}
exports.MsgCancelContinuousFund = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.recipientAddress !== "") {
            writer.uint32(18).string(message.recipientAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelContinuousFund();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.recipientAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.recipientAddress !== "") {
            obj.recipientAddress = message.recipientAddress;
        }
        return obj;
    },
    create(base) {
        return exports.MsgCancelContinuousFund.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgCancelContinuousFund();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.recipientAddress = (_b = object.recipientAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgCancelContinuousFundResponse() {
    return { canceledTime: undefined, canceledHeight: "0", recipientAddress: "", withdrawnAllocatedFund: undefined };
}
exports.MsgCancelContinuousFundResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.canceledTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.canceledTime), writer.uint32(10).fork()).join();
        }
        if (message.canceledHeight !== "0") {
            writer.uint32(16).uint64(message.canceledHeight);
        }
        if (message.recipientAddress !== "") {
            writer.uint32(26).string(message.recipientAddress);
        }
        if (message.withdrawnAllocatedFund !== undefined) {
            coin_1.Coin.encode(message.withdrawnAllocatedFund, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelContinuousFundResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.canceledTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.canceledHeight = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.recipientAddress = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.withdrawnAllocatedFund = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            canceledTime: isSet(object.canceledTime) ? fromJsonTimestamp(object.canceledTime) : undefined,
            canceledHeight: isSet(object.canceledHeight) ? globalThis.String(object.canceledHeight) : "0",
            recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "",
            withdrawnAllocatedFund: isSet(object.withdrawnAllocatedFund)
                ? coin_1.Coin.fromJSON(object.withdrawnAllocatedFund)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.canceledTime !== undefined) {
            obj.canceledTime = message.canceledTime.toISOString();
        }
        if (message.canceledHeight !== "0") {
            obj.canceledHeight = message.canceledHeight;
        }
        if (message.recipientAddress !== "") {
            obj.recipientAddress = message.recipientAddress;
        }
        if (message.withdrawnAllocatedFund !== undefined) {
            obj.withdrawnAllocatedFund = coin_1.Coin.toJSON(message.withdrawnAllocatedFund);
        }
        return obj;
    },
    create(base) {
        return exports.MsgCancelContinuousFundResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgCancelContinuousFundResponse();
        message.canceledTime = (_a = object.canceledTime) !== null && _a !== void 0 ? _a : undefined;
        message.canceledHeight = (_b = object.canceledHeight) !== null && _b !== void 0 ? _b : "0";
        message.recipientAddress = (_c = object.recipientAddress) !== null && _c !== void 0 ? _c : "";
        message.withdrawnAllocatedFund =
            (object.withdrawnAllocatedFund !== undefined && object.withdrawnAllocatedFund !== null)
                ? coin_1.Coin.fromPartial(object.withdrawnAllocatedFund)
                : undefined;
        return message;
    },
};
function createBaseMsgWithdrawContinuousFund() {
    return { recipientAddress: "" };
}
exports.MsgWithdrawContinuousFund = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.recipientAddress !== "") {
            writer.uint32(10).string(message.recipientAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawContinuousFund();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.recipientAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.recipientAddress !== "") {
            obj.recipientAddress = message.recipientAddress;
        }
        return obj;
    },
    create(base) {
        return exports.MsgWithdrawContinuousFund.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgWithdrawContinuousFund();
        message.recipientAddress = (_a = object.recipientAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMsgWithdrawContinuousFundResponse() {
    return { amount: undefined };
}
exports.MsgWithdrawContinuousFundResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawContinuousFundResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        return obj;
    },
    create(base) {
        return exports.MsgWithdrawContinuousFundResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMsgWithdrawContinuousFundResponse();
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? coin_1.Coin.fromPartial(object.amount)
            : undefined;
        return message;
    },
};
exports.MsgServiceName = "cosmos.protocolpool.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.FundCommunityPool = this.FundCommunityPool.bind(this);
        this.CommunityPoolSpend = this.CommunityPoolSpend.bind(this);
        this.SubmitBudgetProposal = this.SubmitBudgetProposal.bind(this);
        this.ClaimBudget = this.ClaimBudget.bind(this);
        this.CreateContinuousFund = this.CreateContinuousFund.bind(this);
        this.WithdrawContinuousFund = this.WithdrawContinuousFund.bind(this);
        this.CancelContinuousFund = this.CancelContinuousFund.bind(this);
    }
    FundCommunityPool(request) {
        const data = exports.MsgFundCommunityPool.encode(request).finish();
        const promise = this.rpc.request(this.service, "FundCommunityPool", data);
        return promise.then((data) => exports.MsgFundCommunityPoolResponse.decode(new wire_1.BinaryReader(data)));
    }
    CommunityPoolSpend(request) {
        const data = exports.MsgCommunityPoolSpend.encode(request).finish();
        const promise = this.rpc.request(this.service, "CommunityPoolSpend", data);
        return promise.then((data) => exports.MsgCommunityPoolSpendResponse.decode(new wire_1.BinaryReader(data)));
    }
    SubmitBudgetProposal(request) {
        const data = exports.MsgSubmitBudgetProposal.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubmitBudgetProposal", data);
        return promise.then((data) => exports.MsgSubmitBudgetProposalResponse.decode(new wire_1.BinaryReader(data)));
    }
    ClaimBudget(request) {
        const data = exports.MsgClaimBudget.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClaimBudget", data);
        return promise.then((data) => exports.MsgClaimBudgetResponse.decode(new wire_1.BinaryReader(data)));
    }
    CreateContinuousFund(request) {
        const data = exports.MsgCreateContinuousFund.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateContinuousFund", data);
        return promise.then((data) => exports.MsgCreateContinuousFundResponse.decode(new wire_1.BinaryReader(data)));
    }
    WithdrawContinuousFund(request) {
        const data = exports.MsgWithdrawContinuousFund.encode(request).finish();
        const promise = this.rpc.request(this.service, "WithdrawContinuousFund", data);
        return promise.then((data) => exports.MsgWithdrawContinuousFundResponse.decode(new wire_1.BinaryReader(data)));
    }
    CancelContinuousFund(request) {
        const data = exports.MsgCancelContinuousFund.encode(request).finish();
        const promise = this.rpc.request(this.service, "CancelContinuousFund", data);
        return promise.then((data) => exports.MsgCancelContinuousFundResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

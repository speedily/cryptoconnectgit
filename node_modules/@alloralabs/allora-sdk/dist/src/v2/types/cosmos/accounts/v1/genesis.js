"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cosmos/accounts/v1/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.KVPair = exports.GenesisAccount = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "cosmos.accounts.v1";
function createBaseGenesisState() {
    return { accountNumber: "0", accounts: [] };
}
exports.GenesisState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountNumber !== "0") {
            writer.uint32(8).uint64(message.accountNumber);
        }
        for (const v of message.accounts) {
            exports.GenesisAccount.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountNumber = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(exports.GenesisAccount.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "0",
            accounts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.accounts)
                ? object.accounts.map((e) => exports.GenesisAccount.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.accountNumber !== "0") {
            obj.accountNumber = message.accountNumber;
        }
        if ((_a = message.accounts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.accounts = message.accounts.map((e) => exports.GenesisAccount.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGenesisState();
        message.accountNumber = (_a = object.accountNumber) !== null && _a !== void 0 ? _a : "0";
        message.accounts = ((_b = object.accounts) === null || _b === void 0 ? void 0 : _b.map((e) => exports.GenesisAccount.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGenesisAccount() {
    return { address: "", accountType: "", accountNumber: "0", state: [] };
}
exports.GenesisAccount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.accountType !== "") {
            writer.uint32(18).string(message.accountType);
        }
        if (message.accountNumber !== "0") {
            writer.uint32(24).uint64(message.accountNumber);
        }
        for (const v of message.state) {
            exports.KVPair.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.accountNumber = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.state.push(exports.KVPair.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            accountType: isSet(object.accountType) ? globalThis.String(object.accountType) : "",
            accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "0",
            state: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.state) ? object.state.map((e) => exports.KVPair.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.accountType !== "") {
            obj.accountType = message.accountType;
        }
        if (message.accountNumber !== "0") {
            obj.accountNumber = message.accountNumber;
        }
        if ((_a = message.state) === null || _a === void 0 ? void 0 : _a.length) {
            obj.state = message.state.map((e) => exports.KVPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisAccount.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGenesisAccount();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.accountType = (_b = object.accountType) !== null && _b !== void 0 ? _b : "";
        message.accountNumber = (_c = object.accountNumber) !== null && _c !== void 0 ? _c : "0";
        message.state = ((_d = object.state) === null || _d === void 0 ? void 0 : _d.map((e) => exports.KVPair.fromPartial(e))) || [];
        return message;
    },
};
function createBaseKVPair() {
    return { key: new Uint8Array(0), value: new Uint8Array(0) };
}
exports.KVPair = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKVPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.KVPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseKVPair();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

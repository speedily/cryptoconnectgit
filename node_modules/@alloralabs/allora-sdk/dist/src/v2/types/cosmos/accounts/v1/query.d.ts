import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
export declare const protobufPackage = "cosmos.accounts.v1";
/** AccountQueryRequest is the request type for the Query/AccountQuery RPC */
export interface AccountQueryRequest {
    /** target defines the account to be queried. */
    target: string;
    /** request defines the query message being sent to the account. */
    request?: Any | undefined;
}
/** AccountQueryResponse is the response type for the Query/AccountQuery RPC method. */
export interface AccountQueryResponse {
    /** response defines the query response of the account. */
    response?: Any | undefined;
}
/** SchemaResponse is the response type for the Query/Schema RPC method. */
export interface SchemaRequest {
    /** account_type defines the account type to query the schema for. */
    accountType: string;
}
/** SchemaResponse is the response type for the Query/Schema RPC method. */
export interface SchemaResponse {
    /** init_schema defines the schema descriptor for the Init account method. */
    initSchema?: SchemaResponse_Handler | undefined;
    /** execute_handlers defines the schema descriptor for the Execute account method. */
    executeHandlers: SchemaResponse_Handler[];
    /** query_handlers defines the schema descriptor for the Query account method. */
    queryHandlers: SchemaResponse_Handler[];
}
/**
 * Handler defines a schema descriptor for a handler.
 * Where request and response are names that can be used to lookup the
 * reflection descriptor.
 */
export interface SchemaResponse_Handler {
    /** request is the request name */
    request: string;
    /** response is the response name */
    response: string;
}
/** AccountTypeRequest is the request type for the Query/AccountType RPC method. */
export interface AccountTypeRequest {
    /** address defines the address to query the account type for. */
    address: string;
}
/** AccountTypeResponse is the response type for the Query/AccountType RPC method. */
export interface AccountTypeResponse {
    /** account_type defines the account type for the address. */
    accountType: string;
}
/** AccountNumberRequest returns the account number given the address. */
export interface AccountNumberRequest {
    /** address is the address of the account we want to know the number of. */
    address: string;
}
/**
 * AccountNumberResponse is the response returned when querying the
 * account number by address.
 */
export interface AccountNumberResponse {
    /** number is the account number of the provided address. */
    number: string;
}
export declare const AccountQueryRequest: MessageFns<AccountQueryRequest>;
export declare const AccountQueryResponse: MessageFns<AccountQueryResponse>;
export declare const SchemaRequest: MessageFns<SchemaRequest>;
export declare const SchemaResponse: MessageFns<SchemaResponse>;
export declare const SchemaResponse_Handler: MessageFns<SchemaResponse_Handler>;
export declare const AccountTypeRequest: MessageFns<AccountTypeRequest>;
export declare const AccountTypeResponse: MessageFns<AccountTypeResponse>;
export declare const AccountNumberRequest: MessageFns<AccountNumberRequest>;
export declare const AccountNumberResponse: MessageFns<AccountNumberResponse>;
/** Query defines the Query service for the x/accounts module. */
export interface Query {
    /** AccountQuery runs an account query. */
    AccountQuery(request: AccountQueryRequest): Promise<AccountQueryResponse>;
    /** Schema returns an x/account schema. Unstable. */
    Schema(request: SchemaRequest): Promise<SchemaResponse>;
    /** AccountType returns the account type for an address. */
    AccountType(request: AccountTypeRequest): Promise<AccountTypeResponse>;
    /** AccountNumber returns the account number given the account address. */
    AccountNumber(request: AccountNumberRequest): Promise<AccountNumberResponse>;
}
export declare const QueryServiceName = "cosmos.accounts.v1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AccountQuery(request: AccountQueryRequest): Promise<AccountQueryResponse>;
    Schema(request: SchemaRequest): Promise<SchemaResponse>;
    AccountType(request: AccountTypeRequest): Promise<AccountTypeResponse>;
    AccountNumber(request: AccountNumberRequest): Promise<AccountNumberResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=query.d.ts.map
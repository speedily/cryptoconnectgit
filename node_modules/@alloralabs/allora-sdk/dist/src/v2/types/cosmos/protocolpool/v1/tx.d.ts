import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../base/v1beta1/coin";
export declare const protobufPackage = "cosmos.protocolpool.v1";
/**
 * MsgFundCommunityPool allows an account to directly
 * fund the community pool.
 */
export interface MsgFundCommunityPool {
    amount: Coin[];
    depositor: string;
}
/** MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type. */
export interface MsgFundCommunityPoolResponse {
}
/**
 * MsgCommunityPoolSpend defines a message for sending tokens from the community
 * pool to another account. This message is typically executed via a governance
 * proposal with the governance module being the executing authority.
 */
export interface MsgCommunityPoolSpend {
    /** Authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    recipient: string;
    amount: Coin[];
}
/**
 * MsgCommunityPoolSpendResponse defines the response to executing a
 * MsgCommunityPoolSpend message.
 */
export interface MsgCommunityPoolSpendResponse {
}
/** MsgSubmitBudgetProposal defines budget proposal type. */
export interface MsgSubmitBudgetProposal {
    /** Authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /** RecipientAddress is the address of the recipient who can claim the budget. */
    recipientAddress: string;
    /** TotalBudget is the total amount allocated for the budget. */
    totalBudget?: Coin | undefined;
    /**
     * StartTime is the time when the budget becomes claimable.
     * If StartTime is less than the current block time, proposal will not be accepted.
     */
    startTime?: Date | undefined;
    /** Tranches is the number of times the total budget amount is to be distributed. */
    tranches: string;
    /**
     * Period is the time interval(number of seconds) at which funds distribution should be performed.
     * For example, if a period is set to 3600, it represents an action that
     * should occur every hour (3600 seconds).
     */
    period?: Duration | undefined;
}
/**
 * MsgSubmitBudgetProposalResponse defines the response to executing a
 * MsgSubmitBudgetProposal message.
 */
export interface MsgSubmitBudgetProposalResponse {
}
/** MsgClaimBudget defines a message for claiming the distributed budget. */
export interface MsgClaimBudget {
    recipientAddress: string;
}
/**
 * MsgClaimBudgetResponse defines the response to executing a
 * MsgClaimBudget message.
 */
export interface MsgClaimBudgetResponse {
    amount?: Coin | undefined;
}
/** MsgCreateContinuousFund defines a message for adding continuous funds. */
export interface MsgCreateContinuousFund {
    /** Authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /** Recipient address of the account receiving funds. */
    recipient: string;
    /** Percentage is the percentage of funds to be allocated from Community pool. */
    percentage: string;
    /** Optional, if expiry is set, removes the state object when expired. */
    expiry?: Date | undefined;
}
/**
 * MsgCreateContinuousFundResponse defines the response to executing a
 * MsgCreateContinuousFund message.
 */
export interface MsgCreateContinuousFundResponse {
}
/** MsgCancelContinuousFund defines a message to cancel continuous funds for a specific recipient. */
export interface MsgCancelContinuousFund {
    /** Authority is the account address of authority. */
    authority: string;
    /** RecipientAddress is the account address of recipient whose funds are to be cancelled. */
    recipientAddress: string;
}
/**
 * MsgCancelContinuousFundResponse defines the response to executing a
 * MsgCancelContinuousFund message.
 */
export interface MsgCancelContinuousFundResponse {
    /** CanceledTime is the canceled time. */
    canceledTime?: Date | undefined;
    /** CanceledHeight defines the canceled block height. */
    canceledHeight: string;
    /** RecipientAddress is the account address of recipient whose funds are cancelled. */
    recipientAddress: string;
    /**
     * withdrawnAllocatedFund represents the fund allocated to this recipient (if any) that have not been withdrawn yet,
     * before a cancellation request has been initiated.
     * It involves first withdrawing the funds and then canceling the request.
     */
    withdrawnAllocatedFund?: Coin | undefined;
}
/** MsgWithdrawContinuousFund defines a message for withdrawing the continuous fund allocated to it. */
export interface MsgWithdrawContinuousFund {
    recipientAddress: string;
}
/**
 * MsgWithdrawContinuousFundResponse defines the response to executing a
 * MsgWithdrawContinuousFund message.
 */
export interface MsgWithdrawContinuousFundResponse {
    amount?: Coin | undefined;
}
export declare const MsgFundCommunityPool: MessageFns<MsgFundCommunityPool>;
export declare const MsgFundCommunityPoolResponse: MessageFns<MsgFundCommunityPoolResponse>;
export declare const MsgCommunityPoolSpend: MessageFns<MsgCommunityPoolSpend>;
export declare const MsgCommunityPoolSpendResponse: MessageFns<MsgCommunityPoolSpendResponse>;
export declare const MsgSubmitBudgetProposal: MessageFns<MsgSubmitBudgetProposal>;
export declare const MsgSubmitBudgetProposalResponse: MessageFns<MsgSubmitBudgetProposalResponse>;
export declare const MsgClaimBudget: MessageFns<MsgClaimBudget>;
export declare const MsgClaimBudgetResponse: MessageFns<MsgClaimBudgetResponse>;
export declare const MsgCreateContinuousFund: MessageFns<MsgCreateContinuousFund>;
export declare const MsgCreateContinuousFundResponse: MessageFns<MsgCreateContinuousFundResponse>;
export declare const MsgCancelContinuousFund: MessageFns<MsgCancelContinuousFund>;
export declare const MsgCancelContinuousFundResponse: MessageFns<MsgCancelContinuousFundResponse>;
export declare const MsgWithdrawContinuousFund: MessageFns<MsgWithdrawContinuousFund>;
export declare const MsgWithdrawContinuousFundResponse: MessageFns<MsgWithdrawContinuousFundResponse>;
/** Msg defines the pool Msg service. */
export interface Msg {
    /**
     * FundCommunityPool defines a method to allow an account to directly
     * fund the community pool.
     */
    FundCommunityPool(request: MsgFundCommunityPool): Promise<MsgFundCommunityPoolResponse>;
    /**
     * CommunityPoolSpend defines a governance operation for sending tokens from
     * the community pool in the x/protocolpool module to another account, which
     * could be the governance module itself. The authority is defined in the
     * keeper.
     */
    CommunityPoolSpend(request: MsgCommunityPoolSpend): Promise<MsgCommunityPoolSpendResponse>;
    /** SubmitBudgetProposal defines a method to set a budget proposal. */
    SubmitBudgetProposal(request: MsgSubmitBudgetProposal): Promise<MsgSubmitBudgetProposalResponse>;
    /** ClaimBudget defines a method to claim the distributed budget. */
    ClaimBudget(request: MsgClaimBudget): Promise<MsgClaimBudgetResponse>;
    /** CreateContinuousFund defines a method to add funds continuously. */
    CreateContinuousFund(request: MsgCreateContinuousFund): Promise<MsgCreateContinuousFundResponse>;
    /** WithdrawContinuousFund defines a method to withdraw continuous fund allocated. */
    WithdrawContinuousFund(request: MsgWithdrawContinuousFund): Promise<MsgWithdrawContinuousFundResponse>;
    /** CancelContinuousFund defines a method for cancelling continuous fund. */
    CancelContinuousFund(request: MsgCancelContinuousFund): Promise<MsgCancelContinuousFundResponse>;
}
export declare const MsgServiceName = "cosmos.protocolpool.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    FundCommunityPool(request: MsgFundCommunityPool): Promise<MsgFundCommunityPoolResponse>;
    CommunityPoolSpend(request: MsgCommunityPoolSpend): Promise<MsgCommunityPoolSpendResponse>;
    SubmitBudgetProposal(request: MsgSubmitBudgetProposal): Promise<MsgSubmitBudgetProposalResponse>;
    ClaimBudget(request: MsgClaimBudget): Promise<MsgClaimBudgetResponse>;
    CreateContinuousFund(request: MsgCreateContinuousFund): Promise<MsgCreateContinuousFundResponse>;
    WithdrawContinuousFund(request: MsgWithdrawContinuousFund): Promise<MsgWithdrawContinuousFundResponse>;
    CancelContinuousFund(request: MsgCancelContinuousFund): Promise<MsgCancelContinuousFundResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=tx.d.ts.map
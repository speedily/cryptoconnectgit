import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ReputerValueBundle } from "../v3/reputer";
import { WorkerDataBundle } from "../v3/worker";
export declare const protobufPackage = "emissions.v4";
/**
 * Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
 * and including google themselves
 * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
 * we instead use a repeated field with a single element to represent an
 * optional field and if the repeated field is empty, it is considered to be the
 * same as if the field was not set
 */
export interface OptionalParams {
    version: string[];
    maxSerializedMsgLength: string[];
    minTopicWeight: string[];
    requiredMinimumStake: string[];
    removeStakeDelayWindow: string[];
    minEpochLength: string[];
    betaEntropy: string[];
    learningRate: string[];
    maxGradientThreshold: string[];
    minStakeFraction: string[];
    maxUnfulfilledWorkerRequests: string[];
    maxUnfulfilledReputerRequests: string[];
    topicRewardStakeImportance: string[];
    topicRewardFeeRevenueImportance: string[];
    topicRewardAlpha: string[];
    taskRewardAlpha: string[];
    validatorsVsAlloraPercentReward: string[];
    maxSamplesToScaleScores: string[];
    maxTopInferersToReward: string[];
    maxTopForecastersToReward: string[];
    maxTopReputersToReward: string[];
    createTopicFee: string[];
    gradientDescentMaxIters: string[];
    registrationFee: string[];
    defaultPageLimit: string[];
    maxPageLimit: string[];
    minEpochLengthRecordLimit: string[];
    blocksPerMonth: string[];
    pRewardInference: string[];
    pRewardForecast: string[];
    pRewardReputer: string[];
    cRewardInference: string[];
    cRewardForecast: string[];
    cNorm: string[];
    epsilonReputer: string[];
    halfMaxProcessStakeRemovalsEndBlock: string[];
    dataSendingFee: string[];
    epsilonSafeDiv: string[];
    maxElementsPerForecast: string[];
    maxActiveTopicsPerBlock: string[];
    maxStringLength: string[];
}
export interface UpdateParamsRequest {
    sender: string;
    params?: OptionalParams | undefined;
}
export interface UpdateParamsResponse {
}
export interface CreateNewTopicRequest {
    /** creator is the message sender. */
    creator: string;
    metadata: string;
    lossMethod: string;
    epochLength: string;
    groundTruthLag: string;
    pNorm: string;
    alphaRegret: string;
    allowNegative: boolean;
    epsilon: string;
    workerSubmissionWindow: string;
    meritSortitionAlpha: string;
    activeInfererQuantile: string;
    activeForecasterQuantile: string;
    activeReputerQuantile: string;
}
export interface CreateNewTopicResponse {
    topicId: string;
}
export interface InsertReputerPayloadRequest {
    sender: string;
    reputerValueBundle?: ReputerValueBundle | undefined;
}
export interface InsertReputerPayloadResponse {
}
export interface InsertWorkerPayloadRequest {
    sender: string;
    workerDataBundle?: WorkerDataBundle | undefined;
}
export interface InsertWorkerPayloadResponse {
}
export interface RegisterRequest {
    sender: string;
    topicId: string;
    owner: string;
    isReputer: boolean;
}
export interface RegisterResponse {
    success: boolean;
    message: string;
}
export interface RemoveRegistrationRequest {
    sender: string;
    topicId: string;
    isReputer: boolean;
}
export interface RemoveRegistrationResponse {
    success: boolean;
    message: string;
}
export interface AddStakeRequest {
    sender: string;
    topicId: string;
    amount: string;
}
export interface AddStakeResponse {
}
export interface RemoveStakeRequest {
    sender: string;
    topicId: string;
    amount: string;
}
export interface RemoveStakeResponse {
}
export interface CancelRemoveStakeRequest {
    sender: string;
    topicId: string;
}
export interface CancelRemoveStakeResponse {
}
export interface DelegateStakeRequest {
    sender: string;
    topicId: string;
    reputer: string;
    amount: string;
}
export interface DelegateStakeResponse {
}
export interface RemoveDelegateStakeRequest {
    sender: string;
    reputer: string;
    topicId: string;
    amount: string;
}
export interface RemoveDelegateStakeResponse {
}
export interface CancelRemoveDelegateStakeRequest {
    sender: string;
    topicId: string;
    delegator: string;
    reputer: string;
}
export interface CancelRemoveDelegateStakeResponse {
}
/**
 * Inferences are requested by consumers who fund topics by sending ALLO to
 * ecosystem account via TopicFund messages
 */
export interface FundTopicRequest {
    sender: string;
    topicId: string;
    /** how many funds to send from alice with this Inference Request */
    amount: string;
}
export interface FundTopicResponse {
}
export interface AddToWhitelistAdminRequest {
    sender: string;
    address: string;
}
export interface AddToWhitelistAdminResponse {
}
export interface RemoveFromWhitelistAdminRequest {
    sender: string;
    address: string;
}
export interface RemoveFromWhitelistAdminResponse {
}
export interface RewardDelegateStakeResponse {
}
export interface RewardDelegateStakeRequest {
    sender: string;
    topicId: string;
    reputer: string;
}
export declare const OptionalParams: MessageFns<OptionalParams>;
export declare const UpdateParamsRequest: MessageFns<UpdateParamsRequest>;
export declare const UpdateParamsResponse: MessageFns<UpdateParamsResponse>;
export declare const CreateNewTopicRequest: MessageFns<CreateNewTopicRequest>;
export declare const CreateNewTopicResponse: MessageFns<CreateNewTopicResponse>;
export declare const InsertReputerPayloadRequest: MessageFns<InsertReputerPayloadRequest>;
export declare const InsertReputerPayloadResponse: MessageFns<InsertReputerPayloadResponse>;
export declare const InsertWorkerPayloadRequest: MessageFns<InsertWorkerPayloadRequest>;
export declare const InsertWorkerPayloadResponse: MessageFns<InsertWorkerPayloadResponse>;
export declare const RegisterRequest: MessageFns<RegisterRequest>;
export declare const RegisterResponse: MessageFns<RegisterResponse>;
export declare const RemoveRegistrationRequest: MessageFns<RemoveRegistrationRequest>;
export declare const RemoveRegistrationResponse: MessageFns<RemoveRegistrationResponse>;
export declare const AddStakeRequest: MessageFns<AddStakeRequest>;
export declare const AddStakeResponse: MessageFns<AddStakeResponse>;
export declare const RemoveStakeRequest: MessageFns<RemoveStakeRequest>;
export declare const RemoveStakeResponse: MessageFns<RemoveStakeResponse>;
export declare const CancelRemoveStakeRequest: MessageFns<CancelRemoveStakeRequest>;
export declare const CancelRemoveStakeResponse: MessageFns<CancelRemoveStakeResponse>;
export declare const DelegateStakeRequest: MessageFns<DelegateStakeRequest>;
export declare const DelegateStakeResponse: MessageFns<DelegateStakeResponse>;
export declare const RemoveDelegateStakeRequest: MessageFns<RemoveDelegateStakeRequest>;
export declare const RemoveDelegateStakeResponse: MessageFns<RemoveDelegateStakeResponse>;
export declare const CancelRemoveDelegateStakeRequest: MessageFns<CancelRemoveDelegateStakeRequest>;
export declare const CancelRemoveDelegateStakeResponse: MessageFns<CancelRemoveDelegateStakeResponse>;
export declare const FundTopicRequest: MessageFns<FundTopicRequest>;
export declare const FundTopicResponse: MessageFns<FundTopicResponse>;
export declare const AddToWhitelistAdminRequest: MessageFns<AddToWhitelistAdminRequest>;
export declare const AddToWhitelistAdminResponse: MessageFns<AddToWhitelistAdminResponse>;
export declare const RemoveFromWhitelistAdminRequest: MessageFns<RemoveFromWhitelistAdminRequest>;
export declare const RemoveFromWhitelistAdminResponse: MessageFns<RemoveFromWhitelistAdminResponse>;
export declare const RewardDelegateStakeResponse: MessageFns<RewardDelegateStakeResponse>;
export declare const RewardDelegateStakeRequest: MessageFns<RewardDelegateStakeRequest>;
/** Msg defines the module Msg service. */
export interface MsgService {
    UpdateParams(request: UpdateParamsRequest): Promise<UpdateParamsResponse>;
    CreateNewTopic(request: CreateNewTopicRequest): Promise<CreateNewTopicResponse>;
    Register(request: RegisterRequest): Promise<RegisterResponse>;
    RemoveRegistration(request: RemoveRegistrationRequest): Promise<RemoveRegistrationResponse>;
    AddStake(request: AddStakeRequest): Promise<AddStakeResponse>;
    RemoveStake(request: RemoveStakeRequest): Promise<RemoveStakeResponse>;
    CancelRemoveStake(request: CancelRemoveStakeRequest): Promise<CancelRemoveStakeResponse>;
    DelegateStake(request: DelegateStakeRequest): Promise<DelegateStakeResponse>;
    RewardDelegateStake(request: RewardDelegateStakeRequest): Promise<RewardDelegateStakeResponse>;
    RemoveDelegateStake(request: RemoveDelegateStakeRequest): Promise<RemoveDelegateStakeResponse>;
    CancelRemoveDelegateStake(request: CancelRemoveDelegateStakeRequest): Promise<CancelRemoveDelegateStakeResponse>;
    FundTopic(request: FundTopicRequest): Promise<FundTopicResponse>;
    AddToWhitelistAdmin(request: AddToWhitelistAdminRequest): Promise<AddToWhitelistAdminResponse>;
    RemoveFromWhitelistAdmin(request: RemoveFromWhitelistAdminRequest): Promise<RemoveFromWhitelistAdminResponse>;
    InsertWorkerPayload(request: InsertWorkerPayloadRequest): Promise<InsertWorkerPayloadResponse>;
    InsertReputerPayload(request: InsertReputerPayloadRequest): Promise<InsertReputerPayloadResponse>;
}
export declare const MsgServiceServiceName = "emissions.v4.MsgService";
export declare class MsgServiceClientImpl implements MsgService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    UpdateParams(request: UpdateParamsRequest): Promise<UpdateParamsResponse>;
    CreateNewTopic(request: CreateNewTopicRequest): Promise<CreateNewTopicResponse>;
    Register(request: RegisterRequest): Promise<RegisterResponse>;
    RemoveRegistration(request: RemoveRegistrationRequest): Promise<RemoveRegistrationResponse>;
    AddStake(request: AddStakeRequest): Promise<AddStakeResponse>;
    RemoveStake(request: RemoveStakeRequest): Promise<RemoveStakeResponse>;
    CancelRemoveStake(request: CancelRemoveStakeRequest): Promise<CancelRemoveStakeResponse>;
    DelegateStake(request: DelegateStakeRequest): Promise<DelegateStakeResponse>;
    RewardDelegateStake(request: RewardDelegateStakeRequest): Promise<RewardDelegateStakeResponse>;
    RemoveDelegateStake(request: RemoveDelegateStakeRequest): Promise<RemoveDelegateStakeResponse>;
    CancelRemoveDelegateStake(request: CancelRemoveDelegateStakeRequest): Promise<CancelRemoveDelegateStakeResponse>;
    FundTopic(request: FundTopicRequest): Promise<FundTopicResponse>;
    AddToWhitelistAdmin(request: AddToWhitelistAdminRequest): Promise<AddToWhitelistAdminResponse>;
    RemoveFromWhitelistAdmin(request: RemoveFromWhitelistAdminRequest): Promise<RemoveFromWhitelistAdminResponse>;
    InsertWorkerPayload(request: InsertWorkerPayloadRequest): Promise<InsertWorkerPayloadResponse>;
    InsertReputerPayload(request: InsertReputerPayloadRequest): Promise<InsertReputerPayloadResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=tx.d.ts.map
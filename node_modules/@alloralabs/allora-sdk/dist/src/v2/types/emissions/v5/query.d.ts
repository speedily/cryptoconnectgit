import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RegretInformedWeight } from "../v3/inference";
import { OffchainNode } from "../v3/node";
import { Nonces, ReputerRequestNonces } from "../v3/nonce";
import { ReputerValueBundles, ValueBundle } from "../v3/reputer";
import { Score, Scores } from "../v3/score";
import { DelegateStakeRemovalInfo, DelegatorInfo, StakeInfo, StakeRemovalInfo } from "../v3/stake";
import { TimestampedActorNonce, Topic } from "../v3/topic";
import { ListeningCoefficient, SimpleCursorPaginationRequest, SimpleCursorPaginationResponse } from "../v3/types";
import { Forecasts, Inference, Inferences, TimestampedValue } from "../v3/worker";
import { Params } from "./params";
export declare const protobufPackage = "emissions.v5";
export interface GetCountInfererInclusionsInTopicRequest {
    topicId: string;
    inferer: string;
}
export interface GetCountInfererInclusionsInTopicResponse {
    count: string;
}
export interface GetCountForecasterInclusionsInTopicRequest {
    topicId: string;
    forecaster: string;
}
export interface GetCountForecasterInclusionsInTopicResponse {
    count: string;
}
export interface GetNaiveInfererNetworkRegretRequest {
    topicId: string;
    inferer: string;
}
export interface GetNaiveInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface GetOneOutInfererInfererNetworkRegretRequest {
    topicId: string;
    oneOutInferer: string;
    inferer: string;
}
export interface GetOneOutInfererInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface GetOneOutInfererForecasterNetworkRegretRequest {
    topicId: string;
    oneOutInferer: string;
    forecaster: string;
}
export interface GetOneOutInfererForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface GetOneOutForecasterInfererNetworkRegretRequest {
    topicId: string;
    oneOutForecaster: string;
    inferer: string;
}
export interface GetOneOutForecasterInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface GetOneOutForecasterForecasterNetworkRegretRequest {
    topicId: string;
    oneOutForecaster: string;
    forecaster: string;
}
export interface GetOneOutForecasterForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
/** GetParamsRequest is the request type for the Get/Params RPC method. */
export interface GetParamsRequest {
}
/** GetParamsResponse is the response type for the Get/Params RPC method. */
export interface GetParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
}
/** Total Stake returns the total amount of stake in the system */
export interface GetTotalStakeRequest {
}
/**
 * Total Stake returns the total amount of stake in the system
 *
 * NOTE: The amount field is an Int which implements the custom method
 * signatures required by gogoproto.
 */
export interface GetTotalStakeResponse {
    amount: string;
}
export interface GetReputerStakeInTopicRequest {
    address: string;
    topicId: string;
}
export interface GetReputerStakeInTopicResponse {
    amount: string;
}
export interface GetMultiReputerStakeInTopicRequest {
    addresses: string[];
    topicId: string;
}
export interface GetMultiReputerStakeInTopicResponse {
    amounts: StakeInfo[];
}
export interface GetStakeFromReputerInTopicInSelfRequest {
    reputerAddress: string;
    topicId: string;
}
export interface GetStakeFromReputerInTopicInSelfResponse {
    amount: string;
}
export interface GetDelegateStakeInTopicInReputerRequest {
    reputerAddress: string;
    topicId: string;
}
export interface GetDelegateStakeInTopicInReputerResponse {
    amount: string;
}
export interface GetStakeFromDelegatorInTopicInReputerRequest {
    delegatorAddress: string;
    reputerAddress: string;
    topicId: string;
}
export interface GetStakeFromDelegatorInTopicInReputerResponse {
    amount: string;
}
export interface GetStakeFromDelegatorInTopicRequest {
    delegatorAddress: string;
    topicId: string;
}
export interface GetStakeFromDelegatorInTopicResponse {
    amount: string;
}
export interface GetTopicStakeRequest {
    topicId: string;
}
export interface GetTopicStakeResponse {
    amount: string;
}
export interface GetNetworkLossBundleAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetNetworkLossBundleAtBlockResponse {
    lossBundle?: ValueBundle | undefined;
}
export interface GetNextTopicIdRequest {
}
export interface GetNextTopicIdResponse {
    nextTopicId: string;
}
export interface GetTopicRequest {
    topicId: string;
}
export interface GetTopicResponse {
    topic?: Topic | undefined;
    weight: string;
    effectiveRevenue: string;
}
export interface GetActiveTopicsRequest {
    pagination?: SimpleCursorPaginationRequest | undefined;
}
export interface GetActiveTopicsResponse {
    topics: Topic[];
    pagination?: SimpleCursorPaginationResponse | undefined;
}
/** Returns the inferences on a topic posted at a block height */
export interface GetInferencesAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
/**
 * Returns the inferences on a topic posted at a block height
 *
 * NOTE: The amount field is a Uint which implements the custom method
 * signatures required by gogoproto.
 */
export interface GetInferencesAtBlockResponse {
    inferences?: Inferences | undefined;
}
export interface GetLatestTopicInferencesRequest {
    topicId: string;
}
export interface GetLatestTopicInferencesResponse {
    inferences?: Inferences | undefined;
    blockHeight: string;
}
/** Returns the forecasts on a topic posted at a block height */
export interface GetForecastsAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
/**
 * Returns the forecasts on a topic posted at a block height
 *
 * NOTE: The amount field is a Uint which implements the custom method
 * signatures required by gogoproto.
 */
export interface GetForecastsAtBlockResponse {
    forecasts?: Forecasts | undefined;
}
export interface GetWorkerLatestInferenceByTopicIdRequest {
    topicId: string;
    workerAddress: string;
}
export interface GetWorkerLatestInferenceByTopicIdResponse {
    latestInference?: Inference | undefined;
}
export interface GetWorkerNodeInfoRequest {
    address: string;
}
export interface GetWorkerNodeInfoResponse {
    nodeInfo?: OffchainNode | undefined;
}
export interface GetReputerNodeInfoRequest {
    address: string;
}
export interface GetReputerNodeInfoResponse {
    nodeInfo?: OffchainNode | undefined;
}
export interface GetNetworkInferencesAtBlockRequest {
    topicId: string;
    blockHeightLastInference: string;
}
export interface GetLatestNetworkInferencesRequest {
    topicId: string;
}
export interface GetLatestAvailableNetworkInferencesRequest {
    topicId: string;
}
export interface IsWorkerNonceUnfulfilledRequest {
    topicId: string;
    blockHeight: string;
}
export interface IsWorkerNonceUnfulfilledResponse {
    isWorkerNonceUnfulfilled: boolean;
}
export interface GetUnfulfilledReputerNoncesRequest {
    topicId: string;
}
export interface GetUnfulfilledReputerNoncesResponse {
    nonces?: ReputerRequestNonces | undefined;
}
export interface GetUnfulfilledWorkerNoncesRequest {
    topicId: string;
}
export interface GetUnfulfilledWorkerNoncesResponse {
    nonces?: Nonces | undefined;
}
export interface GetInfererNetworkRegretRequest {
    topicId: string;
    actorId: string;
}
export interface GetInfererNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface GetForecasterNetworkRegretRequest {
    topicId: string;
    worker: string;
}
export interface GetForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface GetOneInForecasterNetworkRegretRequest {
    topicId: string;
    forecaster: string;
    inferer: string;
}
export interface GetOneInForecasterNetworkRegretResponse {
    regret?: TimestampedValue | undefined;
}
export interface IsReputerNonceUnfulfilledRequest {
    topicId: string;
    blockHeight: string;
}
export interface IsReputerNonceUnfulfilledResponse {
    isReputerNonceUnfulfilled: boolean;
}
export interface GetNetworkInferencesAtBlockResponse {
    networkInferences?: ValueBundle | undefined;
}
export interface GetLatestNetworkInferencesResponse {
    networkInferences?: ValueBundle | undefined;
    infererWeights: RegretInformedWeight[];
    forecasterWeights: RegretInformedWeight[];
    inferenceBlockHeight: string;
    lossBlockHeight: string;
    confidenceIntervalRawPercentiles: string[];
    confidenceIntervalValues: string[];
}
export interface GetLatestAvailableNetworkInferencesResponse {
    networkInferences?: ValueBundle | undefined;
    infererWeights: RegretInformedWeight[];
    forecasterWeights: RegretInformedWeight[];
    inferenceBlockHeight: string;
    lossBlockHeight: string;
    confidenceIntervalRawPercentiles: string[];
    confidenceIntervalValues: string[];
}
export interface IsWorkerRegisteredInTopicIdRequest {
    topicId: string;
    address: string;
}
export interface IsWorkerRegisteredInTopicIdResponse {
    isRegistered: boolean;
}
export interface IsReputerRegisteredInTopicIdRequest {
    topicId: string;
    address: string;
}
export interface IsReputerRegisteredInTopicIdResponse {
    isRegistered: boolean;
}
export interface IsWhitelistAdminRequest {
    address: string;
}
export interface IsWhitelistAdminResponse {
    isAdmin: boolean;
}
export interface GetStakeRemovalsUpUntilBlockRequest {
    blockHeight: string;
}
export interface GetStakeRemovalsUpUntilBlockResponse {
    removals: StakeRemovalInfo[];
}
export interface GetDelegateStakeRemovalsUpUntilBlockRequest {
    blockHeight: string;
}
export interface GetDelegateStakeRemovalsUpUntilBlockResponse {
    removals: DelegateStakeRemovalInfo[];
}
export interface GetStakeRemovalInfoRequest {
    topicId: string;
    reputer: string;
}
export interface GetStakeRemovalInfoResponse {
    removal?: StakeRemovalInfo | undefined;
}
export interface GetDelegateStakeRemovalInfoRequest {
    topicId: string;
    delegator: string;
    reputer: string;
}
export interface GetDelegateStakeRemovalInfoResponse {
    removal?: DelegateStakeRemovalInfo | undefined;
}
export interface GetTopicLastWorkerCommitInfoRequest {
    topicId: string;
}
export interface GetTopicLastWorkerCommitInfoResponse {
    lastCommit?: TimestampedActorNonce | undefined;
}
export interface GetTopicLastReputerCommitInfoRequest {
    topicId: string;
}
export interface GetTopicLastReputerCommitInfoResponse {
    lastCommit?: TimestampedActorNonce | undefined;
}
export interface GetTopicRewardNonceRequest {
    topicId: string;
}
export interface GetTopicRewardNonceResponse {
    nonce: string;
}
export interface GetReputerLossBundlesAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetReputerLossBundlesAtBlockResponse {
    lossBundles?: ReputerValueBundles | undefined;
}
export interface GetStakeReputerAuthorityRequest {
    topicId: string;
    reputer: string;
}
export interface GetStakeReputerAuthorityResponse {
    authority: string;
}
export interface GetDelegateStakePlacementRequest {
    topicId: string;
    delegator: string;
    target: string;
}
export interface GetDelegateStakePlacementResponse {
    delegatorInfo?: DelegatorInfo | undefined;
}
export interface GetDelegateStakeUponReputerRequest {
    topicId: string;
    target: string;
}
export interface GetDelegateStakeUponReputerResponse {
    stake: string;
}
export interface GetDelegateRewardPerShareRequest {
    topicId: string;
    reputer: string;
}
export interface GetDelegateRewardPerShareResponse {
    rewardPerShare: string;
}
export interface GetStakeRemovalForReputerAndTopicIdRequest {
    reputer: string;
    topicId: string;
}
export interface GetStakeRemovalForReputerAndTopicIdResponse {
    stakeRemovalInfo?: StakeRemovalInfo | undefined;
}
export interface GetDelegateStakeRemovalRequest {
    blockHeight: string;
    topicId: string;
    delegator: string;
    reputer: string;
}
export interface GetDelegateStakeRemovalResponse {
    stakeRemovalInfo?: DelegateStakeRemovalInfo | undefined;
}
export interface GetPreviousTopicWeightRequest {
    topicId: string;
}
export interface GetPreviousTopicWeightResponse {
    weight: string;
    notFound: boolean;
}
export interface GetTotalSumPreviousTopicWeightsRequest {
}
export interface GetTotalSumPreviousTopicWeightsResponse {
    weight: string;
}
export interface TopicExistsRequest {
    topicId: string;
}
export interface TopicExistsResponse {
    exists: boolean;
}
export interface IsTopicActiveRequest {
    topicId: string;
}
export interface IsTopicActiveResponse {
    isActive: boolean;
}
export interface GetTopicFeeRevenueRequest {
    topicId: string;
}
export interface GetTopicFeeRevenueResponse {
    feeRevenue: string;
}
export interface GetInfererScoreEmaRequest {
    topicId: string;
    inferer: string;
}
export interface GetInfererScoreEmaResponse {
    score?: Score | undefined;
}
export interface GetForecasterScoreEmaRequest {
    topicId: string;
    forecaster: string;
}
export interface GetForecasterScoreEmaResponse {
    score?: Score | undefined;
}
export interface GetReputerScoreEmaRequest {
    topicId: string;
    reputer: string;
}
export interface GetReputerScoreEmaResponse {
    score?: Score | undefined;
}
export interface GetInferenceScoresUntilBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetInferenceScoresUntilBlockResponse {
    scores: Score[];
}
export interface GetPreviousTopicQuantileForecasterScoreEmaRequest {
    topicId: string;
}
export interface GetPreviousTopicQuantileForecasterScoreEmaResponse {
    value: string;
}
export interface GetPreviousTopicQuantileInfererScoreEmaRequest {
    topicId: string;
}
export interface GetPreviousTopicQuantileInfererScoreEmaResponse {
    value: string;
}
export interface GetPreviousTopicQuantileReputerScoreEmaRequest {
    topicId: string;
}
export interface GetPreviousTopicQuantileReputerScoreEmaResponse {
    value: string;
}
export interface GetWorkerInferenceScoresAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetWorkerInferenceScoresAtBlockResponse {
    scores?: Scores | undefined;
}
export interface GetCurrentLowestInfererScoreRequest {
    topicId: string;
}
export interface GetCurrentLowestInfererScoreResponse {
    score?: Score | undefined;
}
export interface GetForecastScoresUntilBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetForecastScoresUntilBlockResponse {
    scores: Score[];
}
export interface GetWorkerForecastScoresAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetWorkerForecastScoresAtBlockResponse {
    scores?: Scores | undefined;
}
export interface GetCurrentLowestForecasterScoreRequest {
    topicId: string;
}
export interface GetCurrentLowestForecasterScoreResponse {
    score?: Score | undefined;
}
export interface GetReputersScoresAtBlockRequest {
    topicId: string;
    blockHeight: string;
}
export interface GetReputersScoresAtBlockResponse {
    scores?: Scores | undefined;
}
export interface GetCurrentLowestReputerScoreRequest {
    topicId: string;
}
export interface GetCurrentLowestReputerScoreResponse {
    score?: Score | undefined;
}
export interface GetListeningCoefficientRequest {
    topicId: string;
    reputer: string;
}
export interface GetListeningCoefficientResponse {
    listeningCoefficient?: ListeningCoefficient | undefined;
}
export interface GetPreviousReputerRewardFractionRequest {
    topicId: string;
    reputer: string;
}
export interface GetPreviousReputerRewardFractionResponse {
    rewardFraction: string;
    notFound: boolean;
}
export interface GetPreviousInferenceRewardFractionRequest {
    topicId: string;
    worker: string;
}
export interface GetPreviousInferenceRewardFractionResponse {
    rewardFraction: string;
    notFound: boolean;
}
export interface GetPreviousForecastRewardFractionRequest {
    topicId: string;
    worker: string;
}
export interface GetPreviousForecastRewardFractionResponse {
    rewardFraction: string;
    notFound: boolean;
}
export interface GetPreviousPercentageRewardToStakedReputersRequest {
}
export interface GetPreviousPercentageRewardToStakedReputersResponse {
    percentageReward: string;
}
export interface GetTotalRewardToDistributeRequest {
}
export interface GetTotalRewardToDistributeResponse {
    totalReward: string;
}
export interface GetActiveTopicsAtBlockRequest {
    blockHeight: string;
}
export interface GetActiveTopicsAtBlockResponse {
    topics: Topic[];
    pagination?: SimpleCursorPaginationResponse | undefined;
}
export interface GetNextChurningBlockByTopicIdRequest {
    topicId: string;
}
export interface GetNextChurningBlockByTopicIdResponse {
    blockHeight: string;
}
export interface GetActiveReputersForTopicRequest {
    topicId: string;
}
export interface GetActiveReputersForTopicResponse {
    reputers: string[];
}
export interface GetActiveForecastersForTopicRequest {
    topicId: string;
}
export interface GetActiveForecastersForTopicResponse {
    forecasters: string[];
}
export interface GetActiveInferersForTopicRequest {
    topicId: string;
}
export interface GetActiveInferersForTopicResponse {
    inferers: string[];
}
export declare const GetCountInfererInclusionsInTopicRequest: MessageFns<GetCountInfererInclusionsInTopicRequest>;
export declare const GetCountInfererInclusionsInTopicResponse: MessageFns<GetCountInfererInclusionsInTopicResponse>;
export declare const GetCountForecasterInclusionsInTopicRequest: MessageFns<GetCountForecasterInclusionsInTopicRequest>;
export declare const GetCountForecasterInclusionsInTopicResponse: MessageFns<GetCountForecasterInclusionsInTopicResponse>;
export declare const GetNaiveInfererNetworkRegretRequest: MessageFns<GetNaiveInfererNetworkRegretRequest>;
export declare const GetNaiveInfererNetworkRegretResponse: MessageFns<GetNaiveInfererNetworkRegretResponse>;
export declare const GetOneOutInfererInfererNetworkRegretRequest: MessageFns<GetOneOutInfererInfererNetworkRegretRequest>;
export declare const GetOneOutInfererInfererNetworkRegretResponse: MessageFns<GetOneOutInfererInfererNetworkRegretResponse>;
export declare const GetOneOutInfererForecasterNetworkRegretRequest: MessageFns<GetOneOutInfererForecasterNetworkRegretRequest>;
export declare const GetOneOutInfererForecasterNetworkRegretResponse: MessageFns<GetOneOutInfererForecasterNetworkRegretResponse>;
export declare const GetOneOutForecasterInfererNetworkRegretRequest: MessageFns<GetOneOutForecasterInfererNetworkRegretRequest>;
export declare const GetOneOutForecasterInfererNetworkRegretResponse: MessageFns<GetOneOutForecasterInfererNetworkRegretResponse>;
export declare const GetOneOutForecasterForecasterNetworkRegretRequest: MessageFns<GetOneOutForecasterForecasterNetworkRegretRequest>;
export declare const GetOneOutForecasterForecasterNetworkRegretResponse: MessageFns<GetOneOutForecasterForecasterNetworkRegretResponse>;
export declare const GetParamsRequest: MessageFns<GetParamsRequest>;
export declare const GetParamsResponse: MessageFns<GetParamsResponse>;
export declare const GetTotalStakeRequest: MessageFns<GetTotalStakeRequest>;
export declare const GetTotalStakeResponse: MessageFns<GetTotalStakeResponse>;
export declare const GetReputerStakeInTopicRequest: MessageFns<GetReputerStakeInTopicRequest>;
export declare const GetReputerStakeInTopicResponse: MessageFns<GetReputerStakeInTopicResponse>;
export declare const GetMultiReputerStakeInTopicRequest: MessageFns<GetMultiReputerStakeInTopicRequest>;
export declare const GetMultiReputerStakeInTopicResponse: MessageFns<GetMultiReputerStakeInTopicResponse>;
export declare const GetStakeFromReputerInTopicInSelfRequest: MessageFns<GetStakeFromReputerInTopicInSelfRequest>;
export declare const GetStakeFromReputerInTopicInSelfResponse: MessageFns<GetStakeFromReputerInTopicInSelfResponse>;
export declare const GetDelegateStakeInTopicInReputerRequest: MessageFns<GetDelegateStakeInTopicInReputerRequest>;
export declare const GetDelegateStakeInTopicInReputerResponse: MessageFns<GetDelegateStakeInTopicInReputerResponse>;
export declare const GetStakeFromDelegatorInTopicInReputerRequest: MessageFns<GetStakeFromDelegatorInTopicInReputerRequest>;
export declare const GetStakeFromDelegatorInTopicInReputerResponse: MessageFns<GetStakeFromDelegatorInTopicInReputerResponse>;
export declare const GetStakeFromDelegatorInTopicRequest: MessageFns<GetStakeFromDelegatorInTopicRequest>;
export declare const GetStakeFromDelegatorInTopicResponse: MessageFns<GetStakeFromDelegatorInTopicResponse>;
export declare const GetTopicStakeRequest: MessageFns<GetTopicStakeRequest>;
export declare const GetTopicStakeResponse: MessageFns<GetTopicStakeResponse>;
export declare const GetNetworkLossBundleAtBlockRequest: MessageFns<GetNetworkLossBundleAtBlockRequest>;
export declare const GetNetworkLossBundleAtBlockResponse: MessageFns<GetNetworkLossBundleAtBlockResponse>;
export declare const GetNextTopicIdRequest: MessageFns<GetNextTopicIdRequest>;
export declare const GetNextTopicIdResponse: MessageFns<GetNextTopicIdResponse>;
export declare const GetTopicRequest: MessageFns<GetTopicRequest>;
export declare const GetTopicResponse: MessageFns<GetTopicResponse>;
export declare const GetActiveTopicsRequest: MessageFns<GetActiveTopicsRequest>;
export declare const GetActiveTopicsResponse: MessageFns<GetActiveTopicsResponse>;
export declare const GetInferencesAtBlockRequest: MessageFns<GetInferencesAtBlockRequest>;
export declare const GetInferencesAtBlockResponse: MessageFns<GetInferencesAtBlockResponse>;
export declare const GetLatestTopicInferencesRequest: MessageFns<GetLatestTopicInferencesRequest>;
export declare const GetLatestTopicInferencesResponse: MessageFns<GetLatestTopicInferencesResponse>;
export declare const GetForecastsAtBlockRequest: MessageFns<GetForecastsAtBlockRequest>;
export declare const GetForecastsAtBlockResponse: MessageFns<GetForecastsAtBlockResponse>;
export declare const GetWorkerLatestInferenceByTopicIdRequest: MessageFns<GetWorkerLatestInferenceByTopicIdRequest>;
export declare const GetWorkerLatestInferenceByTopicIdResponse: MessageFns<GetWorkerLatestInferenceByTopicIdResponse>;
export declare const GetWorkerNodeInfoRequest: MessageFns<GetWorkerNodeInfoRequest>;
export declare const GetWorkerNodeInfoResponse: MessageFns<GetWorkerNodeInfoResponse>;
export declare const GetReputerNodeInfoRequest: MessageFns<GetReputerNodeInfoRequest>;
export declare const GetReputerNodeInfoResponse: MessageFns<GetReputerNodeInfoResponse>;
export declare const GetNetworkInferencesAtBlockRequest: MessageFns<GetNetworkInferencesAtBlockRequest>;
export declare const GetLatestNetworkInferencesRequest: MessageFns<GetLatestNetworkInferencesRequest>;
export declare const GetLatestAvailableNetworkInferencesRequest: MessageFns<GetLatestAvailableNetworkInferencesRequest>;
export declare const IsWorkerNonceUnfulfilledRequest: MessageFns<IsWorkerNonceUnfulfilledRequest>;
export declare const IsWorkerNonceUnfulfilledResponse: MessageFns<IsWorkerNonceUnfulfilledResponse>;
export declare const GetUnfulfilledReputerNoncesRequest: MessageFns<GetUnfulfilledReputerNoncesRequest>;
export declare const GetUnfulfilledReputerNoncesResponse: MessageFns<GetUnfulfilledReputerNoncesResponse>;
export declare const GetUnfulfilledWorkerNoncesRequest: MessageFns<GetUnfulfilledWorkerNoncesRequest>;
export declare const GetUnfulfilledWorkerNoncesResponse: MessageFns<GetUnfulfilledWorkerNoncesResponse>;
export declare const GetInfererNetworkRegretRequest: MessageFns<GetInfererNetworkRegretRequest>;
export declare const GetInfererNetworkRegretResponse: MessageFns<GetInfererNetworkRegretResponse>;
export declare const GetForecasterNetworkRegretRequest: MessageFns<GetForecasterNetworkRegretRequest>;
export declare const GetForecasterNetworkRegretResponse: MessageFns<GetForecasterNetworkRegretResponse>;
export declare const GetOneInForecasterNetworkRegretRequest: MessageFns<GetOneInForecasterNetworkRegretRequest>;
export declare const GetOneInForecasterNetworkRegretResponse: MessageFns<GetOneInForecasterNetworkRegretResponse>;
export declare const IsReputerNonceUnfulfilledRequest: MessageFns<IsReputerNonceUnfulfilledRequest>;
export declare const IsReputerNonceUnfulfilledResponse: MessageFns<IsReputerNonceUnfulfilledResponse>;
export declare const GetNetworkInferencesAtBlockResponse: MessageFns<GetNetworkInferencesAtBlockResponse>;
export declare const GetLatestNetworkInferencesResponse: MessageFns<GetLatestNetworkInferencesResponse>;
export declare const GetLatestAvailableNetworkInferencesResponse: MessageFns<GetLatestAvailableNetworkInferencesResponse>;
export declare const IsWorkerRegisteredInTopicIdRequest: MessageFns<IsWorkerRegisteredInTopicIdRequest>;
export declare const IsWorkerRegisteredInTopicIdResponse: MessageFns<IsWorkerRegisteredInTopicIdResponse>;
export declare const IsReputerRegisteredInTopicIdRequest: MessageFns<IsReputerRegisteredInTopicIdRequest>;
export declare const IsReputerRegisteredInTopicIdResponse: MessageFns<IsReputerRegisteredInTopicIdResponse>;
export declare const IsWhitelistAdminRequest: MessageFns<IsWhitelistAdminRequest>;
export declare const IsWhitelistAdminResponse: MessageFns<IsWhitelistAdminResponse>;
export declare const GetStakeRemovalsUpUntilBlockRequest: MessageFns<GetStakeRemovalsUpUntilBlockRequest>;
export declare const GetStakeRemovalsUpUntilBlockResponse: MessageFns<GetStakeRemovalsUpUntilBlockResponse>;
export declare const GetDelegateStakeRemovalsUpUntilBlockRequest: MessageFns<GetDelegateStakeRemovalsUpUntilBlockRequest>;
export declare const GetDelegateStakeRemovalsUpUntilBlockResponse: MessageFns<GetDelegateStakeRemovalsUpUntilBlockResponse>;
export declare const GetStakeRemovalInfoRequest: MessageFns<GetStakeRemovalInfoRequest>;
export declare const GetStakeRemovalInfoResponse: MessageFns<GetStakeRemovalInfoResponse>;
export declare const GetDelegateStakeRemovalInfoRequest: MessageFns<GetDelegateStakeRemovalInfoRequest>;
export declare const GetDelegateStakeRemovalInfoResponse: MessageFns<GetDelegateStakeRemovalInfoResponse>;
export declare const GetTopicLastWorkerCommitInfoRequest: MessageFns<GetTopicLastWorkerCommitInfoRequest>;
export declare const GetTopicLastWorkerCommitInfoResponse: MessageFns<GetTopicLastWorkerCommitInfoResponse>;
export declare const GetTopicLastReputerCommitInfoRequest: MessageFns<GetTopicLastReputerCommitInfoRequest>;
export declare const GetTopicLastReputerCommitInfoResponse: MessageFns<GetTopicLastReputerCommitInfoResponse>;
export declare const GetTopicRewardNonceRequest: MessageFns<GetTopicRewardNonceRequest>;
export declare const GetTopicRewardNonceResponse: MessageFns<GetTopicRewardNonceResponse>;
export declare const GetReputerLossBundlesAtBlockRequest: MessageFns<GetReputerLossBundlesAtBlockRequest>;
export declare const GetReputerLossBundlesAtBlockResponse: MessageFns<GetReputerLossBundlesAtBlockResponse>;
export declare const GetStakeReputerAuthorityRequest: MessageFns<GetStakeReputerAuthorityRequest>;
export declare const GetStakeReputerAuthorityResponse: MessageFns<GetStakeReputerAuthorityResponse>;
export declare const GetDelegateStakePlacementRequest: MessageFns<GetDelegateStakePlacementRequest>;
export declare const GetDelegateStakePlacementResponse: MessageFns<GetDelegateStakePlacementResponse>;
export declare const GetDelegateStakeUponReputerRequest: MessageFns<GetDelegateStakeUponReputerRequest>;
export declare const GetDelegateStakeUponReputerResponse: MessageFns<GetDelegateStakeUponReputerResponse>;
export declare const GetDelegateRewardPerShareRequest: MessageFns<GetDelegateRewardPerShareRequest>;
export declare const GetDelegateRewardPerShareResponse: MessageFns<GetDelegateRewardPerShareResponse>;
export declare const GetStakeRemovalForReputerAndTopicIdRequest: MessageFns<GetStakeRemovalForReputerAndTopicIdRequest>;
export declare const GetStakeRemovalForReputerAndTopicIdResponse: MessageFns<GetStakeRemovalForReputerAndTopicIdResponse>;
export declare const GetDelegateStakeRemovalRequest: MessageFns<GetDelegateStakeRemovalRequest>;
export declare const GetDelegateStakeRemovalResponse: MessageFns<GetDelegateStakeRemovalResponse>;
export declare const GetPreviousTopicWeightRequest: MessageFns<GetPreviousTopicWeightRequest>;
export declare const GetPreviousTopicWeightResponse: MessageFns<GetPreviousTopicWeightResponse>;
export declare const GetTotalSumPreviousTopicWeightsRequest: MessageFns<GetTotalSumPreviousTopicWeightsRequest>;
export declare const GetTotalSumPreviousTopicWeightsResponse: MessageFns<GetTotalSumPreviousTopicWeightsResponse>;
export declare const TopicExistsRequest: MessageFns<TopicExistsRequest>;
export declare const TopicExistsResponse: MessageFns<TopicExistsResponse>;
export declare const IsTopicActiveRequest: MessageFns<IsTopicActiveRequest>;
export declare const IsTopicActiveResponse: MessageFns<IsTopicActiveResponse>;
export declare const GetTopicFeeRevenueRequest: MessageFns<GetTopicFeeRevenueRequest>;
export declare const GetTopicFeeRevenueResponse: MessageFns<GetTopicFeeRevenueResponse>;
export declare const GetInfererScoreEmaRequest: MessageFns<GetInfererScoreEmaRequest>;
export declare const GetInfererScoreEmaResponse: MessageFns<GetInfererScoreEmaResponse>;
export declare const GetForecasterScoreEmaRequest: MessageFns<GetForecasterScoreEmaRequest>;
export declare const GetForecasterScoreEmaResponse: MessageFns<GetForecasterScoreEmaResponse>;
export declare const GetReputerScoreEmaRequest: MessageFns<GetReputerScoreEmaRequest>;
export declare const GetReputerScoreEmaResponse: MessageFns<GetReputerScoreEmaResponse>;
export declare const GetInferenceScoresUntilBlockRequest: MessageFns<GetInferenceScoresUntilBlockRequest>;
export declare const GetInferenceScoresUntilBlockResponse: MessageFns<GetInferenceScoresUntilBlockResponse>;
export declare const GetPreviousTopicQuantileForecasterScoreEmaRequest: MessageFns<GetPreviousTopicQuantileForecasterScoreEmaRequest>;
export declare const GetPreviousTopicQuantileForecasterScoreEmaResponse: MessageFns<GetPreviousTopicQuantileForecasterScoreEmaResponse>;
export declare const GetPreviousTopicQuantileInfererScoreEmaRequest: MessageFns<GetPreviousTopicQuantileInfererScoreEmaRequest>;
export declare const GetPreviousTopicQuantileInfererScoreEmaResponse: MessageFns<GetPreviousTopicQuantileInfererScoreEmaResponse>;
export declare const GetPreviousTopicQuantileReputerScoreEmaRequest: MessageFns<GetPreviousTopicQuantileReputerScoreEmaRequest>;
export declare const GetPreviousTopicQuantileReputerScoreEmaResponse: MessageFns<GetPreviousTopicQuantileReputerScoreEmaResponse>;
export declare const GetWorkerInferenceScoresAtBlockRequest: MessageFns<GetWorkerInferenceScoresAtBlockRequest>;
export declare const GetWorkerInferenceScoresAtBlockResponse: MessageFns<GetWorkerInferenceScoresAtBlockResponse>;
export declare const GetCurrentLowestInfererScoreRequest: MessageFns<GetCurrentLowestInfererScoreRequest>;
export declare const GetCurrentLowestInfererScoreResponse: MessageFns<GetCurrentLowestInfererScoreResponse>;
export declare const GetForecastScoresUntilBlockRequest: MessageFns<GetForecastScoresUntilBlockRequest>;
export declare const GetForecastScoresUntilBlockResponse: MessageFns<GetForecastScoresUntilBlockResponse>;
export declare const GetWorkerForecastScoresAtBlockRequest: MessageFns<GetWorkerForecastScoresAtBlockRequest>;
export declare const GetWorkerForecastScoresAtBlockResponse: MessageFns<GetWorkerForecastScoresAtBlockResponse>;
export declare const GetCurrentLowestForecasterScoreRequest: MessageFns<GetCurrentLowestForecasterScoreRequest>;
export declare const GetCurrentLowestForecasterScoreResponse: MessageFns<GetCurrentLowestForecasterScoreResponse>;
export declare const GetReputersScoresAtBlockRequest: MessageFns<GetReputersScoresAtBlockRequest>;
export declare const GetReputersScoresAtBlockResponse: MessageFns<GetReputersScoresAtBlockResponse>;
export declare const GetCurrentLowestReputerScoreRequest: MessageFns<GetCurrentLowestReputerScoreRequest>;
export declare const GetCurrentLowestReputerScoreResponse: MessageFns<GetCurrentLowestReputerScoreResponse>;
export declare const GetListeningCoefficientRequest: MessageFns<GetListeningCoefficientRequest>;
export declare const GetListeningCoefficientResponse: MessageFns<GetListeningCoefficientResponse>;
export declare const GetPreviousReputerRewardFractionRequest: MessageFns<GetPreviousReputerRewardFractionRequest>;
export declare const GetPreviousReputerRewardFractionResponse: MessageFns<GetPreviousReputerRewardFractionResponse>;
export declare const GetPreviousInferenceRewardFractionRequest: MessageFns<GetPreviousInferenceRewardFractionRequest>;
export declare const GetPreviousInferenceRewardFractionResponse: MessageFns<GetPreviousInferenceRewardFractionResponse>;
export declare const GetPreviousForecastRewardFractionRequest: MessageFns<GetPreviousForecastRewardFractionRequest>;
export declare const GetPreviousForecastRewardFractionResponse: MessageFns<GetPreviousForecastRewardFractionResponse>;
export declare const GetPreviousPercentageRewardToStakedReputersRequest: MessageFns<GetPreviousPercentageRewardToStakedReputersRequest>;
export declare const GetPreviousPercentageRewardToStakedReputersResponse: MessageFns<GetPreviousPercentageRewardToStakedReputersResponse>;
export declare const GetTotalRewardToDistributeRequest: MessageFns<GetTotalRewardToDistributeRequest>;
export declare const GetTotalRewardToDistributeResponse: MessageFns<GetTotalRewardToDistributeResponse>;
export declare const GetActiveTopicsAtBlockRequest: MessageFns<GetActiveTopicsAtBlockRequest>;
export declare const GetActiveTopicsAtBlockResponse: MessageFns<GetActiveTopicsAtBlockResponse>;
export declare const GetNextChurningBlockByTopicIdRequest: MessageFns<GetNextChurningBlockByTopicIdRequest>;
export declare const GetNextChurningBlockByTopicIdResponse: MessageFns<GetNextChurningBlockByTopicIdResponse>;
export declare const GetActiveReputersForTopicRequest: MessageFns<GetActiveReputersForTopicRequest>;
export declare const GetActiveReputersForTopicResponse: MessageFns<GetActiveReputersForTopicResponse>;
export declare const GetActiveForecastersForTopicRequest: MessageFns<GetActiveForecastersForTopicRequest>;
export declare const GetActiveForecastersForTopicResponse: MessageFns<GetActiveForecastersForTopicResponse>;
export declare const GetActiveInferersForTopicRequest: MessageFns<GetActiveInferersForTopicRequest>;
export declare const GetActiveInferersForTopicResponse: MessageFns<GetActiveInferersForTopicResponse>;
/** Msg defines the module Msg service. */
export interface QueryService {
    /** Params returns the module parameters. */
    GetParams(request: GetParamsRequest): Promise<GetParamsResponse>;
    GetNextTopicId(request: GetNextTopicIdRequest): Promise<GetNextTopicIdResponse>;
    GetTopic(request: GetTopicRequest): Promise<GetTopicResponse>;
    GetWorkerLatestInferenceByTopicId(request: GetWorkerLatestInferenceByTopicIdRequest): Promise<GetWorkerLatestInferenceByTopicIdResponse>;
    GetInferencesAtBlock(request: GetInferencesAtBlockRequest): Promise<GetInferencesAtBlockResponse>;
    GetLatestTopicInferences(request: GetLatestTopicInferencesRequest): Promise<GetLatestTopicInferencesResponse>;
    GetForecastsAtBlock(request: GetForecastsAtBlockRequest): Promise<GetForecastsAtBlockResponse>;
    GetNetworkLossBundleAtBlock(request: GetNetworkLossBundleAtBlockRequest): Promise<GetNetworkLossBundleAtBlockResponse>;
    GetTotalStake(request: GetTotalStakeRequest): Promise<GetTotalStakeResponse>;
    GetReputerStakeInTopic(request: GetReputerStakeInTopicRequest): Promise<GetReputerStakeInTopicResponse>;
    GetMultiReputerStakeInTopic(request: GetMultiReputerStakeInTopicRequest): Promise<GetMultiReputerStakeInTopicResponse>;
    GetStakeFromReputerInTopicInSelf(request: GetStakeFromReputerInTopicInSelfRequest): Promise<GetStakeFromReputerInTopicInSelfResponse>;
    GetDelegateStakeInTopicInReputer(request: GetDelegateStakeInTopicInReputerRequest): Promise<GetDelegateStakeInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopicInReputer(request: GetStakeFromDelegatorInTopicInReputerRequest): Promise<GetStakeFromDelegatorInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopic(request: GetStakeFromDelegatorInTopicRequest): Promise<GetStakeFromDelegatorInTopicResponse>;
    GetTopicStake(request: GetTopicStakeRequest): Promise<GetTopicStakeResponse>;
    GetStakeRemovalsUpUntilBlock(request: GetStakeRemovalsUpUntilBlockRequest): Promise<GetStakeRemovalsUpUntilBlockResponse>;
    GetDelegateStakeRemovalsUpUntilBlock(request: GetDelegateStakeRemovalsUpUntilBlockRequest): Promise<GetDelegateStakeRemovalsUpUntilBlockResponse>;
    GetStakeRemovalInfo(request: GetStakeRemovalInfoRequest): Promise<GetStakeRemovalInfoResponse>;
    GetDelegateStakeRemovalInfo(request: GetDelegateStakeRemovalInfoRequest): Promise<GetDelegateStakeRemovalInfoResponse>;
    GetWorkerNodeInfo(request: GetWorkerNodeInfoRequest): Promise<GetWorkerNodeInfoResponse>;
    GetReputerNodeInfo(request: GetReputerNodeInfoRequest): Promise<GetReputerNodeInfoResponse>;
    IsWorkerRegisteredInTopicId(request: IsWorkerRegisteredInTopicIdRequest): Promise<IsWorkerRegisteredInTopicIdResponse>;
    IsReputerRegisteredInTopicId(request: IsReputerRegisteredInTopicIdRequest): Promise<IsReputerRegisteredInTopicIdResponse>;
    GetNetworkInferencesAtBlock(request: GetNetworkInferencesAtBlockRequest): Promise<GetNetworkInferencesAtBlockResponse>;
    GetLatestNetworkInferences(request: GetLatestNetworkInferencesRequest): Promise<GetLatestNetworkInferencesResponse>;
    GetLatestAvailableNetworkInferences(request: GetLatestAvailableNetworkInferencesRequest): Promise<GetLatestAvailableNetworkInferencesResponse>;
    IsWorkerNonceUnfulfilled(request: IsWorkerNonceUnfulfilledRequest): Promise<IsWorkerNonceUnfulfilledResponse>;
    IsReputerNonceUnfulfilled(request: IsReputerNonceUnfulfilledRequest): Promise<IsReputerNonceUnfulfilledResponse>;
    GetUnfulfilledWorkerNonces(request: GetUnfulfilledWorkerNoncesRequest): Promise<GetUnfulfilledWorkerNoncesResponse>;
    GetUnfulfilledReputerNonces(request: GetUnfulfilledReputerNoncesRequest): Promise<GetUnfulfilledReputerNoncesResponse>;
    GetInfererNetworkRegret(request: GetInfererNetworkRegretRequest): Promise<GetInfererNetworkRegretResponse>;
    GetForecasterNetworkRegret(request: GetForecasterNetworkRegretRequest): Promise<GetForecasterNetworkRegretResponse>;
    GetOneInForecasterNetworkRegret(request: GetOneInForecasterNetworkRegretRequest): Promise<GetOneInForecasterNetworkRegretResponse>;
    IsWhitelistAdmin(request: IsWhitelistAdminRequest): Promise<IsWhitelistAdminResponse>;
    GetTopicLastWorkerCommitInfo(request: GetTopicLastWorkerCommitInfoRequest): Promise<GetTopicLastWorkerCommitInfoResponse>;
    GetTopicLastReputerCommitInfo(request: GetTopicLastReputerCommitInfoRequest): Promise<GetTopicLastReputerCommitInfoResponse>;
    GetTopicRewardNonce(request: GetTopicRewardNonceRequest): Promise<GetTopicRewardNonceResponse>;
    GetReputerLossBundlesAtBlock(request: GetReputerLossBundlesAtBlockRequest): Promise<GetReputerLossBundlesAtBlockResponse>;
    GetStakeReputerAuthority(request: GetStakeReputerAuthorityRequest): Promise<GetStakeReputerAuthorityResponse>;
    GetDelegateStakePlacement(request: GetDelegateStakePlacementRequest): Promise<GetDelegateStakePlacementResponse>;
    GetDelegateStakeUponReputer(request: GetDelegateStakeUponReputerRequest): Promise<GetDelegateStakeUponReputerResponse>;
    GetDelegateRewardPerShare(request: GetDelegateRewardPerShareRequest): Promise<GetDelegateRewardPerShareResponse>;
    GetStakeRemovalForReputerAndTopicId(request: GetStakeRemovalForReputerAndTopicIdRequest): Promise<GetStakeRemovalForReputerAndTopicIdResponse>;
    GetDelegateStakeRemoval(request: GetDelegateStakeRemovalRequest): Promise<GetDelegateStakeRemovalResponse>;
    GetPreviousTopicWeight(request: GetPreviousTopicWeightRequest): Promise<GetPreviousTopicWeightResponse>;
    GetTotalSumPreviousTopicWeights(request: GetTotalSumPreviousTopicWeightsRequest): Promise<GetTotalSumPreviousTopicWeightsResponse>;
    TopicExists(request: TopicExistsRequest): Promise<TopicExistsResponse>;
    IsTopicActive(request: IsTopicActiveRequest): Promise<IsTopicActiveResponse>;
    GetTopicFeeRevenue(request: GetTopicFeeRevenueRequest): Promise<GetTopicFeeRevenueResponse>;
    GetInfererScoreEma(request: GetInfererScoreEmaRequest): Promise<GetInfererScoreEmaResponse>;
    GetForecasterScoreEma(request: GetForecasterScoreEmaRequest): Promise<GetForecasterScoreEmaResponse>;
    GetReputerScoreEma(request: GetReputerScoreEmaRequest): Promise<GetReputerScoreEmaResponse>;
    GetInferenceScoresUntilBlock(request: GetInferenceScoresUntilBlockRequest): Promise<GetInferenceScoresUntilBlockResponse>;
    GetPreviousTopicQuantileForecasterScoreEma(request: GetPreviousTopicQuantileForecasterScoreEmaRequest): Promise<GetPreviousTopicQuantileForecasterScoreEmaResponse>;
    GetPreviousTopicQuantileInfererScoreEma(request: GetPreviousTopicQuantileInfererScoreEmaRequest): Promise<GetPreviousTopicQuantileInfererScoreEmaResponse>;
    GetPreviousTopicQuantileReputerScoreEma(request: GetPreviousTopicQuantileReputerScoreEmaRequest): Promise<GetPreviousTopicQuantileReputerScoreEmaResponse>;
    GetWorkerInferenceScoresAtBlock(request: GetWorkerInferenceScoresAtBlockRequest): Promise<GetWorkerInferenceScoresAtBlockResponse>;
    GetCurrentLowestInfererScore(request: GetCurrentLowestInfererScoreRequest): Promise<GetCurrentLowestInfererScoreResponse>;
    GetForecastScoresUntilBlock(request: GetForecastScoresUntilBlockRequest): Promise<GetForecastScoresUntilBlockResponse>;
    GetWorkerForecastScoresAtBlock(request: GetWorkerForecastScoresAtBlockRequest): Promise<GetWorkerForecastScoresAtBlockResponse>;
    GetCurrentLowestForecasterScore(request: GetCurrentLowestForecasterScoreRequest): Promise<GetCurrentLowestForecasterScoreResponse>;
    GetReputersScoresAtBlock(request: GetReputersScoresAtBlockRequest): Promise<GetReputersScoresAtBlockResponse>;
    GetCurrentLowestReputerScore(request: GetCurrentLowestReputerScoreRequest): Promise<GetCurrentLowestReputerScoreResponse>;
    GetListeningCoefficient(request: GetListeningCoefficientRequest): Promise<GetListeningCoefficientResponse>;
    GetPreviousReputerRewardFraction(request: GetPreviousReputerRewardFractionRequest): Promise<GetPreviousReputerRewardFractionResponse>;
    GetPreviousInferenceRewardFraction(request: GetPreviousInferenceRewardFractionRequest): Promise<GetPreviousInferenceRewardFractionResponse>;
    GetPreviousForecastRewardFraction(request: GetPreviousForecastRewardFractionRequest): Promise<GetPreviousForecastRewardFractionResponse>;
    GetPreviousPercentageRewardToStakedReputers(request: GetPreviousPercentageRewardToStakedReputersRequest): Promise<GetPreviousPercentageRewardToStakedReputersResponse>;
    GetTotalRewardToDistribute(request: GetTotalRewardToDistributeRequest): Promise<GetTotalRewardToDistributeResponse>;
    GetNaiveInfererNetworkRegret(request: GetNaiveInfererNetworkRegretRequest): Promise<GetNaiveInfererNetworkRegretResponse>;
    GetOneOutInfererInfererNetworkRegret(request: GetOneOutInfererInfererNetworkRegretRequest): Promise<GetOneOutInfererInfererNetworkRegretResponse>;
    GetOneOutInfererForecasterNetworkRegret(request: GetOneOutInfererForecasterNetworkRegretRequest): Promise<GetOneOutInfererForecasterNetworkRegretResponse>;
    GetOneOutForecasterInfererNetworkRegret(request: GetOneOutForecasterInfererNetworkRegretRequest): Promise<GetOneOutForecasterInfererNetworkRegretResponse>;
    GetOneOutForecasterForecasterNetworkRegret(request: GetOneOutForecasterForecasterNetworkRegretRequest): Promise<GetOneOutForecasterForecasterNetworkRegretResponse>;
    GetActiveTopicsAtBlock(request: GetActiveTopicsAtBlockRequest): Promise<GetActiveTopicsAtBlockResponse>;
    GetNextChurningBlockByTopicId(request: GetNextChurningBlockByTopicIdRequest): Promise<GetNextChurningBlockByTopicIdResponse>;
    GetCountInfererInclusionsInTopic(request: GetCountInfererInclusionsInTopicRequest): Promise<GetCountInfererInclusionsInTopicResponse>;
    GetCountForecasterInclusionsInTopic(request: GetCountForecasterInclusionsInTopicRequest): Promise<GetCountForecasterInclusionsInTopicResponse>;
    GetActiveReputersForTopic(request: GetActiveReputersForTopicRequest): Promise<GetActiveReputersForTopicResponse>;
    GetActiveForecastersForTopic(request: GetActiveForecastersForTopicRequest): Promise<GetActiveForecastersForTopicResponse>;
    GetActiveInferersForTopic(request: GetActiveInferersForTopicRequest): Promise<GetActiveInferersForTopicResponse>;
}
export declare const QueryServiceServiceName = "emissions.v5.QueryService";
export declare class QueryServiceClientImpl implements QueryService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetParams(request: GetParamsRequest): Promise<GetParamsResponse>;
    GetNextTopicId(request: GetNextTopicIdRequest): Promise<GetNextTopicIdResponse>;
    GetTopic(request: GetTopicRequest): Promise<GetTopicResponse>;
    GetWorkerLatestInferenceByTopicId(request: GetWorkerLatestInferenceByTopicIdRequest): Promise<GetWorkerLatestInferenceByTopicIdResponse>;
    GetInferencesAtBlock(request: GetInferencesAtBlockRequest): Promise<GetInferencesAtBlockResponse>;
    GetLatestTopicInferences(request: GetLatestTopicInferencesRequest): Promise<GetLatestTopicInferencesResponse>;
    GetForecastsAtBlock(request: GetForecastsAtBlockRequest): Promise<GetForecastsAtBlockResponse>;
    GetNetworkLossBundleAtBlock(request: GetNetworkLossBundleAtBlockRequest): Promise<GetNetworkLossBundleAtBlockResponse>;
    GetTotalStake(request: GetTotalStakeRequest): Promise<GetTotalStakeResponse>;
    GetReputerStakeInTopic(request: GetReputerStakeInTopicRequest): Promise<GetReputerStakeInTopicResponse>;
    GetMultiReputerStakeInTopic(request: GetMultiReputerStakeInTopicRequest): Promise<GetMultiReputerStakeInTopicResponse>;
    GetStakeFromReputerInTopicInSelf(request: GetStakeFromReputerInTopicInSelfRequest): Promise<GetStakeFromReputerInTopicInSelfResponse>;
    GetDelegateStakeInTopicInReputer(request: GetDelegateStakeInTopicInReputerRequest): Promise<GetDelegateStakeInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopicInReputer(request: GetStakeFromDelegatorInTopicInReputerRequest): Promise<GetStakeFromDelegatorInTopicInReputerResponse>;
    GetStakeFromDelegatorInTopic(request: GetStakeFromDelegatorInTopicRequest): Promise<GetStakeFromDelegatorInTopicResponse>;
    GetTopicStake(request: GetTopicStakeRequest): Promise<GetTopicStakeResponse>;
    GetStakeRemovalsUpUntilBlock(request: GetStakeRemovalsUpUntilBlockRequest): Promise<GetStakeRemovalsUpUntilBlockResponse>;
    GetDelegateStakeRemovalsUpUntilBlock(request: GetDelegateStakeRemovalsUpUntilBlockRequest): Promise<GetDelegateStakeRemovalsUpUntilBlockResponse>;
    GetStakeRemovalInfo(request: GetStakeRemovalInfoRequest): Promise<GetStakeRemovalInfoResponse>;
    GetDelegateStakeRemovalInfo(request: GetDelegateStakeRemovalInfoRequest): Promise<GetDelegateStakeRemovalInfoResponse>;
    GetWorkerNodeInfo(request: GetWorkerNodeInfoRequest): Promise<GetWorkerNodeInfoResponse>;
    GetReputerNodeInfo(request: GetReputerNodeInfoRequest): Promise<GetReputerNodeInfoResponse>;
    IsWorkerRegisteredInTopicId(request: IsWorkerRegisteredInTopicIdRequest): Promise<IsWorkerRegisteredInTopicIdResponse>;
    IsReputerRegisteredInTopicId(request: IsReputerRegisteredInTopicIdRequest): Promise<IsReputerRegisteredInTopicIdResponse>;
    GetNetworkInferencesAtBlock(request: GetNetworkInferencesAtBlockRequest): Promise<GetNetworkInferencesAtBlockResponse>;
    GetLatestNetworkInferences(request: GetLatestNetworkInferencesRequest): Promise<GetLatestNetworkInferencesResponse>;
    GetLatestAvailableNetworkInferences(request: GetLatestAvailableNetworkInferencesRequest): Promise<GetLatestAvailableNetworkInferencesResponse>;
    IsWorkerNonceUnfulfilled(request: IsWorkerNonceUnfulfilledRequest): Promise<IsWorkerNonceUnfulfilledResponse>;
    IsReputerNonceUnfulfilled(request: IsReputerNonceUnfulfilledRequest): Promise<IsReputerNonceUnfulfilledResponse>;
    GetUnfulfilledWorkerNonces(request: GetUnfulfilledWorkerNoncesRequest): Promise<GetUnfulfilledWorkerNoncesResponse>;
    GetUnfulfilledReputerNonces(request: GetUnfulfilledReputerNoncesRequest): Promise<GetUnfulfilledReputerNoncesResponse>;
    GetInfererNetworkRegret(request: GetInfererNetworkRegretRequest): Promise<GetInfererNetworkRegretResponse>;
    GetForecasterNetworkRegret(request: GetForecasterNetworkRegretRequest): Promise<GetForecasterNetworkRegretResponse>;
    GetOneInForecasterNetworkRegret(request: GetOneInForecasterNetworkRegretRequest): Promise<GetOneInForecasterNetworkRegretResponse>;
    IsWhitelistAdmin(request: IsWhitelistAdminRequest): Promise<IsWhitelistAdminResponse>;
    GetTopicLastWorkerCommitInfo(request: GetTopicLastWorkerCommitInfoRequest): Promise<GetTopicLastWorkerCommitInfoResponse>;
    GetTopicLastReputerCommitInfo(request: GetTopicLastReputerCommitInfoRequest): Promise<GetTopicLastReputerCommitInfoResponse>;
    GetTopicRewardNonce(request: GetTopicRewardNonceRequest): Promise<GetTopicRewardNonceResponse>;
    GetReputerLossBundlesAtBlock(request: GetReputerLossBundlesAtBlockRequest): Promise<GetReputerLossBundlesAtBlockResponse>;
    GetStakeReputerAuthority(request: GetStakeReputerAuthorityRequest): Promise<GetStakeReputerAuthorityResponse>;
    GetDelegateStakePlacement(request: GetDelegateStakePlacementRequest): Promise<GetDelegateStakePlacementResponse>;
    GetDelegateStakeUponReputer(request: GetDelegateStakeUponReputerRequest): Promise<GetDelegateStakeUponReputerResponse>;
    GetDelegateRewardPerShare(request: GetDelegateRewardPerShareRequest): Promise<GetDelegateRewardPerShareResponse>;
    GetStakeRemovalForReputerAndTopicId(request: GetStakeRemovalForReputerAndTopicIdRequest): Promise<GetStakeRemovalForReputerAndTopicIdResponse>;
    GetDelegateStakeRemoval(request: GetDelegateStakeRemovalRequest): Promise<GetDelegateStakeRemovalResponse>;
    GetPreviousTopicWeight(request: GetPreviousTopicWeightRequest): Promise<GetPreviousTopicWeightResponse>;
    GetTotalSumPreviousTopicWeights(request: GetTotalSumPreviousTopicWeightsRequest): Promise<GetTotalSumPreviousTopicWeightsResponse>;
    TopicExists(request: TopicExistsRequest): Promise<TopicExistsResponse>;
    IsTopicActive(request: IsTopicActiveRequest): Promise<IsTopicActiveResponse>;
    GetTopicFeeRevenue(request: GetTopicFeeRevenueRequest): Promise<GetTopicFeeRevenueResponse>;
    GetInfererScoreEma(request: GetInfererScoreEmaRequest): Promise<GetInfererScoreEmaResponse>;
    GetForecasterScoreEma(request: GetForecasterScoreEmaRequest): Promise<GetForecasterScoreEmaResponse>;
    GetReputerScoreEma(request: GetReputerScoreEmaRequest): Promise<GetReputerScoreEmaResponse>;
    GetInferenceScoresUntilBlock(request: GetInferenceScoresUntilBlockRequest): Promise<GetInferenceScoresUntilBlockResponse>;
    GetPreviousTopicQuantileForecasterScoreEma(request: GetPreviousTopicQuantileForecasterScoreEmaRequest): Promise<GetPreviousTopicQuantileForecasterScoreEmaResponse>;
    GetPreviousTopicQuantileInfererScoreEma(request: GetPreviousTopicQuantileInfererScoreEmaRequest): Promise<GetPreviousTopicQuantileInfererScoreEmaResponse>;
    GetPreviousTopicQuantileReputerScoreEma(request: GetPreviousTopicQuantileReputerScoreEmaRequest): Promise<GetPreviousTopicQuantileReputerScoreEmaResponse>;
    GetWorkerInferenceScoresAtBlock(request: GetWorkerInferenceScoresAtBlockRequest): Promise<GetWorkerInferenceScoresAtBlockResponse>;
    GetCurrentLowestInfererScore(request: GetCurrentLowestInfererScoreRequest): Promise<GetCurrentLowestInfererScoreResponse>;
    GetForecastScoresUntilBlock(request: GetForecastScoresUntilBlockRequest): Promise<GetForecastScoresUntilBlockResponse>;
    GetWorkerForecastScoresAtBlock(request: GetWorkerForecastScoresAtBlockRequest): Promise<GetWorkerForecastScoresAtBlockResponse>;
    GetCurrentLowestForecasterScore(request: GetCurrentLowestForecasterScoreRequest): Promise<GetCurrentLowestForecasterScoreResponse>;
    GetReputersScoresAtBlock(request: GetReputersScoresAtBlockRequest): Promise<GetReputersScoresAtBlockResponse>;
    GetCurrentLowestReputerScore(request: GetCurrentLowestReputerScoreRequest): Promise<GetCurrentLowestReputerScoreResponse>;
    GetListeningCoefficient(request: GetListeningCoefficientRequest): Promise<GetListeningCoefficientResponse>;
    GetPreviousReputerRewardFraction(request: GetPreviousReputerRewardFractionRequest): Promise<GetPreviousReputerRewardFractionResponse>;
    GetPreviousInferenceRewardFraction(request: GetPreviousInferenceRewardFractionRequest): Promise<GetPreviousInferenceRewardFractionResponse>;
    GetPreviousForecastRewardFraction(request: GetPreviousForecastRewardFractionRequest): Promise<GetPreviousForecastRewardFractionResponse>;
    GetPreviousPercentageRewardToStakedReputers(request: GetPreviousPercentageRewardToStakedReputersRequest): Promise<GetPreviousPercentageRewardToStakedReputersResponse>;
    GetTotalRewardToDistribute(request: GetTotalRewardToDistributeRequest): Promise<GetTotalRewardToDistributeResponse>;
    GetNaiveInfererNetworkRegret(request: GetNaiveInfererNetworkRegretRequest): Promise<GetNaiveInfererNetworkRegretResponse>;
    GetOneOutInfererInfererNetworkRegret(request: GetOneOutInfererInfererNetworkRegretRequest): Promise<GetOneOutInfererInfererNetworkRegretResponse>;
    GetOneOutInfererForecasterNetworkRegret(request: GetOneOutInfererForecasterNetworkRegretRequest): Promise<GetOneOutInfererForecasterNetworkRegretResponse>;
    GetOneOutForecasterInfererNetworkRegret(request: GetOneOutForecasterInfererNetworkRegretRequest): Promise<GetOneOutForecasterInfererNetworkRegretResponse>;
    GetOneOutForecasterForecasterNetworkRegret(request: GetOneOutForecasterForecasterNetworkRegretRequest): Promise<GetOneOutForecasterForecasterNetworkRegretResponse>;
    GetActiveTopicsAtBlock(request: GetActiveTopicsAtBlockRequest): Promise<GetActiveTopicsAtBlockResponse>;
    GetNextChurningBlockByTopicId(request: GetNextChurningBlockByTopicIdRequest): Promise<GetNextChurningBlockByTopicIdResponse>;
    GetCountInfererInclusionsInTopic(request: GetCountInfererInclusionsInTopicRequest): Promise<GetCountInfererInclusionsInTopicResponse>;
    GetCountForecasterInclusionsInTopic(request: GetCountForecasterInclusionsInTopicRequest): Promise<GetCountForecasterInclusionsInTopicResponse>;
    GetActiveReputersForTopic(request: GetActiveReputersForTopicRequest): Promise<GetActiveReputersForTopicResponse>;
    GetActiveForecastersForTopic(request: GetActiveForecastersForTopicRequest): Promise<GetActiveForecastersForTopicResponse>;
    GetActiveInferersForTopic(request: GetActiveInferersForTopicRequest): Promise<GetActiveInferersForTopicResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
export {};
//# sourceMappingURL=query.d.ts.map
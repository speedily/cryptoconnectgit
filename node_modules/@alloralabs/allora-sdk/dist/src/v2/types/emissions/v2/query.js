"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v2/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryNetworkInferencesAtBlockRequest = exports.QueryReputerNodeInfoResponse = exports.QueryReputerNodeInfoRequest = exports.QueryWorkerNodeInfoResponse = exports.QueryWorkerNodeInfoRequest = exports.QueryWorkerLatestInferenceResponse = exports.QueryWorkerLatestInferenceRequest = exports.QueryForecastsAtBlockResponse = exports.QueryForecastsAtBlockRequest = exports.QueryLatestTopicInferencesResponse = exports.QueryLatestTopicInferencesRequest = exports.QueryInferencesAtBlockResponse = exports.QueryInferencesAtBlockRequest = exports.QueryActiveTopicsResponse = exports.QueryActiveTopicsRequest = exports.QueryTopicResponse = exports.QueryTopicRequest = exports.QueryNextTopicIdResponse = exports.QueryNextTopicIdRequest = exports.QueryNetworkLossBundleAtBlockResponse = exports.QueryNetworkLossBundleAtBlockRequest = exports.QueryTopicStakeResponse = exports.QueryTopicStakeRequest = exports.QueryStakeFromDelegatorInTopicResponse = exports.QueryStakeFromDelegatorInTopicRequest = exports.QueryStakeFromDelegatorInTopicInReputerResponse = exports.QueryStakeFromDelegatorInTopicInReputerRequest = exports.QueryDelegateStakeInTopicInReputerResponse = exports.QueryDelegateStakeInTopicInReputerRequest = exports.QueryStakeFromReputerInTopicInSelfResponse = exports.QueryStakeFromReputerInTopicInSelfRequest = exports.QueryMultiReputerStakeInTopicResponse = exports.QueryMultiReputerStakeInTopicRequest = exports.QueryReputerStakeInTopicResponse = exports.QueryReputerStakeInTopicRequest = exports.QueryTotalStakeResponse = exports.QueryTotalStakeRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryOneOutForecasterForecasterNetworkRegretResponse = exports.QueryOneOutForecasterForecasterNetworkRegretRequest = exports.QueryOneOutForecasterInfererNetworkRegretResponse = exports.QueryOneOutForecasterInfererNetworkRegretRequest = exports.QueryOneOutInfererForecasterNetworkRegretResponse = exports.QueryOneOutInfererForecasterNetworkRegretRequest = exports.QueryOneOutInfererInfererNetworkRegretResponse = exports.QueryOneOutInfererInfererNetworkRegretRequest = exports.QueryNaiveInfererNetworkRegretResponse = exports.QueryNaiveInfererNetworkRegretRequest = exports.protobufPackage = void 0;
exports.QueryPreviousTopicWeightRequest = exports.QueryDelegateStakeRemovalResponse = exports.QueryDelegateStakeRemovalRequest = exports.QueryStakeRemovalForReputerAndTopicIdResponse = exports.QueryStakeRemovalForReputerAndTopicIdRequest = exports.QueryDelegateRewardPerShareResponse = exports.QueryDelegateRewardPerShareRequest = exports.QueryDelegateStakeUponReputerResponse = exports.QueryDelegateStakeUponReputerRequest = exports.QueryDelegateStakePlacementResponse = exports.QueryDelegateStakePlacementRequest = exports.QueryStakeReputerAuthorityResponse = exports.QueryStakeReputerAuthorityRequest = exports.QueryReputerLossBundlesAtBlockResponse = exports.QueryReputerLossBundlesAtBlockRequest = exports.QueryTopicRewardNonceResponse = exports.QueryTopicRewardNonceRequest = exports.QueryTopicLastCommitResponse = exports.QueryTopicLastCommitRequest = exports.QueryDelegateStakeRemovalInfoResponse = exports.QueryDelegateStakeRemovalInfoRequest = exports.QueryStakeRemovalInfoResponse = exports.QueryStakeRemovalInfoRequest = exports.QueryDelegateStakeRemovalsUpUntilBlockResponse = exports.QueryDelegateStakeRemovalsUpUntilBlockRequest = exports.QueryStakeRemovalsUpUntilBlockResponse = exports.QueryStakeRemovalsUpUntilBlockRequest = exports.QueryIsWhitelistAdminResponse = exports.QueryIsWhitelistAdminRequest = exports.QueryIsReputerRegisteredInTopicIdResponse = exports.QueryIsReputerRegisteredInTopicIdRequest = exports.QueryIsWorkerRegisteredInTopicIdResponse = exports.QueryIsWorkerRegisteredInTopicIdRequest = exports.QueryLatestNetworkInferencesResponse = exports.QueryNetworkInferencesAtBlockResponse = exports.QueryIsReputerNonceUnfulfilledResponse = exports.QueryIsReputerNonceUnfulfilledRequest = exports.QueryOneInForecasterNetworkRegretResponse = exports.QueryOneInForecasterNetworkRegretRequest = exports.QueryForecasterNetworkRegretResponse = exports.QueryForecasterNetworkRegretRequest = exports.QueryInfererNetworkRegretResponse = exports.QueryInfererNetworkRegretRequest = exports.QueryUnfulfilledWorkerNoncesResponse = exports.QueryUnfulfilledWorkerNoncesRequest = exports.QueryUnfulfilledReputerNoncesResponse = exports.QueryUnfulfilledReputerNoncesRequest = exports.QueryIsWorkerNonceUnfulfilledResponse = exports.QueryIsWorkerNonceUnfulfilledRequest = exports.QueryLatestNetworkInferencesRequest = void 0;
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryTotalRewardToDistributeResponse = exports.QueryTotalRewardToDistributeRequest = exports.QueryPreviousPercentageRewardToStakedReputersResponse = exports.QueryPreviousPercentageRewardToStakedReputersRequest = exports.QueryPreviousForecastRewardFractionResponse = exports.QueryPreviousForecastRewardFractionRequest = exports.QueryPreviousInferenceRewardFractionResponse = exports.QueryPreviousInferenceRewardFractionRequest = exports.QueryPreviousReputerRewardFractionResponse = exports.QueryPreviousReputerRewardFractionRequest = exports.QueryListeningCoefficientResponse = exports.QueryListeningCoefficientRequest = exports.QueryReputersScoresAtBlockResponse = exports.QueryReputersScoresAtBlockRequest = exports.QueryWorkerForecastScoresAtBlockResponse = exports.QueryWorkerForecastScoresAtBlockRequest = exports.QueryForecastScoresUntilBlockResponse = exports.QueryForecastScoresUntilBlockRequest = exports.QueryWorkerInferenceScoresAtBlockResponse = exports.QueryWorkerInferenceScoresAtBlockRequest = exports.QueryInferenceScoresUntilBlockResponse = exports.QueryInferenceScoresUntilBlockRequest = exports.QueryLatestReputerScoreResponse = exports.QueryLatestReputerScoreRequest = exports.QueryLatestForecasterScoreResponse = exports.QueryLatestForecasterScoreRequest = exports.QueryLatestInfererScoreResponse = exports.QueryLatestInfererScoreRequest = exports.QueryRewardableTopicsResponse = exports.QueryRewardableTopicsRequest = exports.QueryTopicFeeRevenueResponse = exports.QueryTopicFeeRevenueRequest = exports.QueryIsTopicActiveResponse = exports.QueryIsTopicActiveRequest = exports.QueryTopicExistsResponse = exports.QueryTopicExistsRequest = exports.QueryPreviousTopicWeightResponse = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const inference_1 = require("./inference");
const node_1 = require("./node");
const nonce_1 = require("./nonce");
const params_1 = require("./params");
const reputer_1 = require("./reputer");
const score_1 = require("./score");
const stake_1 = require("./stake");
const topic_1 = require("./topic");
const types_1 = require("./types");
const worker_1 = require("./worker");
exports.protobufPackage = "emissions.v2";
function createBaseQueryNaiveInfererNetworkRegretRequest() {
    return { topicId: "0", inferer: "" };
}
exports.QueryNaiveInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.inferer !== "") {
            writer.uint32(18).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNaiveInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryNaiveInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryNaiveInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.inferer = (_b = object.inferer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryNaiveInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryNaiveInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNaiveInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryNaiveInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryNaiveInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryOneOutInfererInfererNetworkRegretRequest() {
    return { topicId: "0", oneOutInferer: "", inferer: "" };
}
exports.QueryOneOutInfererInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutInferer !== "") {
            writer.uint32(18).string(message.oneOutInferer);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutInfererInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutInferer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutInferer: isSet(object.oneOutInferer) ? globalThis.String(object.oneOutInferer) : "",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutInferer !== "") {
            obj.oneOutInferer = message.oneOutInferer;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutInfererInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryOneOutInfererInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutInferer = (_b = object.oneOutInferer) !== null && _b !== void 0 ? _b : "";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryOneOutInfererInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryOneOutInfererInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutInfererInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutInfererInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryOneOutInfererInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryOneOutInfererForecasterNetworkRegretRequest() {
    return { topicId: "0", oneOutInferer: "", forecaster: "" };
}
exports.QueryOneOutInfererForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutInferer !== "") {
            writer.uint32(18).string(message.oneOutInferer);
        }
        if (message.forecaster !== "") {
            writer.uint32(26).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutInfererForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutInferer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutInferer: isSet(object.oneOutInferer) ? globalThis.String(object.oneOutInferer) : "",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutInferer !== "") {
            obj.oneOutInferer = message.oneOutInferer;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutInfererForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryOneOutInfererForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutInferer = (_b = object.oneOutInferer) !== null && _b !== void 0 ? _b : "";
        message.forecaster = (_c = object.forecaster) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryOneOutInfererForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryOneOutInfererForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutInfererForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutInfererForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryOneOutInfererForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryOneOutForecasterInfererNetworkRegretRequest() {
    return { topicId: "0", oneOutForecaster: "", inferer: "" };
}
exports.QueryOneOutForecasterInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutForecaster !== "") {
            writer.uint32(18).string(message.oneOutForecaster);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutForecasterInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutForecaster = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutForecaster: isSet(object.oneOutForecaster) ? globalThis.String(object.oneOutForecaster) : "",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutForecaster !== "") {
            obj.oneOutForecaster = message.oneOutForecaster;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutForecasterInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryOneOutForecasterInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutForecaster = (_b = object.oneOutForecaster) !== null && _b !== void 0 ? _b : "";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryOneOutForecasterInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryOneOutForecasterInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutForecasterInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutForecasterInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryOneOutForecasterInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryOneOutForecasterForecasterNetworkRegretRequest() {
    return { topicId: "0", oneOutForecaster: "", forecaster: "" };
}
exports.QueryOneOutForecasterForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.oneOutForecaster !== "") {
            writer.uint32(18).string(message.oneOutForecaster);
        }
        if (message.forecaster !== "") {
            writer.uint32(26).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutForecasterForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.oneOutForecaster = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            oneOutForecaster: isSet(object.oneOutForecaster) ? globalThis.String(object.oneOutForecaster) : "",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.oneOutForecaster !== "") {
            obj.oneOutForecaster = message.oneOutForecaster;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutForecasterForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryOneOutForecasterForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.oneOutForecaster = (_b = object.oneOutForecaster) !== null && _b !== void 0 ? _b : "";
        message.forecaster = (_c = object.forecaster) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryOneOutForecasterForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryOneOutForecasterForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneOutForecasterForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneOutForecasterForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryOneOutForecasterForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryTotalStakeRequest() {
    return {};
}
exports.QueryTotalStakeRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTotalStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryTotalStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryTotalStakeRequest();
        return message;
    },
};
function createBaseQueryTotalStakeResponse() {
    return { amount: "" };
}
exports.QueryTotalStakeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTotalStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTotalStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTotalStakeResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryReputerStakeInTopicRequest() {
    return { address: "", topicId: "0" };
}
exports.QueryReputerStakeInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputerStakeInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputerStakeInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryReputerStakeInTopicRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryReputerStakeInTopicResponse() {
    return { amount: "" };
}
exports.QueryReputerStakeInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputerStakeInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputerStakeInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryReputerStakeInTopicResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryMultiReputerStakeInTopicRequest() {
    return { addresses: [], topicId: "0" };
}
exports.QueryMultiReputerStakeInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.addresses) {
            writer.uint32(10).string(v);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMultiReputerStakeInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryMultiReputerStakeInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryMultiReputerStakeInTopicRequest();
        message.addresses = ((_a = object.addresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryMultiReputerStakeInTopicResponse() {
    return { amounts: [] };
}
exports.QueryMultiReputerStakeInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.amounts) {
            stake_1.StakeInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMultiReputerStakeInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amounts.push(stake_1.StakeInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amounts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.amounts) ? object.amounts.map((e) => stake_1.StakeInfo.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.amounts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.amounts = message.amounts.map((e) => stake_1.StakeInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryMultiReputerStakeInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryMultiReputerStakeInTopicResponse();
        message.amounts = ((_a = object.amounts) === null || _a === void 0 ? void 0 : _a.map((e) => stake_1.StakeInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryStakeFromReputerInTopicInSelfRequest() {
    return { reputerAddress: "", topicId: "0" };
}
exports.QueryStakeFromReputerInTopicInSelfRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputerAddress !== "") {
            writer.uint32(10).string(message.reputerAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeFromReputerInTopicInSelfRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputerAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputerAddress !== "") {
            obj.reputerAddress = message.reputerAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeFromReputerInTopicInSelfRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStakeFromReputerInTopicInSelfRequest();
        message.reputerAddress = (_a = object.reputerAddress) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryStakeFromReputerInTopicInSelfResponse() {
    return { amount: "" };
}
exports.QueryStakeFromReputerInTopicInSelfResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeFromReputerInTopicInSelfResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeFromReputerInTopicInSelfResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStakeFromReputerInTopicInSelfResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDelegateStakeInTopicInReputerRequest() {
    return { reputerAddress: "", topicId: "0" };
}
exports.QueryDelegateStakeInTopicInReputerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputerAddress !== "") {
            writer.uint32(10).string(message.reputerAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeInTopicInReputerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputerAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputerAddress !== "") {
            obj.reputerAddress = message.reputerAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeInTopicInReputerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryDelegateStakeInTopicInReputerRequest();
        message.reputerAddress = (_a = object.reputerAddress) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryDelegateStakeInTopicInReputerResponse() {
    return { amount: "" };
}
exports.QueryDelegateStakeInTopicInReputerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeInTopicInReputerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeInTopicInReputerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDelegateStakeInTopicInReputerResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStakeFromDelegatorInTopicInReputerRequest() {
    return { delegatorAddress: "", reputerAddress: "", topicId: "0" };
}
exports.QueryStakeFromDelegatorInTopicInReputerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.reputerAddress !== "") {
            writer.uint32(18).string(message.reputerAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(24).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeFromDelegatorInTopicInReputerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegatorAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputerAddress = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
            reputerAddress: isSet(object.reputerAddress) ? globalThis.String(object.reputerAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegatorAddress !== "") {
            obj.delegatorAddress = message.delegatorAddress;
        }
        if (message.reputerAddress !== "") {
            obj.reputerAddress = message.reputerAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeFromDelegatorInTopicInReputerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryStakeFromDelegatorInTopicInReputerRequest();
        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : "";
        message.reputerAddress = (_b = object.reputerAddress) !== null && _b !== void 0 ? _b : "";
        message.topicId = (_c = object.topicId) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseQueryStakeFromDelegatorInTopicInReputerResponse() {
    return { amount: "" };
}
exports.QueryStakeFromDelegatorInTopicInReputerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeFromDelegatorInTopicInReputerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeFromDelegatorInTopicInReputerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStakeFromDelegatorInTopicInReputerResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStakeFromDelegatorInTopicRequest() {
    return { delegatorAddress: "", topicId: "0" };
}
exports.QueryStakeFromDelegatorInTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeFromDelegatorInTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegatorAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegatorAddress !== "") {
            obj.delegatorAddress = message.delegatorAddress;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeFromDelegatorInTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStakeFromDelegatorInTopicRequest();
        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryStakeFromDelegatorInTopicResponse() {
    return { amount: "" };
}
exports.QueryStakeFromDelegatorInTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeFromDelegatorInTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeFromDelegatorInTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStakeFromDelegatorInTopicResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTopicStakeRequest() {
    return { topicId: "0" };
}
exports.QueryTopicStakeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicStakeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicStakeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicStakeRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicStakeResponse() {
    return { amount: "" };
}
exports.QueryTopicStakeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicStakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicStakeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicStakeResponse();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryNetworkLossBundleAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryNetworkLossBundleAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNetworkLossBundleAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryNetworkLossBundleAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryNetworkLossBundleAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryNetworkLossBundleAtBlockResponse() {
    return { lossBundle: undefined };
}
exports.QueryNetworkLossBundleAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lossBundle !== undefined) {
            reputer_1.ValueBundle.encode(message.lossBundle, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNetworkLossBundleAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lossBundle = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lossBundle: isSet(object.lossBundle) ? reputer_1.ValueBundle.fromJSON(object.lossBundle) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lossBundle !== undefined) {
            obj.lossBundle = reputer_1.ValueBundle.toJSON(message.lossBundle);
        }
        return obj;
    },
    create(base) {
        return exports.QueryNetworkLossBundleAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryNetworkLossBundleAtBlockResponse();
        message.lossBundle = (object.lossBundle !== undefined && object.lossBundle !== null)
            ? reputer_1.ValueBundle.fromPartial(object.lossBundle)
            : undefined;
        return message;
    },
};
function createBaseQueryNextTopicIdRequest() {
    return {};
}
exports.QueryNextTopicIdRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNextTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryNextTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryNextTopicIdRequest();
        return message;
    },
};
function createBaseQueryNextTopicIdResponse() {
    return { nextTopicId: "0" };
}
exports.QueryNextTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nextTopicId !== "0") {
            writer.uint32(8).uint64(message.nextTopicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNextTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.nextTopicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nextTopicId: isSet(object.nextTopicId) ? globalThis.String(object.nextTopicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.nextTopicId !== "0") {
            obj.nextTopicId = message.nextTopicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryNextTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryNextTopicIdResponse();
        message.nextTopicId = (_a = object.nextTopicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicRequest() {
    return { topicId: "0" };
}
exports.QueryTopicRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicResponse() {
    return { topic: undefined, weight: "", effectiveRevenue: "" };
}
exports.QueryTopicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topic !== undefined) {
            topic_1.Topic.encode(message.topic, writer.uint32(10).fork()).join();
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        if (message.effectiveRevenue !== "") {
            writer.uint32(26).string(message.effectiveRevenue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topic = topic_1.Topic.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.effectiveRevenue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topic: isSet(object.topic) ? topic_1.Topic.fromJSON(object.topic) : undefined,
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
            effectiveRevenue: isSet(object.effectiveRevenue) ? globalThis.String(object.effectiveRevenue) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topic !== undefined) {
            obj.topic = topic_1.Topic.toJSON(message.topic);
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        if (message.effectiveRevenue !== "") {
            obj.effectiveRevenue = message.effectiveRevenue;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryTopicResponse();
        message.topic = (object.topic !== undefined && object.topic !== null) ? topic_1.Topic.fromPartial(object.topic) : undefined;
        message.weight = (_a = object.weight) !== null && _a !== void 0 ? _a : "";
        message.effectiveRevenue = (_b = object.effectiveRevenue) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryActiveTopicsRequest() {
    return { pagination: undefined };
}
exports.QueryActiveTopicsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            types_1.SimpleCursorPaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryActiveTopicsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = types_1.SimpleCursorPaginationRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? types_1.SimpleCursorPaginationRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = types_1.SimpleCursorPaginationRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryActiveTopicsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryActiveTopicsRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? types_1.SimpleCursorPaginationRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryActiveTopicsResponse() {
    return { topics: [], pagination: undefined };
}
exports.QueryActiveTopicsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.topics) {
            topic_1.Topic.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            types_1.SimpleCursorPaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryActiveTopicsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.topics.push(topic_1.Topic.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = types_1.SimpleCursorPaginationResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => topic_1.Topic.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? types_1.SimpleCursorPaginationResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => topic_1.Topic.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = types_1.SimpleCursorPaginationResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryActiveTopicsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryActiveTopicsResponse();
        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => topic_1.Topic.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? types_1.SimpleCursorPaginationResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryInferencesAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryInferencesAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInferencesAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryInferencesAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryInferencesAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryInferencesAtBlockResponse() {
    return { inferences: undefined };
}
exports.QueryInferencesAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferences !== undefined) {
            worker_1.Inferences.encode(message.inferences, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInferencesAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferences = worker_1.Inferences.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { inferences: isSet(object.inferences) ? worker_1.Inferences.fromJSON(object.inferences) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferences !== undefined) {
            obj.inferences = worker_1.Inferences.toJSON(message.inferences);
        }
        return obj;
    },
    create(base) {
        return exports.QueryInferencesAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryInferencesAtBlockResponse();
        message.inferences = (object.inferences !== undefined && object.inferences !== null)
            ? worker_1.Inferences.fromPartial(object.inferences)
            : undefined;
        return message;
    },
};
function createBaseQueryLatestTopicInferencesRequest() {
    return { topicId: "0" };
}
exports.QueryLatestTopicInferencesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestTopicInferencesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestTopicInferencesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryLatestTopicInferencesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryLatestTopicInferencesResponse() {
    return { inferences: undefined, blockHeight: "0" };
}
exports.QueryLatestTopicInferencesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferences !== undefined) {
            worker_1.Inferences.encode(message.inferences, writer.uint32(10).fork()).join();
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestTopicInferencesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inferences = worker_1.Inferences.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferences: isSet(object.inferences) ? worker_1.Inferences.fromJSON(object.inferences) : undefined,
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferences !== undefined) {
            obj.inferences = worker_1.Inferences.toJSON(message.inferences);
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestTopicInferencesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryLatestTopicInferencesResponse();
        message.inferences = (object.inferences !== undefined && object.inferences !== null)
            ? worker_1.Inferences.fromPartial(object.inferences)
            : undefined;
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryForecastsAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryForecastsAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryForecastsAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryForecastsAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryForecastsAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryForecastsAtBlockResponse() {
    return { forecasts: undefined };
}
exports.QueryForecastsAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.forecasts !== undefined) {
            worker_1.Forecasts.encode(message.forecasts, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryForecastsAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.forecasts = worker_1.Forecasts.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { forecasts: isSet(object.forecasts) ? worker_1.Forecasts.fromJSON(object.forecasts) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.forecasts !== undefined) {
            obj.forecasts = worker_1.Forecasts.toJSON(message.forecasts);
        }
        return obj;
    },
    create(base) {
        return exports.QueryForecastsAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryForecastsAtBlockResponse();
        message.forecasts = (object.forecasts !== undefined && object.forecasts !== null)
            ? worker_1.Forecasts.fromPartial(object.forecasts)
            : undefined;
        return message;
    },
};
function createBaseQueryWorkerLatestInferenceRequest() {
    return { topicId: "0", workerAddress: "" };
}
exports.QueryWorkerLatestInferenceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.workerAddress !== "") {
            writer.uint32(18).string(message.workerAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerLatestInferenceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.workerAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            workerAddress: isSet(object.workerAddress) ? globalThis.String(object.workerAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.workerAddress !== "") {
            obj.workerAddress = message.workerAddress;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerLatestInferenceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryWorkerLatestInferenceRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.workerAddress = (_b = object.workerAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryWorkerLatestInferenceResponse() {
    return { latestInference: undefined };
}
exports.QueryWorkerLatestInferenceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.latestInference !== undefined) {
            worker_1.Inference.encode(message.latestInference, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerLatestInferenceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.latestInference = worker_1.Inference.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { latestInference: isSet(object.latestInference) ? worker_1.Inference.fromJSON(object.latestInference) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.latestInference !== undefined) {
            obj.latestInference = worker_1.Inference.toJSON(message.latestInference);
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerLatestInferenceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryWorkerLatestInferenceResponse();
        message.latestInference = (object.latestInference !== undefined && object.latestInference !== null)
            ? worker_1.Inference.fromPartial(object.latestInference)
            : undefined;
        return message;
    },
};
function createBaseQueryWorkerNodeInfoRequest() {
    return { address: "" };
}
exports.QueryWorkerNodeInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerNodeInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerNodeInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryWorkerNodeInfoRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryWorkerNodeInfoResponse() {
    return { nodeInfo: undefined };
}
exports.QueryWorkerNodeInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nodeInfo !== undefined) {
            node_1.OffchainNode.encode(message.nodeInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerNodeInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nodeInfo = node_1.OffchainNode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nodeInfo: isSet(object.nodeInfo) ? node_1.OffchainNode.fromJSON(object.nodeInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeInfo !== undefined) {
            obj.nodeInfo = node_1.OffchainNode.toJSON(message.nodeInfo);
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerNodeInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryWorkerNodeInfoResponse();
        message.nodeInfo = (object.nodeInfo !== undefined && object.nodeInfo !== null)
            ? node_1.OffchainNode.fromPartial(object.nodeInfo)
            : undefined;
        return message;
    },
};
function createBaseQueryReputerNodeInfoRequest() {
    return { address: "" };
}
exports.QueryReputerNodeInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputerNodeInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputerNodeInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryReputerNodeInfoRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryReputerNodeInfoResponse() {
    return { nodeInfo: undefined };
}
exports.QueryReputerNodeInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nodeInfo !== undefined) {
            node_1.OffchainNode.encode(message.nodeInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputerNodeInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nodeInfo = node_1.OffchainNode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nodeInfo: isSet(object.nodeInfo) ? node_1.OffchainNode.fromJSON(object.nodeInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeInfo !== undefined) {
            obj.nodeInfo = node_1.OffchainNode.toJSON(message.nodeInfo);
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputerNodeInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryReputerNodeInfoResponse();
        message.nodeInfo = (object.nodeInfo !== undefined && object.nodeInfo !== null)
            ? node_1.OffchainNode.fromPartial(object.nodeInfo)
            : undefined;
        return message;
    },
};
function createBaseQueryNetworkInferencesAtBlockRequest() {
    return { topicId: "0", blockHeightLastInference: "0", blockHeightLastReward: "0" };
}
exports.QueryNetworkInferencesAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeightLastInference !== "0") {
            writer.uint32(16).int64(message.blockHeightLastInference);
        }
        if (message.blockHeightLastReward !== "0") {
            writer.uint32(24).int64(message.blockHeightLastReward);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNetworkInferencesAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeightLastInference = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeightLastReward = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeightLastInference: isSet(object.blockHeightLastInference)
                ? globalThis.String(object.blockHeightLastInference)
                : "0",
            blockHeightLastReward: isSet(object.blockHeightLastReward)
                ? globalThis.String(object.blockHeightLastReward)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeightLastInference !== "0") {
            obj.blockHeightLastInference = message.blockHeightLastInference;
        }
        if (message.blockHeightLastReward !== "0") {
            obj.blockHeightLastReward = message.blockHeightLastReward;
        }
        return obj;
    },
    create(base) {
        return exports.QueryNetworkInferencesAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryNetworkInferencesAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeightLastInference = (_b = object.blockHeightLastInference) !== null && _b !== void 0 ? _b : "0";
        message.blockHeightLastReward = (_c = object.blockHeightLastReward) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseQueryLatestNetworkInferencesRequest() {
    return { topicId: "0" };
}
exports.QueryLatestNetworkInferencesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestNetworkInferencesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestNetworkInferencesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryLatestNetworkInferencesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryIsWorkerNonceUnfulfilledRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryIsWorkerNonceUnfulfilledRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsWorkerNonceUnfulfilledRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsWorkerNonceUnfulfilledRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryIsWorkerNonceUnfulfilledRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryIsWorkerNonceUnfulfilledResponse() {
    return { isWorkerNonceUnfulfilled: false };
}
exports.QueryIsWorkerNonceUnfulfilledResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isWorkerNonceUnfulfilled !== false) {
            writer.uint32(8).bool(message.isWorkerNonceUnfulfilled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsWorkerNonceUnfulfilledResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isWorkerNonceUnfulfilled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isWorkerNonceUnfulfilled: isSet(object.isWorkerNonceUnfulfilled)
                ? globalThis.Boolean(object.isWorkerNonceUnfulfilled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isWorkerNonceUnfulfilled !== false) {
            obj.isWorkerNonceUnfulfilled = message.isWorkerNonceUnfulfilled;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsWorkerNonceUnfulfilledResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsWorkerNonceUnfulfilledResponse();
        message.isWorkerNonceUnfulfilled = (_a = object.isWorkerNonceUnfulfilled) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryUnfulfilledReputerNoncesRequest() {
    return { topicId: "0" };
}
exports.QueryUnfulfilledReputerNoncesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryUnfulfilledReputerNoncesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryUnfulfilledReputerNoncesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryUnfulfilledReputerNoncesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryUnfulfilledReputerNoncesResponse() {
    return { nonces: undefined };
}
exports.QueryUnfulfilledReputerNoncesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nonces !== undefined) {
            nonce_1.ReputerRequestNonces.encode(message.nonces, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryUnfulfilledReputerNoncesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nonces = nonce_1.ReputerRequestNonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonces: isSet(object.nonces) ? nonce_1.ReputerRequestNonces.fromJSON(object.nonces) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nonces !== undefined) {
            obj.nonces = nonce_1.ReputerRequestNonces.toJSON(message.nonces);
        }
        return obj;
    },
    create(base) {
        return exports.QueryUnfulfilledReputerNoncesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryUnfulfilledReputerNoncesResponse();
        message.nonces = (object.nonces !== undefined && object.nonces !== null)
            ? nonce_1.ReputerRequestNonces.fromPartial(object.nonces)
            : undefined;
        return message;
    },
};
function createBaseQueryUnfulfilledWorkerNoncesRequest() {
    return { topicId: "0" };
}
exports.QueryUnfulfilledWorkerNoncesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryUnfulfilledWorkerNoncesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryUnfulfilledWorkerNoncesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryUnfulfilledWorkerNoncesRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryUnfulfilledWorkerNoncesResponse() {
    return { nonces: undefined };
}
exports.QueryUnfulfilledWorkerNoncesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nonces !== undefined) {
            nonce_1.Nonces.encode(message.nonces, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryUnfulfilledWorkerNoncesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nonces = nonce_1.Nonces.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonces: isSet(object.nonces) ? nonce_1.Nonces.fromJSON(object.nonces) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.nonces !== undefined) {
            obj.nonces = nonce_1.Nonces.toJSON(message.nonces);
        }
        return obj;
    },
    create(base) {
        return exports.QueryUnfulfilledWorkerNoncesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryUnfulfilledWorkerNoncesResponse();
        message.nonces = (object.nonces !== undefined && object.nonces !== null)
            ? nonce_1.Nonces.fromPartial(object.nonces)
            : undefined;
        return message;
    },
};
function createBaseQueryInfererNetworkRegretRequest() {
    return { topicId: "0", actorId: "" };
}
exports.QueryInfererNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.actorId !== "") {
            writer.uint32(18).string(message.actorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInfererNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryInfererNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryInfererNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.actorId = (_b = object.actorId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryInfererNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryInfererNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInfererNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryInfererNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryInfererNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryForecasterNetworkRegretRequest() {
    return { topicId: "0", worker: "" };
}
exports.QueryForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.worker !== "") {
            writer.uint32(18).string(message.worker);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        return obj;
    },
    create(base) {
        return exports.QueryForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.worker = (_b = object.worker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryOneInForecasterNetworkRegretRequest() {
    return { topicId: "0", forecaster: "", inferer: "" };
}
exports.QueryOneInForecasterNetworkRegretRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.forecaster !== "") {
            writer.uint32(18).string(message.forecaster);
        }
        if (message.inferer !== "") {
            writer.uint32(26).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneInForecasterNetworkRegretRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneInForecasterNetworkRegretRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryOneInForecasterNetworkRegretRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.forecaster = (_b = object.forecaster) !== null && _b !== void 0 ? _b : "";
        message.inferer = (_c = object.inferer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryOneInForecasterNetworkRegretResponse() {
    return { regret: undefined };
}
exports.QueryOneInForecasterNetworkRegretResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.regret !== undefined) {
            worker_1.TimestampedValue.encode(message.regret, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOneInForecasterNetworkRegretResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.regret = worker_1.TimestampedValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { regret: isSet(object.regret) ? worker_1.TimestampedValue.fromJSON(object.regret) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.regret !== undefined) {
            obj.regret = worker_1.TimestampedValue.toJSON(message.regret);
        }
        return obj;
    },
    create(base) {
        return exports.QueryOneInForecasterNetworkRegretResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryOneInForecasterNetworkRegretResponse();
        message.regret = (object.regret !== undefined && object.regret !== null)
            ? worker_1.TimestampedValue.fromPartial(object.regret)
            : undefined;
        return message;
    },
};
function createBaseQueryIsReputerNonceUnfulfilledRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryIsReputerNonceUnfulfilledRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsReputerNonceUnfulfilledRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsReputerNonceUnfulfilledRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryIsReputerNonceUnfulfilledRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryIsReputerNonceUnfulfilledResponse() {
    return { isReputerNonceUnfulfilled: false };
}
exports.QueryIsReputerNonceUnfulfilledResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isReputerNonceUnfulfilled !== false) {
            writer.uint32(8).bool(message.isReputerNonceUnfulfilled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsReputerNonceUnfulfilledResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isReputerNonceUnfulfilled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isReputerNonceUnfulfilled: isSet(object.isReputerNonceUnfulfilled)
                ? globalThis.Boolean(object.isReputerNonceUnfulfilled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isReputerNonceUnfulfilled !== false) {
            obj.isReputerNonceUnfulfilled = message.isReputerNonceUnfulfilled;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsReputerNonceUnfulfilledResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsReputerNonceUnfulfilledResponse();
        message.isReputerNonceUnfulfilled = (_a = object.isReputerNonceUnfulfilled) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryNetworkInferencesAtBlockResponse() {
    return { networkInferences: undefined };
}
exports.QueryNetworkInferencesAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.networkInferences !== undefined) {
            reputer_1.ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNetworkInferencesAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.networkInferences = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            networkInferences: isSet(object.networkInferences) ? reputer_1.ValueBundle.fromJSON(object.networkInferences) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.networkInferences !== undefined) {
            obj.networkInferences = reputer_1.ValueBundle.toJSON(message.networkInferences);
        }
        return obj;
    },
    create(base) {
        return exports.QueryNetworkInferencesAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryNetworkInferencesAtBlockResponse();
        message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
            ? reputer_1.ValueBundle.fromPartial(object.networkInferences)
            : undefined;
        return message;
    },
};
function createBaseQueryLatestNetworkInferencesResponse() {
    return {
        networkInferences: undefined,
        infererWeights: [],
        forecasterWeights: [],
        forecastImpliedInferences: [],
        inferenceBlockHeight: "0",
        lossBlockHeight: "0",
        confidenceIntervalRawPercentiles: [],
        confidenceIntervalValues: [],
    };
}
exports.QueryLatestNetworkInferencesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.networkInferences !== undefined) {
            reputer_1.ValueBundle.encode(message.networkInferences, writer.uint32(10).fork()).join();
        }
        for (const v of message.infererWeights) {
            inference_1.RegretInformedWeight.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.forecasterWeights) {
            inference_1.RegretInformedWeight.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.forecastImpliedInferences) {
            reputer_1.WorkerAttributedValue.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.inferenceBlockHeight !== "0") {
            writer.uint32(40).int64(message.inferenceBlockHeight);
        }
        if (message.lossBlockHeight !== "0") {
            writer.uint32(48).int64(message.lossBlockHeight);
        }
        for (const v of message.confidenceIntervalRawPercentiles) {
            writer.uint32(58).string(v);
        }
        for (const v of message.confidenceIntervalValues) {
            writer.uint32(66).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestNetworkInferencesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.networkInferences = reputer_1.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.infererWeights.push(inference_1.RegretInformedWeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.forecasterWeights.push(inference_1.RegretInformedWeight.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.forecastImpliedInferences.push(reputer_1.WorkerAttributedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.inferenceBlockHeight = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.lossBlockHeight = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.confidenceIntervalRawPercentiles.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.confidenceIntervalValues.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            networkInferences: isSet(object.networkInferences) ? reputer_1.ValueBundle.fromJSON(object.networkInferences) : undefined,
            infererWeights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererWeights)
                ? object.infererWeights.map((e) => inference_1.RegretInformedWeight.fromJSON(e))
                : [],
            forecasterWeights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterWeights)
                ? object.forecasterWeights.map((e) => inference_1.RegretInformedWeight.fromJSON(e))
                : [],
            forecastImpliedInferences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecastImpliedInferences)
                ? object.forecastImpliedInferences.map((e) => reputer_1.WorkerAttributedValue.fromJSON(e))
                : [],
            inferenceBlockHeight: isSet(object.inferenceBlockHeight) ? globalThis.String(object.inferenceBlockHeight) : "0",
            lossBlockHeight: isSet(object.lossBlockHeight) ? globalThis.String(object.lossBlockHeight) : "0",
            confidenceIntervalRawPercentiles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.confidenceIntervalRawPercentiles)
                ? object.confidenceIntervalRawPercentiles.map((e) => globalThis.String(e))
                : [],
            confidenceIntervalValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.confidenceIntervalValues)
                ? object.confidenceIntervalValues.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e;
        const obj = {};
        if (message.networkInferences !== undefined) {
            obj.networkInferences = reputer_1.ValueBundle.toJSON(message.networkInferences);
        }
        if ((_a = message.infererWeights) === null || _a === void 0 ? void 0 : _a.length) {
            obj.infererWeights = message.infererWeights.map((e) => inference_1.RegretInformedWeight.toJSON(e));
        }
        if ((_b = message.forecasterWeights) === null || _b === void 0 ? void 0 : _b.length) {
            obj.forecasterWeights = message.forecasterWeights.map((e) => inference_1.RegretInformedWeight.toJSON(e));
        }
        if ((_c = message.forecastImpliedInferences) === null || _c === void 0 ? void 0 : _c.length) {
            obj.forecastImpliedInferences = message.forecastImpliedInferences.map((e) => reputer_1.WorkerAttributedValue.toJSON(e));
        }
        if (message.inferenceBlockHeight !== "0") {
            obj.inferenceBlockHeight = message.inferenceBlockHeight;
        }
        if (message.lossBlockHeight !== "0") {
            obj.lossBlockHeight = message.lossBlockHeight;
        }
        if ((_d = message.confidenceIntervalRawPercentiles) === null || _d === void 0 ? void 0 : _d.length) {
            obj.confidenceIntervalRawPercentiles = message.confidenceIntervalRawPercentiles;
        }
        if ((_e = message.confidenceIntervalValues) === null || _e === void 0 ? void 0 : _e.length) {
            obj.confidenceIntervalValues = message.confidenceIntervalValues;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestNetworkInferencesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseQueryLatestNetworkInferencesResponse();
        message.networkInferences = (object.networkInferences !== undefined && object.networkInferences !== null)
            ? reputer_1.ValueBundle.fromPartial(object.networkInferences)
            : undefined;
        message.infererWeights = ((_a = object.infererWeights) === null || _a === void 0 ? void 0 : _a.map((e) => inference_1.RegretInformedWeight.fromPartial(e))) || [];
        message.forecasterWeights = ((_b = object.forecasterWeights) === null || _b === void 0 ? void 0 : _b.map((e) => inference_1.RegretInformedWeight.fromPartial(e))) || [];
        message.forecastImpliedInferences =
            ((_c = object.forecastImpliedInferences) === null || _c === void 0 ? void 0 : _c.map((e) => reputer_1.WorkerAttributedValue.fromPartial(e))) || [];
        message.inferenceBlockHeight = (_d = object.inferenceBlockHeight) !== null && _d !== void 0 ? _d : "0";
        message.lossBlockHeight = (_e = object.lossBlockHeight) !== null && _e !== void 0 ? _e : "0";
        message.confidenceIntervalRawPercentiles = ((_f = object.confidenceIntervalRawPercentiles) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.confidenceIntervalValues = ((_g = object.confidenceIntervalValues) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryIsWorkerRegisteredInTopicIdRequest() {
    return { topicId: "0", address: "" };
}
exports.QueryIsWorkerRegisteredInTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsWorkerRegisteredInTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsWorkerRegisteredInTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryIsWorkerRegisteredInTopicIdRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryIsWorkerRegisteredInTopicIdResponse() {
    return { isRegistered: false };
}
exports.QueryIsWorkerRegisteredInTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isRegistered !== false) {
            writer.uint32(8).bool(message.isRegistered);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsWorkerRegisteredInTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isRegistered = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isRegistered !== false) {
            obj.isRegistered = message.isRegistered;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsWorkerRegisteredInTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsWorkerRegisteredInTopicIdResponse();
        message.isRegistered = (_a = object.isRegistered) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryIsReputerRegisteredInTopicIdRequest() {
    return { topicId: "0", address: "" };
}
exports.QueryIsReputerRegisteredInTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsReputerRegisteredInTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsReputerRegisteredInTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryIsReputerRegisteredInTopicIdRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryIsReputerRegisteredInTopicIdResponse() {
    return { isRegistered: false };
}
exports.QueryIsReputerRegisteredInTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isRegistered !== false) {
            writer.uint32(8).bool(message.isRegistered);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsReputerRegisteredInTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isRegistered = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isRegistered !== false) {
            obj.isRegistered = message.isRegistered;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsReputerRegisteredInTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsReputerRegisteredInTopicIdResponse();
        message.isRegistered = (_a = object.isRegistered) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryIsWhitelistAdminRequest() {
    return { address: "" };
}
exports.QueryIsWhitelistAdminRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsWhitelistAdminRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsWhitelistAdminRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsWhitelistAdminRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryIsWhitelistAdminResponse() {
    return { isAdmin: false };
}
exports.QueryIsWhitelistAdminResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isAdmin !== false) {
            writer.uint32(8).bool(message.isAdmin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsWhitelistAdminResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isAdmin = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isAdmin: isSet(object.isAdmin) ? globalThis.Boolean(object.isAdmin) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isAdmin !== false) {
            obj.isAdmin = message.isAdmin;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsWhitelistAdminResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsWhitelistAdminResponse();
        message.isAdmin = (_a = object.isAdmin) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryStakeRemovalsUpUntilBlockRequest() {
    return { blockHeight: "0" };
}
exports.QueryStakeRemovalsUpUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeRemovalsUpUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeRemovalsUpUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStakeRemovalsUpUntilBlockRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryStakeRemovalsUpUntilBlockResponse() {
    return { removals: [] };
}
exports.QueryStakeRemovalsUpUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.removals) {
            stake_1.StakeRemovalInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeRemovalsUpUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removals.push(stake_1.StakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            removals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.removals)
                ? object.removals.map((e) => stake_1.StakeRemovalInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.removals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.removals = message.removals.map((e) => stake_1.StakeRemovalInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeRemovalsUpUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStakeRemovalsUpUntilBlockResponse();
        message.removals = ((_a = object.removals) === null || _a === void 0 ? void 0 : _a.map((e) => stake_1.StakeRemovalInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryDelegateStakeRemovalsUpUntilBlockRequest() {
    return { blockHeight: "0" };
}
exports.QueryDelegateStakeRemovalsUpUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeRemovalsUpUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryDelegateStakeRemovalsUpUntilBlockResponse() {
    return { removals: [] };
}
exports.QueryDelegateStakeRemovalsUpUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.removals) {
            stake_1.DelegateStakeRemovalInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removals.push(stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            removals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.removals)
                ? object.removals.map((e) => stake_1.DelegateStakeRemovalInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.removals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.removals = message.removals.map((e) => stake_1.DelegateStakeRemovalInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeRemovalsUpUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDelegateStakeRemovalsUpUntilBlockResponse();
        message.removals = ((_a = object.removals) === null || _a === void 0 ? void 0 : _a.map((e) => stake_1.DelegateStakeRemovalInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryStakeRemovalInfoRequest() {
    return { topicId: "0", reputer: "" };
}
exports.QueryStakeRemovalInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeRemovalInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeRemovalInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStakeRemovalInfoRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryStakeRemovalInfoResponse() {
    return { removal: undefined };
}
exports.QueryStakeRemovalInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.removal !== undefined) {
            stake_1.StakeRemovalInfo.encode(message.removal, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeRemovalInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removal = stake_1.StakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { removal: isSet(object.removal) ? stake_1.StakeRemovalInfo.fromJSON(object.removal) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.removal !== undefined) {
            obj.removal = stake_1.StakeRemovalInfo.toJSON(message.removal);
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeRemovalInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryStakeRemovalInfoResponse();
        message.removal = (object.removal !== undefined && object.removal !== null)
            ? stake_1.StakeRemovalInfo.fromPartial(object.removal)
            : undefined;
        return message;
    },
};
function createBaseQueryDelegateStakeRemovalInfoRequest() {
    return { topicId: "0", delegator: "", reputer: "" };
}
exports.QueryDelegateStakeRemovalInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(18).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeRemovalInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeRemovalInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryDelegateStakeRemovalInfoRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.delegator = (_b = object.delegator) !== null && _b !== void 0 ? _b : "";
        message.reputer = (_c = object.reputer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryDelegateStakeRemovalInfoResponse() {
    return { removal: undefined };
}
exports.QueryDelegateStakeRemovalInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.removal !== undefined) {
            stake_1.DelegateStakeRemovalInfo.encode(message.removal, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeRemovalInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.removal = stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { removal: isSet(object.removal) ? stake_1.DelegateStakeRemovalInfo.fromJSON(object.removal) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.removal !== undefined) {
            obj.removal = stake_1.DelegateStakeRemovalInfo.toJSON(message.removal);
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeRemovalInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryDelegateStakeRemovalInfoResponse();
        message.removal = (object.removal !== undefined && object.removal !== null)
            ? stake_1.DelegateStakeRemovalInfo.fromPartial(object.removal)
            : undefined;
        return message;
    },
};
function createBaseQueryTopicLastCommitRequest() {
    return { topicId: "0" };
}
exports.QueryTopicLastCommitRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicLastCommitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicLastCommitRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicLastCommitRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicLastCommitResponse() {
    return { lastCommit: undefined };
}
exports.QueryTopicLastCommitResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lastCommit !== undefined) {
            topic_1.TimestampedActorNonce.encode(message.lastCommit, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicLastCommitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lastCommit = topic_1.TimestampedActorNonce.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lastCommit: isSet(object.lastCommit) ? topic_1.TimestampedActorNonce.fromJSON(object.lastCommit) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastCommit !== undefined) {
            obj.lastCommit = topic_1.TimestampedActorNonce.toJSON(message.lastCommit);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicLastCommitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryTopicLastCommitResponse();
        message.lastCommit = (object.lastCommit !== undefined && object.lastCommit !== null)
            ? topic_1.TimestampedActorNonce.fromPartial(object.lastCommit)
            : undefined;
        return message;
    },
};
function createBaseQueryTopicRewardNonceRequest() {
    return { topicId: "0" };
}
exports.QueryTopicRewardNonceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicRewardNonceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicRewardNonceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicRewardNonceRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicRewardNonceResponse() {
    return { nonce: "0" };
}
exports.QueryTopicRewardNonceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nonce !== "0") {
            writer.uint32(8).int64(message.nonce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicRewardNonceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.nonce = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.nonce !== "0") {
            obj.nonce = message.nonce;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicRewardNonceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicRewardNonceResponse();
        message.nonce = (_a = object.nonce) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryReputerLossBundlesAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryReputerLossBundlesAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputerLossBundlesAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputerLossBundlesAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryReputerLossBundlesAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryReputerLossBundlesAtBlockResponse() {
    return { lossBundles: undefined };
}
exports.QueryReputerLossBundlesAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lossBundles !== undefined) {
            reputer_1.ReputerValueBundles.encode(message.lossBundles, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputerLossBundlesAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lossBundles = reputer_1.ReputerValueBundles.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lossBundles: isSet(object.lossBundles) ? reputer_1.ReputerValueBundles.fromJSON(object.lossBundles) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.lossBundles !== undefined) {
            obj.lossBundles = reputer_1.ReputerValueBundles.toJSON(message.lossBundles);
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputerLossBundlesAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryReputerLossBundlesAtBlockResponse();
        message.lossBundles = (object.lossBundles !== undefined && object.lossBundles !== null)
            ? reputer_1.ReputerValueBundles.fromPartial(object.lossBundles)
            : undefined;
        return message;
    },
};
function createBaseQueryStakeReputerAuthorityRequest() {
    return { topicId: "0", reputer: "" };
}
exports.QueryStakeReputerAuthorityRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeReputerAuthorityRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeReputerAuthorityRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStakeReputerAuthorityRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryStakeReputerAuthorityResponse() {
    return { authority: "" };
}
exports.QueryStakeReputerAuthorityResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeReputerAuthorityResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { authority: isSet(object.authority) ? globalThis.String(object.authority) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeReputerAuthorityResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStakeReputerAuthorityResponse();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDelegateStakePlacementRequest() {
    return { topicId: "0", delegator: "", target: "" };
}
exports.QueryDelegateStakePlacementRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(18).string(message.delegator);
        }
        if (message.target !== "") {
            writer.uint32(26).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakePlacementRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            target: isSet(object.target) ? globalThis.String(object.target) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.target !== "") {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakePlacementRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryDelegateStakePlacementRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.delegator = (_b = object.delegator) !== null && _b !== void 0 ? _b : "";
        message.target = (_c = object.target) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryDelegateStakePlacementResponse() {
    return { delegatorInfo: undefined };
}
exports.QueryDelegateStakePlacementResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.delegatorInfo !== undefined) {
            stake_1.DelegatorInfo.encode(message.delegatorInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakePlacementResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.delegatorInfo = stake_1.DelegatorInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { delegatorInfo: isSet(object.delegatorInfo) ? stake_1.DelegatorInfo.fromJSON(object.delegatorInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.delegatorInfo !== undefined) {
            obj.delegatorInfo = stake_1.DelegatorInfo.toJSON(message.delegatorInfo);
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakePlacementResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryDelegateStakePlacementResponse();
        message.delegatorInfo = (object.delegatorInfo !== undefined && object.delegatorInfo !== null)
            ? stake_1.DelegatorInfo.fromPartial(object.delegatorInfo)
            : undefined;
        return message;
    },
};
function createBaseQueryDelegateStakeUponReputerRequest() {
    return { topicId: "0", target: "" };
}
exports.QueryDelegateStakeUponReputerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.target !== "") {
            writer.uint32(18).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeUponReputerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            target: isSet(object.target) ? globalThis.String(object.target) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.target !== "") {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeUponReputerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryDelegateStakeUponReputerRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.target = (_b = object.target) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryDelegateStakeUponReputerResponse() {
    return { stake: "" };
}
exports.QueryDelegateStakeUponReputerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stake !== "") {
            writer.uint32(10).string(message.stake);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeUponReputerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stake = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { stake: isSet(object.stake) ? globalThis.String(object.stake) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.stake !== "") {
            obj.stake = message.stake;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeUponReputerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDelegateStakeUponReputerResponse();
        message.stake = (_a = object.stake) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDelegateRewardPerShareRequest() {
    return { topicId: "0", reputer: "" };
}
exports.QueryDelegateRewardPerShareRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateRewardPerShareRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateRewardPerShareRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryDelegateRewardPerShareRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryDelegateRewardPerShareResponse() {
    return { rewardPerShare: "" };
}
exports.QueryDelegateRewardPerShareResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardPerShare !== "") {
            writer.uint32(10).string(message.rewardPerShare);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateRewardPerShareResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardPerShare = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { rewardPerShare: isSet(object.rewardPerShare) ? globalThis.String(object.rewardPerShare) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardPerShare !== "") {
            obj.rewardPerShare = message.rewardPerShare;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateRewardPerShareResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDelegateRewardPerShareResponse();
        message.rewardPerShare = (_a = object.rewardPerShare) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStakeRemovalForReputerAndTopicIdRequest() {
    return { reputer: "", topicId: "0" };
}
exports.QueryStakeRemovalForReputerAndTopicIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reputer !== "") {
            writer.uint32(10).string(message.reputer);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeRemovalForReputerAndTopicIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeRemovalForReputerAndTopicIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStakeRemovalForReputerAndTopicIdRequest();
        message.reputer = (_a = object.reputer) !== null && _a !== void 0 ? _a : "";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryStakeRemovalForReputerAndTopicIdResponse() {
    return { stakeRemovalInfo: undefined };
}
exports.QueryStakeRemovalForReputerAndTopicIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stakeRemovalInfo !== undefined) {
            stake_1.StakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakeRemovalForReputerAndTopicIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakeRemovalInfo = stake_1.StakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stakeRemovalInfo: isSet(object.stakeRemovalInfo)
                ? stake_1.StakeRemovalInfo.fromJSON(object.stakeRemovalInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stakeRemovalInfo !== undefined) {
            obj.stakeRemovalInfo = stake_1.StakeRemovalInfo.toJSON(message.stakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakeRemovalForReputerAndTopicIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryStakeRemovalForReputerAndTopicIdResponse();
        message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
            ? stake_1.StakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
            : undefined;
        return message;
    },
};
function createBaseQueryDelegateStakeRemovalRequest() {
    return { blockHeight: "0", topicId: "0", delegator: "", reputer: "" };
}
exports.QueryDelegateStakeRemovalRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.topicId !== "0") {
            writer.uint32(16).uint64(message.topicId);
        }
        if (message.delegator !== "") {
            writer.uint32(26).string(message.delegator);
        }
        if (message.reputer !== "") {
            writer.uint32(34).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeRemovalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.delegator = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            delegator: isSet(object.delegator) ? globalThis.String(object.delegator) : "",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.delegator !== "") {
            obj.delegator = message.delegator;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeRemovalRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQueryDelegateStakeRemovalRequest();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.topicId = (_b = object.topicId) !== null && _b !== void 0 ? _b : "0";
        message.delegator = (_c = object.delegator) !== null && _c !== void 0 ? _c : "";
        message.reputer = (_d = object.reputer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseQueryDelegateStakeRemovalResponse() {
    return { stakeRemovalInfo: undefined };
}
exports.QueryDelegateStakeRemovalResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stakeRemovalInfo !== undefined) {
            stake_1.DelegateStakeRemovalInfo.encode(message.stakeRemovalInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelegateStakeRemovalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stakeRemovalInfo: isSet(object.stakeRemovalInfo)
                ? stake_1.DelegateStakeRemovalInfo.fromJSON(object.stakeRemovalInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stakeRemovalInfo !== undefined) {
            obj.stakeRemovalInfo = stake_1.DelegateStakeRemovalInfo.toJSON(message.stakeRemovalInfo);
        }
        return obj;
    },
    create(base) {
        return exports.QueryDelegateStakeRemovalResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryDelegateStakeRemovalResponse();
        message.stakeRemovalInfo = (object.stakeRemovalInfo !== undefined && object.stakeRemovalInfo !== null)
            ? stake_1.DelegateStakeRemovalInfo.fromPartial(object.stakeRemovalInfo)
            : undefined;
        return message;
    },
};
function createBaseQueryPreviousTopicWeightRequest() {
    return { topicId: "0" };
}
exports.QueryPreviousTopicWeightRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousTopicWeightRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousTopicWeightRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryPreviousTopicWeightRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryPreviousTopicWeightResponse() {
    return { weight: "", notFound: false };
}
exports.QueryPreviousTopicWeightResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.weight !== "") {
            writer.uint32(10).string(message.weight);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousTopicWeightResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousTopicWeightResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousTopicWeightResponse();
        message.weight = (_a = object.weight) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseQueryTopicExistsRequest() {
    return { topicId: "0" };
}
exports.QueryTopicExistsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicExistsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicExistsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicExistsRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicExistsResponse() {
    return { exists: false };
}
exports.QueryTopicExistsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.exists !== false) {
            writer.uint32(8).bool(message.exists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicExistsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.exists = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.exists !== false) {
            obj.exists = message.exists;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicExistsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicExistsResponse();
        message.exists = (_a = object.exists) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryIsTopicActiveRequest() {
    return { topicId: "0" };
}
exports.QueryIsTopicActiveRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsTopicActiveRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsTopicActiveRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsTopicActiveRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryIsTopicActiveResponse() {
    return { isActive: false };
}
exports.QueryIsTopicActiveResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isActive !== false) {
            writer.uint32(8).bool(message.isActive);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsTopicActiveResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isActive = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isActive !== false) {
            obj.isActive = message.isActive;
        }
        return obj;
    },
    create(base) {
        return exports.QueryIsTopicActiveResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryIsTopicActiveResponse();
        message.isActive = (_a = object.isActive) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryTopicFeeRevenueRequest() {
    return { topicId: "0" };
}
exports.QueryTopicFeeRevenueRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicFeeRevenueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicFeeRevenueRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicFeeRevenueRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryTopicFeeRevenueResponse() {
    return { feeRevenue: "" };
}
exports.QueryTopicFeeRevenueResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.feeRevenue !== "") {
            writer.uint32(10).string(message.feeRevenue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTopicFeeRevenueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.feeRevenue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { feeRevenue: isSet(object.feeRevenue) ? globalThis.String(object.feeRevenue) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.feeRevenue !== "") {
            obj.feeRevenue = message.feeRevenue;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTopicFeeRevenueResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTopicFeeRevenueResponse();
        message.feeRevenue = (_a = object.feeRevenue) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryRewardableTopicsRequest() {
    return {};
}
exports.QueryRewardableTopicsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardableTopicsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryRewardableTopicsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryRewardableTopicsRequest();
        return message;
    },
};
function createBaseQueryRewardableTopicsResponse() {
    return { rewardableTopicIds: [] };
}
exports.QueryRewardableTopicsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.rewardableTopicIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardableTopicsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.rewardableTopicIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.rewardableTopicIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardableTopicIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewardableTopicIds)
                ? object.rewardableTopicIds.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.rewardableTopicIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.rewardableTopicIds = message.rewardableTopicIds;
        }
        return obj;
    },
    create(base) {
        return exports.QueryRewardableTopicsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryRewardableTopicsResponse();
        message.rewardableTopicIds = ((_a = object.rewardableTopicIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryLatestInfererScoreRequest() {
    return { topicId: "0", inferer: "" };
}
exports.QueryLatestInfererScoreRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.inferer !== "") {
            writer.uint32(18).string(message.inferer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestInfererScoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inferer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.inferer !== "") {
            obj.inferer = message.inferer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestInfererScoreRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryLatestInfererScoreRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.inferer = (_b = object.inferer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryLatestInfererScoreResponse() {
    return { score: undefined };
}
exports.QueryLatestInfererScoreResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestInfererScoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestInfererScoreResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryLatestInfererScoreResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseQueryLatestForecasterScoreRequest() {
    return { topicId: "0", forecaster: "" };
}
exports.QueryLatestForecasterScoreRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.forecaster !== "") {
            writer.uint32(18).string(message.forecaster);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestForecasterScoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forecaster = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.forecaster !== "") {
            obj.forecaster = message.forecaster;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestForecasterScoreRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryLatestForecasterScoreRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.forecaster = (_b = object.forecaster) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryLatestForecasterScoreResponse() {
    return { score: undefined };
}
exports.QueryLatestForecasterScoreResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestForecasterScoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestForecasterScoreResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryLatestForecasterScoreResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseQueryLatestReputerScoreRequest() {
    return { topicId: "0", reputer: "" };
}
exports.QueryLatestReputerScoreRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestReputerScoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestReputerScoreRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryLatestReputerScoreRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryLatestReputerScoreResponse() {
    return { score: undefined };
}
exports.QueryLatestReputerScoreResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.score !== undefined) {
            score_1.Score.encode(message.score, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestReputerScoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.score = score_1.Score.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { score: isSet(object.score) ? score_1.Score.fromJSON(object.score) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.score !== undefined) {
            obj.score = score_1.Score.toJSON(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.QueryLatestReputerScoreResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryLatestReputerScoreResponse();
        message.score = (object.score !== undefined && object.score !== null) ? score_1.Score.fromPartial(object.score) : undefined;
        return message;
    },
};
function createBaseQueryInferenceScoresUntilBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryInferenceScoresUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInferenceScoresUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryInferenceScoresUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryInferenceScoresUntilBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryInferenceScoresUntilBlockResponse() {
    return { scores: [] };
}
exports.QueryInferenceScoresUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.scores) {
            score_1.Score.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInferenceScoresUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores.push(score_1.Score.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => score_1.Score.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.scores) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scores = message.scores.map((e) => score_1.Score.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryInferenceScoresUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryInferenceScoresUntilBlockResponse();
        message.scores = ((_a = object.scores) === null || _a === void 0 ? void 0 : _a.map((e) => score_1.Score.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryWorkerInferenceScoresAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryWorkerInferenceScoresAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerInferenceScoresAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerInferenceScoresAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryWorkerInferenceScoresAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryWorkerInferenceScoresAtBlockResponse() {
    return { scores: undefined };
}
exports.QueryWorkerInferenceScoresAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerInferenceScoresAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerInferenceScoresAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryWorkerInferenceScoresAtBlockResponse();
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseQueryForecastScoresUntilBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryForecastScoresUntilBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryForecastScoresUntilBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryForecastScoresUntilBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryForecastScoresUntilBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryForecastScoresUntilBlockResponse() {
    return { scores: [] };
}
exports.QueryForecastScoresUntilBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.scores) {
            score_1.Score.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryForecastScoresUntilBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores.push(score_1.Score.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scores) ? object.scores.map((e) => score_1.Score.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.scores) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scores = message.scores.map((e) => score_1.Score.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryForecastScoresUntilBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryForecastScoresUntilBlockResponse();
        message.scores = ((_a = object.scores) === null || _a === void 0 ? void 0 : _a.map((e) => score_1.Score.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryWorkerForecastScoresAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryWorkerForecastScoresAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerForecastScoresAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerForecastScoresAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryWorkerForecastScoresAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryWorkerForecastScoresAtBlockResponse() {
    return { scores: undefined };
}
exports.QueryWorkerForecastScoresAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWorkerForecastScoresAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.QueryWorkerForecastScoresAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryWorkerForecastScoresAtBlockResponse();
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseQueryReputersScoresAtBlockRequest() {
    return { topicId: "0", blockHeight: "0" };
}
exports.QueryReputersScoresAtBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.blockHeight !== "0") {
            writer.uint32(16).int64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputersScoresAtBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockHeight = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.blockHeight !== "0") {
            obj.blockHeight = message.blockHeight;
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputersScoresAtBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryReputersScoresAtBlockRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.blockHeight = (_b = object.blockHeight) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseQueryReputersScoresAtBlockResponse() {
    return { scores: undefined };
}
exports.QueryReputersScoresAtBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scores !== undefined) {
            score_1.Scores.encode(message.scores, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReputersScoresAtBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.scores = score_1.Scores.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { scores: isSet(object.scores) ? score_1.Scores.fromJSON(object.scores) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.scores !== undefined) {
            obj.scores = score_1.Scores.toJSON(message.scores);
        }
        return obj;
    },
    create(base) {
        return exports.QueryReputersScoresAtBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryReputersScoresAtBlockResponse();
        message.scores = (object.scores !== undefined && object.scores !== null)
            ? score_1.Scores.fromPartial(object.scores)
            : undefined;
        return message;
    },
};
function createBaseQueryListeningCoefficientRequest() {
    return { topicId: "0", reputer: "" };
}
exports.QueryListeningCoefficientRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListeningCoefficientRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryListeningCoefficientRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryListeningCoefficientRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryListeningCoefficientResponse() {
    return { listeningCoefficient: undefined };
}
exports.QueryListeningCoefficientResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.listeningCoefficient !== undefined) {
            types_1.ListeningCoefficient.encode(message.listeningCoefficient, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListeningCoefficientResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.listeningCoefficient = types_1.ListeningCoefficient.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            listeningCoefficient: isSet(object.listeningCoefficient)
                ? types_1.ListeningCoefficient.fromJSON(object.listeningCoefficient)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.listeningCoefficient !== undefined) {
            obj.listeningCoefficient = types_1.ListeningCoefficient.toJSON(message.listeningCoefficient);
        }
        return obj;
    },
    create(base) {
        return exports.QueryListeningCoefficientResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryListeningCoefficientResponse();
        message.listeningCoefficient = (object.listeningCoefficient !== undefined && object.listeningCoefficient !== null)
            ? types_1.ListeningCoefficient.fromPartial(object.listeningCoefficient)
            : undefined;
        return message;
    },
};
function createBaseQueryPreviousReputerRewardFractionRequest() {
    return { topicId: "0", reputer: "" };
}
exports.QueryPreviousReputerRewardFractionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputer !== "") {
            writer.uint32(18).string(message.reputer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousReputerRewardFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousReputerRewardFractionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousReputerRewardFractionRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryPreviousReputerRewardFractionResponse() {
    return { rewardFraction: "", notFound: false };
}
exports.QueryPreviousReputerRewardFractionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardFraction !== "") {
            writer.uint32(10).string(message.rewardFraction);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousReputerRewardFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardFraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardFraction !== "") {
            obj.rewardFraction = message.rewardFraction;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousReputerRewardFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousReputerRewardFractionResponse();
        message.rewardFraction = (_a = object.rewardFraction) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseQueryPreviousInferenceRewardFractionRequest() {
    return { topicId: "0", worker: "" };
}
exports.QueryPreviousInferenceRewardFractionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.worker !== "") {
            writer.uint32(18).string(message.worker);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousInferenceRewardFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousInferenceRewardFractionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousInferenceRewardFractionRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.worker = (_b = object.worker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryPreviousInferenceRewardFractionResponse() {
    return { rewardFraction: "", notFound: false };
}
exports.QueryPreviousInferenceRewardFractionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardFraction !== "") {
            writer.uint32(10).string(message.rewardFraction);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousInferenceRewardFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardFraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardFraction !== "") {
            obj.rewardFraction = message.rewardFraction;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousInferenceRewardFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousInferenceRewardFractionResponse();
        message.rewardFraction = (_a = object.rewardFraction) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseQueryPreviousForecastRewardFractionRequest() {
    return { topicId: "0", worker: "" };
}
exports.QueryPreviousForecastRewardFractionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.worker !== "") {
            writer.uint32(18).string(message.worker);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousForecastRewardFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousForecastRewardFractionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousForecastRewardFractionRequest();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.worker = (_b = object.worker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryPreviousForecastRewardFractionResponse() {
    return { rewardFraction: "", notFound: false };
}
exports.QueryPreviousForecastRewardFractionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardFraction !== "") {
            writer.uint32(10).string(message.rewardFraction);
        }
        if (message.notFound !== false) {
            writer.uint32(16).bool(message.notFound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousForecastRewardFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardFraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.notFound = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardFraction: isSet(object.rewardFraction) ? globalThis.String(object.rewardFraction) : "",
            notFound: isSet(object.notFound) ? globalThis.Boolean(object.notFound) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardFraction !== "") {
            obj.rewardFraction = message.rewardFraction;
        }
        if (message.notFound !== false) {
            obj.notFound = message.notFound;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousForecastRewardFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPreviousForecastRewardFractionResponse();
        message.rewardFraction = (_a = object.rewardFraction) !== null && _a !== void 0 ? _a : "";
        message.notFound = (_b = object.notFound) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseQueryPreviousPercentageRewardToStakedReputersRequest() {
    return {};
}
exports.QueryPreviousPercentageRewardToStakedReputersRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousPercentageRewardToStakedReputersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryPreviousPercentageRewardToStakedReputersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryPreviousPercentageRewardToStakedReputersRequest();
        return message;
    },
};
function createBaseQueryPreviousPercentageRewardToStakedReputersResponse() {
    return { percentageReward: "" };
}
exports.QueryPreviousPercentageRewardToStakedReputersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.percentageReward !== "") {
            writer.uint32(10).string(message.percentageReward);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPreviousPercentageRewardToStakedReputersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.percentageReward = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { percentageReward: isSet(object.percentageReward) ? globalThis.String(object.percentageReward) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.percentageReward !== "") {
            obj.percentageReward = message.percentageReward;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPreviousPercentageRewardToStakedReputersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryPreviousPercentageRewardToStakedReputersResponse();
        message.percentageReward = (_a = object.percentageReward) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTotalRewardToDistributeRequest() {
    return {};
}
exports.QueryTotalRewardToDistributeRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTotalRewardToDistributeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryTotalRewardToDistributeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryTotalRewardToDistributeRequest();
        return message;
    },
};
function createBaseQueryTotalRewardToDistributeResponse() {
    return { totalReward: "" };
}
exports.QueryTotalRewardToDistributeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalReward !== "") {
            writer.uint32(10).string(message.totalReward);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTotalRewardToDistributeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.totalReward = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { totalReward: isSet(object.totalReward) ? globalThis.String(object.totalReward) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalReward !== "") {
            obj.totalReward = message.totalReward;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTotalRewardToDistributeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTotalRewardToDistributeResponse();
        message.totalReward = (_a = object.totalReward) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.QueryServiceName = "emissions.v2.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.GetNextTopicId = this.GetNextTopicId.bind(this);
        this.GetTopic = this.GetTopic.bind(this);
        this.GetActiveTopics = this.GetActiveTopics.bind(this);
        this.GetWorkerLatestInferenceByTopicId = this.GetWorkerLatestInferenceByTopicId.bind(this);
        this.GetInferencesAtBlock = this.GetInferencesAtBlock.bind(this);
        this.GetLatestTopicInferences = this.GetLatestTopicInferences.bind(this);
        this.GetForecastsAtBlock = this.GetForecastsAtBlock.bind(this);
        this.GetNetworkLossBundleAtBlock = this.GetNetworkLossBundleAtBlock.bind(this);
        this.GetTotalStake = this.GetTotalStake.bind(this);
        this.GetReputerStakeInTopic = this.GetReputerStakeInTopic.bind(this);
        this.GetMultiReputerStakeInTopic = this.GetMultiReputerStakeInTopic.bind(this);
        this.GetStakeFromReputerInTopicInSelf = this.GetStakeFromReputerInTopicInSelf.bind(this);
        this.GetDelegateStakeInTopicInReputer = this.GetDelegateStakeInTopicInReputer.bind(this);
        this.GetStakeFromDelegatorInTopicInReputer = this.GetStakeFromDelegatorInTopicInReputer.bind(this);
        this.GetStakeFromDelegatorInTopic = this.GetStakeFromDelegatorInTopic.bind(this);
        this.GetTopicStake = this.GetTopicStake.bind(this);
        this.GetStakeRemovalsUpUntilBlock = this.GetStakeRemovalsUpUntilBlock.bind(this);
        this.GetDelegateStakeRemovalsUpUntilBlock = this.GetDelegateStakeRemovalsUpUntilBlock.bind(this);
        this.GetStakeRemovalInfo = this.GetStakeRemovalInfo.bind(this);
        this.GetDelegateStakeRemovalInfo = this.GetDelegateStakeRemovalInfo.bind(this);
        this.GetWorkerNodeInfo = this.GetWorkerNodeInfo.bind(this);
        this.GetReputerNodeInfo = this.GetReputerNodeInfo.bind(this);
        this.IsWorkerRegisteredInTopicId = this.IsWorkerRegisteredInTopicId.bind(this);
        this.IsReputerRegisteredInTopicId = this.IsReputerRegisteredInTopicId.bind(this);
        this.GetNetworkInferencesAtBlock = this.GetNetworkInferencesAtBlock.bind(this);
        this.GetLatestNetworkInference = this.GetLatestNetworkInference.bind(this);
        this.GetLatestAvailableNetworkInference = this.GetLatestAvailableNetworkInference.bind(this);
        this.IsWorkerNonceUnfulfilled = this.IsWorkerNonceUnfulfilled.bind(this);
        this.IsReputerNonceUnfulfilled = this.IsReputerNonceUnfulfilled.bind(this);
        this.GetUnfulfilledWorkerNonces = this.GetUnfulfilledWorkerNonces.bind(this);
        this.GetUnfulfilledReputerNonces = this.GetUnfulfilledReputerNonces.bind(this);
        this.GetInfererNetworkRegret = this.GetInfererNetworkRegret.bind(this);
        this.GetForecasterNetworkRegret = this.GetForecasterNetworkRegret.bind(this);
        this.GetOneInForecasterNetworkRegret = this.GetOneInForecasterNetworkRegret.bind(this);
        this.IsWhitelistAdmin = this.IsWhitelistAdmin.bind(this);
        this.GetTopicLastWorkerCommitInfo = this.GetTopicLastWorkerCommitInfo.bind(this);
        this.GetTopicLastReputerCommitInfo = this.GetTopicLastReputerCommitInfo.bind(this);
        this.GetTopicRewardNonce = this.GetTopicRewardNonce.bind(this);
        this.GetReputerLossBundlesAtBlock = this.GetReputerLossBundlesAtBlock.bind(this);
        this.GetStakeReputerAuthority = this.GetStakeReputerAuthority.bind(this);
        this.GetDelegateStakePlacement = this.GetDelegateStakePlacement.bind(this);
        this.GetDelegateStakeUponReputer = this.GetDelegateStakeUponReputer.bind(this);
        this.GetDelegateRewardPerShare = this.GetDelegateRewardPerShare.bind(this);
        this.GetStakeRemovalForReputerAndTopicId = this.GetStakeRemovalForReputerAndTopicId.bind(this);
        this.GetDelegateStakeRemoval = this.GetDelegateStakeRemoval.bind(this);
        this.GetPreviousTopicWeight = this.GetPreviousTopicWeight.bind(this);
        this.TopicExists = this.TopicExists.bind(this);
        this.IsTopicActive = this.IsTopicActive.bind(this);
        this.GetTopicFeeRevenue = this.GetTopicFeeRevenue.bind(this);
        this.GetRewardableTopics = this.GetRewardableTopics.bind(this);
        this.GetLatestInfererScore = this.GetLatestInfererScore.bind(this);
        this.GetLatestForecasterScore = this.GetLatestForecasterScore.bind(this);
        this.GetLatestReputerScore = this.GetLatestReputerScore.bind(this);
        this.GetInferenceScoresUntilBlock = this.GetInferenceScoresUntilBlock.bind(this);
        this.GetWorkerInferenceScoresAtBlock = this.GetWorkerInferenceScoresAtBlock.bind(this);
        this.GetForecastScoresUntilBlock = this.GetForecastScoresUntilBlock.bind(this);
        this.GetWorkerForecastScoresAtBlock = this.GetWorkerForecastScoresAtBlock.bind(this);
        this.GetReputersScoresAtBlock = this.GetReputersScoresAtBlock.bind(this);
        this.GetListeningCoefficient = this.GetListeningCoefficient.bind(this);
        this.GetPreviousReputerRewardFraction = this.GetPreviousReputerRewardFraction.bind(this);
        this.GetPreviousInferenceRewardFraction = this.GetPreviousInferenceRewardFraction.bind(this);
        this.GetPreviousForecastRewardFraction = this.GetPreviousForecastRewardFraction.bind(this);
        this.GetPreviousPercentageRewardToStakedReputers = this.GetPreviousPercentageRewardToStakedReputers.bind(this);
        this.GetTotalRewardToDistribute = this.GetTotalRewardToDistribute.bind(this);
        this.GetNaiveInfererNetworkRegret = this.GetNaiveInfererNetworkRegret.bind(this);
        this.GetOneOutInfererInfererNetworkRegret = this.GetOneOutInfererInfererNetworkRegret.bind(this);
        this.GetOneOutInfererForecasterNetworkRegret = this.GetOneOutInfererForecasterNetworkRegret.bind(this);
        this.GetOneOutForecasterInfererNetworkRegret = this.GetOneOutForecasterInfererNetworkRegret.bind(this);
        this.GetOneOutForecasterForecasterNetworkRegret = this.GetOneOutForecasterForecasterNetworkRegret.bind(this);
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNextTopicId(request) {
        const data = exports.QueryNextTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNextTopicId", data);
        return promise.then((data) => exports.QueryNextTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopic(request) {
        const data = exports.QueryTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopic", data);
        return promise.then((data) => exports.QueryTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetActiveTopics(request) {
        const data = exports.QueryActiveTopicsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetActiveTopics", data);
        return promise.then((data) => exports.QueryActiveTopicsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerLatestInferenceByTopicId(request) {
        const data = exports.QueryWorkerLatestInferenceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerLatestInferenceByTopicId", data);
        return promise.then((data) => exports.QueryWorkerLatestInferenceResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInferencesAtBlock(request) {
        const data = exports.QueryInferencesAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInferencesAtBlock", data);
        return promise.then((data) => exports.QueryInferencesAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestTopicInferences(request) {
        const data = exports.QueryLatestTopicInferencesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestTopicInferences", data);
        return promise.then((data) => exports.QueryLatestTopicInferencesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecastsAtBlock(request) {
        const data = exports.QueryForecastsAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecastsAtBlock", data);
        return promise.then((data) => exports.QueryForecastsAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNetworkLossBundleAtBlock(request) {
        const data = exports.QueryNetworkLossBundleAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNetworkLossBundleAtBlock", data);
        return promise.then((data) => exports.QueryNetworkLossBundleAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTotalStake(request) {
        const data = exports.QueryTotalStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTotalStake", data);
        return promise.then((data) => exports.QueryTotalStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerStakeInTopic(request) {
        const data = exports.QueryReputerStakeInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerStakeInTopic", data);
        return promise.then((data) => exports.QueryReputerStakeInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetMultiReputerStakeInTopic(request) {
        const data = exports.QueryMultiReputerStakeInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetMultiReputerStakeInTopic", data);
        return promise.then((data) => exports.QueryMultiReputerStakeInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeFromReputerInTopicInSelf(request) {
        const data = exports.QueryStakeFromReputerInTopicInSelfRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeFromReputerInTopicInSelf", data);
        return promise.then((data) => exports.QueryStakeFromReputerInTopicInSelfResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeInTopicInReputer(request) {
        const data = exports.QueryDelegateStakeInTopicInReputerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeInTopicInReputer", data);
        return promise.then((data) => exports.QueryDelegateStakeInTopicInReputerResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeFromDelegatorInTopicInReputer(request) {
        const data = exports.QueryStakeFromDelegatorInTopicInReputerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeFromDelegatorInTopicInReputer", data);
        return promise.then((data) => exports.QueryStakeFromDelegatorInTopicInReputerResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeFromDelegatorInTopic(request) {
        const data = exports.QueryStakeFromDelegatorInTopicRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeFromDelegatorInTopic", data);
        return promise.then((data) => exports.QueryStakeFromDelegatorInTopicResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicStake(request) {
        const data = exports.QueryTopicStakeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicStake", data);
        return promise.then((data) => exports.QueryTopicStakeResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeRemovalsUpUntilBlock(request) {
        const data = exports.QueryStakeRemovalsUpUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeRemovalsUpUntilBlock", data);
        return promise.then((data) => exports.QueryStakeRemovalsUpUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeRemovalsUpUntilBlock(request) {
        const data = exports.QueryDelegateStakeRemovalsUpUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeRemovalsUpUntilBlock", data);
        return promise.then((data) => exports.QueryDelegateStakeRemovalsUpUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeRemovalInfo(request) {
        const data = exports.QueryStakeRemovalInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeRemovalInfo", data);
        return promise.then((data) => exports.QueryStakeRemovalInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeRemovalInfo(request) {
        const data = exports.QueryDelegateStakeRemovalInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeRemovalInfo", data);
        return promise.then((data) => exports.QueryDelegateStakeRemovalInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerNodeInfo(request) {
        const data = exports.QueryWorkerNodeInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerNodeInfo", data);
        return promise.then((data) => exports.QueryWorkerNodeInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerNodeInfo(request) {
        const data = exports.QueryReputerNodeInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerNodeInfo", data);
        return promise.then((data) => exports.QueryReputerNodeInfoResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsWorkerRegisteredInTopicId(request) {
        const data = exports.QueryIsWorkerRegisteredInTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsWorkerRegisteredInTopicId", data);
        return promise.then((data) => exports.QueryIsWorkerRegisteredInTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsReputerRegisteredInTopicId(request) {
        const data = exports.QueryIsReputerRegisteredInTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsReputerRegisteredInTopicId", data);
        return promise.then((data) => exports.QueryIsReputerRegisteredInTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNetworkInferencesAtBlock(request) {
        const data = exports.QueryNetworkInferencesAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNetworkInferencesAtBlock", data);
        return promise.then((data) => exports.QueryNetworkInferencesAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestNetworkInference(request) {
        const data = exports.QueryLatestNetworkInferencesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestNetworkInference", data);
        return promise.then((data) => exports.QueryLatestNetworkInferencesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestAvailableNetworkInference(request) {
        const data = exports.QueryLatestNetworkInferencesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestAvailableNetworkInference", data);
        return promise.then((data) => exports.QueryLatestNetworkInferencesResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsWorkerNonceUnfulfilled(request) {
        const data = exports.QueryIsWorkerNonceUnfulfilledRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsWorkerNonceUnfulfilled", data);
        return promise.then((data) => exports.QueryIsWorkerNonceUnfulfilledResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsReputerNonceUnfulfilled(request) {
        const data = exports.QueryIsReputerNonceUnfulfilledRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsReputerNonceUnfulfilled", data);
        return promise.then((data) => exports.QueryIsReputerNonceUnfulfilledResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetUnfulfilledWorkerNonces(request) {
        const data = exports.QueryUnfulfilledWorkerNoncesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUnfulfilledWorkerNonces", data);
        return promise.then((data) => exports.QueryUnfulfilledWorkerNoncesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetUnfulfilledReputerNonces(request) {
        const data = exports.QueryUnfulfilledReputerNoncesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUnfulfilledReputerNonces", data);
        return promise.then((data) => exports.QueryUnfulfilledReputerNoncesResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInfererNetworkRegret(request) {
        const data = exports.QueryInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInfererNetworkRegret", data);
        return promise.then((data) => exports.QueryInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecasterNetworkRegret(request) {
        const data = exports.QueryForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecasterNetworkRegret", data);
        return promise.then((data) => exports.QueryForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneInForecasterNetworkRegret(request) {
        const data = exports.QueryOneInForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneInForecasterNetworkRegret", data);
        return promise.then((data) => exports.QueryOneInForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsWhitelistAdmin(request) {
        const data = exports.QueryIsWhitelistAdminRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsWhitelistAdmin", data);
        return promise.then((data) => exports.QueryIsWhitelistAdminResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicLastWorkerCommitInfo(request) {
        const data = exports.QueryTopicLastCommitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicLastWorkerCommitInfo", data);
        return promise.then((data) => exports.QueryTopicLastCommitResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicLastReputerCommitInfo(request) {
        const data = exports.QueryTopicLastCommitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicLastReputerCommitInfo", data);
        return promise.then((data) => exports.QueryTopicLastCommitResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicRewardNonce(request) {
        const data = exports.QueryTopicRewardNonceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicRewardNonce", data);
        return promise.then((data) => exports.QueryTopicRewardNonceResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputerLossBundlesAtBlock(request) {
        const data = exports.QueryReputerLossBundlesAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputerLossBundlesAtBlock", data);
        return promise.then((data) => exports.QueryReputerLossBundlesAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeReputerAuthority(request) {
        const data = exports.QueryStakeReputerAuthorityRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeReputerAuthority", data);
        return promise.then((data) => exports.QueryStakeReputerAuthorityResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakePlacement(request) {
        const data = exports.QueryDelegateStakePlacementRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakePlacement", data);
        return promise.then((data) => exports.QueryDelegateStakePlacementResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeUponReputer(request) {
        const data = exports.QueryDelegateStakeUponReputerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeUponReputer", data);
        return promise.then((data) => exports.QueryDelegateStakeUponReputerResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateRewardPerShare(request) {
        const data = exports.QueryDelegateRewardPerShareRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateRewardPerShare", data);
        return promise.then((data) => exports.QueryDelegateRewardPerShareResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetStakeRemovalForReputerAndTopicId(request) {
        const data = exports.QueryStakeRemovalForReputerAndTopicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStakeRemovalForReputerAndTopicId", data);
        return promise.then((data) => exports.QueryStakeRemovalForReputerAndTopicIdResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetDelegateStakeRemoval(request) {
        const data = exports.QueryDelegateStakeRemovalRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDelegateStakeRemoval", data);
        return promise.then((data) => exports.QueryDelegateStakeRemovalResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousTopicWeight(request) {
        const data = exports.QueryPreviousTopicWeightRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousTopicWeight", data);
        return promise.then((data) => exports.QueryPreviousTopicWeightResponse.decode(new wire_1.BinaryReader(data)));
    }
    TopicExists(request) {
        const data = exports.QueryTopicExistsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TopicExists", data);
        return promise.then((data) => exports.QueryTopicExistsResponse.decode(new wire_1.BinaryReader(data)));
    }
    IsTopicActive(request) {
        const data = exports.QueryIsTopicActiveRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsTopicActive", data);
        return promise.then((data) => exports.QueryIsTopicActiveResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTopicFeeRevenue(request) {
        const data = exports.QueryTopicFeeRevenueRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTopicFeeRevenue", data);
        return promise.then((data) => exports.QueryTopicFeeRevenueResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetRewardableTopics(request) {
        const data = exports.QueryRewardableTopicsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetRewardableTopics", data);
        return promise.then((data) => exports.QueryRewardableTopicsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestInfererScore(request) {
        const data = exports.QueryLatestInfererScoreRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestInfererScore", data);
        return promise.then((data) => exports.QueryLatestInfererScoreResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestForecasterScore(request) {
        const data = exports.QueryLatestForecasterScoreRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestForecasterScore", data);
        return promise.then((data) => exports.QueryLatestForecasterScoreResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetLatestReputerScore(request) {
        const data = exports.QueryLatestReputerScoreRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetLatestReputerScore", data);
        return promise.then((data) => exports.QueryLatestReputerScoreResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetInferenceScoresUntilBlock(request) {
        const data = exports.QueryInferenceScoresUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetInferenceScoresUntilBlock", data);
        return promise.then((data) => exports.QueryInferenceScoresUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerInferenceScoresAtBlock(request) {
        const data = exports.QueryWorkerInferenceScoresAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerInferenceScoresAtBlock", data);
        return promise.then((data) => exports.QueryWorkerInferenceScoresAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetForecastScoresUntilBlock(request) {
        const data = exports.QueryForecastScoresUntilBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetForecastScoresUntilBlock", data);
        return promise.then((data) => exports.QueryForecastScoresUntilBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetWorkerForecastScoresAtBlock(request) {
        const data = exports.QueryWorkerForecastScoresAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWorkerForecastScoresAtBlock", data);
        return promise.then((data) => exports.QueryWorkerForecastScoresAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetReputersScoresAtBlock(request) {
        const data = exports.QueryReputersScoresAtBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetReputersScoresAtBlock", data);
        return promise.then((data) => exports.QueryReputersScoresAtBlockResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetListeningCoefficient(request) {
        const data = exports.QueryListeningCoefficientRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetListeningCoefficient", data);
        return promise.then((data) => exports.QueryListeningCoefficientResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousReputerRewardFraction(request) {
        const data = exports.QueryPreviousReputerRewardFractionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousReputerRewardFraction", data);
        return promise.then((data) => exports.QueryPreviousReputerRewardFractionResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousInferenceRewardFraction(request) {
        const data = exports.QueryPreviousInferenceRewardFractionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousInferenceRewardFraction", data);
        return promise.then((data) => exports.QueryPreviousInferenceRewardFractionResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousForecastRewardFraction(request) {
        const data = exports.QueryPreviousForecastRewardFractionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousForecastRewardFraction", data);
        return promise.then((data) => exports.QueryPreviousForecastRewardFractionResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPreviousPercentageRewardToStakedReputers(request) {
        const data = exports.QueryPreviousPercentageRewardToStakedReputersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPreviousPercentageRewardToStakedReputers", data);
        return promise.then((data) => exports.QueryPreviousPercentageRewardToStakedReputersResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTotalRewardToDistribute(request) {
        const data = exports.QueryTotalRewardToDistributeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTotalRewardToDistribute", data);
        return promise.then((data) => exports.QueryTotalRewardToDistributeResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetNaiveInfererNetworkRegret(request) {
        const data = exports.QueryNaiveInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNaiveInfererNetworkRegret", data);
        return promise.then((data) => exports.QueryNaiveInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutInfererInfererNetworkRegret(request) {
        const data = exports.QueryOneOutInfererInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutInfererInfererNetworkRegret", data);
        return promise.then((data) => exports.QueryOneOutInfererInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutInfererForecasterNetworkRegret(request) {
        const data = exports.QueryOneOutInfererForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutInfererForecasterNetworkRegret", data);
        return promise.then((data) => exports.QueryOneOutInfererForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutForecasterInfererNetworkRegret(request) {
        const data = exports.QueryOneOutForecasterInfererNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutForecasterInfererNetworkRegret", data);
        return promise.then((data) => exports.QueryOneOutForecasterInfererNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetOneOutForecasterForecasterNetworkRegret(request) {
        const data = exports.QueryOneOutForecasterForecasterNetworkRegretRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOneOutForecasterForecasterNetworkRegret", data);
        return promise.then((data) => exports.QueryOneOutForecasterForecasterNetworkRegretResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}

"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: emissions/v1/reputer.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReputerValueBundles = exports.ReputerValueBundle = exports.ValueBundle = exports.WithheldWorkerAttributedValue = exports.WorkerAttributedValue = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const nonce_1 = require("./nonce");
exports.protobufPackage = "emissions.v1";
function createBaseWorkerAttributedValue() {
    return { worker: "", value: "" };
}
exports.WorkerAttributedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.worker !== "") {
            writer.uint32(10).string(message.worker);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerAttributedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.WorkerAttributedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWorkerAttributedValue();
        message.worker = (_a = object.worker) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseWithheldWorkerAttributedValue() {
    return { worker: "", value: "" };
}
exports.WithheldWorkerAttributedValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.worker !== "") {
            writer.uint32(10).string(message.worker);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWithheldWorkerAttributedValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.worker = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.worker !== "") {
            obj.worker = message.worker;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.WithheldWorkerAttributedValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWithheldWorkerAttributedValue();
        message.worker = (_a = object.worker) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseValueBundle() {
    return {
        topicId: "0",
        reputerRequestNonce: undefined,
        reputer: "",
        extraData: new Uint8Array(0),
        combinedValue: "",
        infererValues: [],
        forecasterValues: [],
        naiveValue: "",
        oneOutInfererValues: [],
        oneOutForecasterValues: [],
        oneInForecasterValues: [],
    };
}
exports.ValueBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicId !== "0") {
            writer.uint32(8).uint64(message.topicId);
        }
        if (message.reputerRequestNonce !== undefined) {
            nonce_1.ReputerRequestNonce.encode(message.reputerRequestNonce, writer.uint32(18).fork()).join();
        }
        if (message.reputer !== "") {
            writer.uint32(26).string(message.reputer);
        }
        if (message.extraData.length !== 0) {
            writer.uint32(34).bytes(message.extraData);
        }
        if (message.combinedValue !== "") {
            writer.uint32(42).string(message.combinedValue);
        }
        for (const v of message.infererValues) {
            exports.WorkerAttributedValue.encode(v, writer.uint32(50).fork()).join();
        }
        for (const v of message.forecasterValues) {
            exports.WorkerAttributedValue.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.naiveValue !== "") {
            writer.uint32(66).string(message.naiveValue);
        }
        for (const v of message.oneOutInfererValues) {
            exports.WithheldWorkerAttributedValue.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.oneOutForecasterValues) {
            exports.WithheldWorkerAttributedValue.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.oneInForecasterValues) {
            exports.WorkerAttributedValue.encode(v, writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValueBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.reputerRequestNonce = nonce_1.ReputerRequestNonce.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reputer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.extraData = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.combinedValue = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.infererValues.push(exports.WorkerAttributedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.forecasterValues.push(exports.WorkerAttributedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.naiveValue = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.oneOutInfererValues.push(exports.WithheldWorkerAttributedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.oneOutForecasterValues.push(exports.WithheldWorkerAttributedValue.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.oneInForecasterValues.push(exports.WorkerAttributedValue.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "0",
            reputerRequestNonce: isSet(object.reputerRequestNonce)
                ? nonce_1.ReputerRequestNonce.fromJSON(object.reputerRequestNonce)
                : undefined,
            reputer: isSet(object.reputer) ? globalThis.String(object.reputer) : "",
            extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
            combinedValue: isSet(object.combinedValue) ? globalThis.String(object.combinedValue) : "",
            infererValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.infererValues)
                ? object.infererValues.map((e) => exports.WorkerAttributedValue.fromJSON(e))
                : [],
            forecasterValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.forecasterValues)
                ? object.forecasterValues.map((e) => exports.WorkerAttributedValue.fromJSON(e))
                : [],
            naiveValue: isSet(object.naiveValue) ? globalThis.String(object.naiveValue) : "",
            oneOutInfererValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oneOutInfererValues)
                ? object.oneOutInfererValues.map((e) => exports.WithheldWorkerAttributedValue.fromJSON(e))
                : [],
            oneOutForecasterValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oneOutForecasterValues)
                ? object.oneOutForecasterValues.map((e) => exports.WithheldWorkerAttributedValue.fromJSON(e))
                : [],
            oneInForecasterValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oneInForecasterValues)
                ? object.oneInForecasterValues.map((e) => exports.WorkerAttributedValue.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e;
        const obj = {};
        if (message.topicId !== "0") {
            obj.topicId = message.topicId;
        }
        if (message.reputerRequestNonce !== undefined) {
            obj.reputerRequestNonce = nonce_1.ReputerRequestNonce.toJSON(message.reputerRequestNonce);
        }
        if (message.reputer !== "") {
            obj.reputer = message.reputer;
        }
        if (message.extraData.length !== 0) {
            obj.extraData = base64FromBytes(message.extraData);
        }
        if (message.combinedValue !== "") {
            obj.combinedValue = message.combinedValue;
        }
        if ((_a = message.infererValues) === null || _a === void 0 ? void 0 : _a.length) {
            obj.infererValues = message.infererValues.map((e) => exports.WorkerAttributedValue.toJSON(e));
        }
        if ((_b = message.forecasterValues) === null || _b === void 0 ? void 0 : _b.length) {
            obj.forecasterValues = message.forecasterValues.map((e) => exports.WorkerAttributedValue.toJSON(e));
        }
        if (message.naiveValue !== "") {
            obj.naiveValue = message.naiveValue;
        }
        if ((_c = message.oneOutInfererValues) === null || _c === void 0 ? void 0 : _c.length) {
            obj.oneOutInfererValues = message.oneOutInfererValues.map((e) => exports.WithheldWorkerAttributedValue.toJSON(e));
        }
        if ((_d = message.oneOutForecasterValues) === null || _d === void 0 ? void 0 : _d.length) {
            obj.oneOutForecasterValues = message.oneOutForecasterValues.map((e) => exports.WithheldWorkerAttributedValue.toJSON(e));
        }
        if ((_e = message.oneInForecasterValues) === null || _e === void 0 ? void 0 : _e.length) {
            obj.oneInForecasterValues = message.oneInForecasterValues.map((e) => exports.WorkerAttributedValue.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ValueBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseValueBundle();
        message.topicId = (_a = object.topicId) !== null && _a !== void 0 ? _a : "0";
        message.reputerRequestNonce = (object.reputerRequestNonce !== undefined && object.reputerRequestNonce !== null)
            ? nonce_1.ReputerRequestNonce.fromPartial(object.reputerRequestNonce)
            : undefined;
        message.reputer = (_b = object.reputer) !== null && _b !== void 0 ? _b : "";
        message.extraData = (_c = object.extraData) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.combinedValue = (_d = object.combinedValue) !== null && _d !== void 0 ? _d : "";
        message.infererValues = ((_e = object.infererValues) === null || _e === void 0 ? void 0 : _e.map((e) => exports.WorkerAttributedValue.fromPartial(e))) || [];
        message.forecasterValues = ((_f = object.forecasterValues) === null || _f === void 0 ? void 0 : _f.map((e) => exports.WorkerAttributedValue.fromPartial(e))) || [];
        message.naiveValue = (_g = object.naiveValue) !== null && _g !== void 0 ? _g : "";
        message.oneOutInfererValues =
            ((_h = object.oneOutInfererValues) === null || _h === void 0 ? void 0 : _h.map((e) => exports.WithheldWorkerAttributedValue.fromPartial(e))) || [];
        message.oneOutForecasterValues =
            ((_j = object.oneOutForecasterValues) === null || _j === void 0 ? void 0 : _j.map((e) => exports.WithheldWorkerAttributedValue.fromPartial(e))) || [];
        message.oneInForecasterValues = ((_k = object.oneInForecasterValues) === null || _k === void 0 ? void 0 : _k.map((e) => exports.WorkerAttributedValue.fromPartial(e))) ||
            [];
        return message;
    },
};
function createBaseReputerValueBundle() {
    return { valueBundle: undefined, signature: new Uint8Array(0), pubkey: "" };
}
exports.ReputerValueBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.valueBundle !== undefined) {
            exports.ValueBundle.encode(message.valueBundle, writer.uint32(10).fork()).join();
        }
        if (message.signature.length !== 0) {
            writer.uint32(18).bytes(message.signature);
        }
        if (message.pubkey !== "") {
            writer.uint32(26).string(message.pubkey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReputerValueBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.valueBundle = exports.ValueBundle.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            valueBundle: isSet(object.valueBundle) ? exports.ValueBundle.fromJSON(object.valueBundle) : undefined,
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
            pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.valueBundle !== undefined) {
            obj.valueBundle = exports.ValueBundle.toJSON(message.valueBundle);
        }
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        return obj;
    },
    create(base) {
        return exports.ReputerValueBundle.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseReputerValueBundle();
        message.valueBundle = (object.valueBundle !== undefined && object.valueBundle !== null)
            ? exports.ValueBundle.fromPartial(object.valueBundle)
            : undefined;
        message.signature = (_a = object.signature) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.pubkey = (_b = object.pubkey) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseReputerValueBundles() {
    return { reputerValueBundles: [] };
}
exports.ReputerValueBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.reputerValueBundles) {
            exports.ReputerValueBundle.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReputerValueBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reputerValueBundles.push(exports.ReputerValueBundle.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reputerValueBundles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reputerValueBundles)
                ? object.reputerValueBundles.map((e) => exports.ReputerValueBundle.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.reputerValueBundles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.reputerValueBundles = message.reputerValueBundles.map((e) => exports.ReputerValueBundle.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ReputerValueBundles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseReputerValueBundles();
        message.reputerValueBundles = ((_a = object.reputerValueBundles) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ReputerValueBundle.fromPartial(e))) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

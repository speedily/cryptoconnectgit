"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmissionsModule = void 0;
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("../types/generated/emissions/v7/query");
const base_1 = require("./base");
const tx_1 = require("../types/generated/emissions/v7/tx");
class EmissionsModule extends base_1.BaseModule {
    constructor(queryClient, signingClient) {
        const protoQueryClient = (0, stargate_1.createProtobufRpcClient)(queryClient);
        super(new query_1.QueryServiceClientImpl(protoQueryClient), signingClient);
    }
    // Query methods
    getNextTopicId() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetNextTopicId({});
        });
    }
    getTopic(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopic({ topicId });
        });
    }
    getWorkerLatestInferenceByTopicId(topicId, workerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetWorkerLatestInferenceByTopicId({
                topicId,
                workerAddress,
            });
        });
    }
    getInferencesAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetInferencesAtBlock({ topicId, blockHeight });
        });
    }
    getLatestTopicInferences(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetLatestTopicInferences({ topicId });
        });
    }
    getForecastsAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetForecastsAtBlock({ topicId, blockHeight });
        });
    }
    getNetworkLossBundleAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetNetworkLossBundleAtBlock({
                topicId,
                blockHeight,
            });
        });
    }
    getTotalStake() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTotalStake({});
        });
    }
    getReputerStakeInTopic(address, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetReputerStakeInTopic({ address, topicId });
        });
    }
    getMultiReputerStakeInTopic(addresses, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetMultiReputerStakeInTopic({
                addresses,
                topicId,
            });
        });
    }
    getStakeFromReputerInTopicInSelf(reputerAddress, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeFromReputerInTopicInSelf({
                reputerAddress,
                topicId,
            });
        });
    }
    getDelegateStakeInTopicInReputer(reputerAddress, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetDelegateStakeInTopicInReputer({
                reputerAddress,
                topicId,
            });
        });
    }
    getStakeFromDelegatorInTopicInReputer(delegatorAddress, reputerAddress, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeFromDelegatorInTopicInReputer({
                delegatorAddress,
                reputerAddress,
                topicId,
            });
        });
    }
    getStakeFromDelegatorInTopic(delegatorAddress, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeFromDelegatorInTopic({
                delegatorAddress,
                topicId,
            });
        });
    }
    getTopicStake(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicStake({ topicId });
        });
    }
    getStakeRemovalsUpUntilBlock(blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeRemovalsUpUntilBlock({ blockHeight });
        });
    }
    getDelegateStakeRemovalsUpUntilBlock(blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetDelegateStakeRemovalsUpUntilBlock({
                blockHeight,
            });
        });
    }
    getStakeRemovalInfo(topicId, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeRemovalInfo({ topicId, reputer });
        });
    }
    getWorkerNodeInfo(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetWorkerNodeInfo({ address });
        });
    }
    getReputerNodeInfo(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetReputerNodeInfo({ address });
        });
    }
    isWorkerRegisteredInTopicId(topicId, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWorkerRegisteredInTopicId({ topicId, address });
        });
    }
    isReputerRegisteredInTopicId(topicId, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsReputerRegisteredInTopicId({ topicId, address });
        });
    }
    getNetworkInferencesAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetNetworkInferencesAtBlock({
                topicId,
                blockHeightLastInference: blockHeight,
            });
        });
    }
    getNetworkInferencesAtBlockOutlierResistant(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetNetworkInferencesAtBlockOutlierResistant({
                topicId,
                blockHeightLastInference: blockHeight,
            });
        });
    }
    getLatestAvailableNetworkInferences(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetLatestAvailableNetworkInferences({ topicId });
        });
    }
    getLatestAvailableNetworkInferencesOutlierResistant(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetLatestAvailableNetworkInferencesOutlierResistant({ topicId });
        });
    }
    IsWorkerNonceUnfulfilled(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWorkerNonceUnfulfilled({ topicId, blockHeight });
        });
    }
    isReputerNonceUnfulfilled(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsReputerNonceUnfulfilled({
                topicId,
                blockHeight,
            });
        });
    }
    getUnfulfilledWorkerNonces(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetUnfulfilledWorkerNonces({ topicId });
        });
    }
    getUnfulfilledReputerNonces(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetUnfulfilledReputerNonces({ topicId });
        });
    }
    getInfererNetworkRegret(topicId, actorId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetInfererNetworkRegret({ topicId, actorId });
        });
    }
    getForecasterNetworkRegret(topicId, worker) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetForecasterNetworkRegret({ topicId, worker });
        });
    }
    getOneInForecasterNetworkRegret(topicId, forecaster, inferer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetOneInForecasterNetworkRegret({
                topicId,
                forecaster,
                inferer,
            });
        });
    }
    isWhitelistAdmin(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistAdmin({ address });
        });
    }
    getTopicLastWorkerCommitInfo(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicLastWorkerCommitInfo({ topicId });
        });
    }
    getTopicLastReputerCommitInfo(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicLastReputerCommitInfo({ topicId });
        });
    }
    getTopicRewardNonce(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicRewardNonce({ topicId });
        });
    }
    getReputerLossBundlesAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetReputerLossBundlesAtBlock({
                topicId,
                blockHeight,
            });
        });
    }
    getStakeReputerAuthority(topicId, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeReputerAuthority({ topicId, reputer });
        });
    }
    getDelegateStakePlacement(topicId, delegator, target) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetDelegateStakePlacement({
                topicId,
                delegator,
                target,
            });
        });
    }
    getDelegateStakeUponReputer(topicId, target) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetDelegateStakeUponReputer({ topicId, target });
        });
    }
    getDelegateRewardPerShare(topicId, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetDelegateRewardPerShare({ topicId, reputer });
        });
    }
    getStakeRemovalForReputerAndTopicId(reputer, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetStakeRemovalForReputerAndTopicId({
                reputer,
                topicId,
            });
        });
    }
    getDelegateStakeRemoval(blockHeight, topicId, delegator, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetDelegateStakeRemoval({
                blockHeight,
                topicId,
                delegator,
                reputer,
            });
        });
    }
    getPreviousTopicWeight(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousTopicWeight({ topicId });
        });
    }
    getTotalSumPreviousTopicWeights() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTotalSumPreviousTopicWeights({});
        });
    }
    topicExists(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.TopicExists({ topicId });
        });
    }
    isTopicActive(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsTopicActive({ topicId });
        });
    }
    getTopicFeeRevenue(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicFeeRevenue({ topicId });
        });
    }
    getInfererScoreEma(topicId, inferer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetInfererScoreEma({ topicId, inferer });
        });
    }
    getForecasterScoreEma(topicId, forecaster) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetForecasterScoreEma({ topicId, forecaster });
        });
    }
    getReputerScoreEma(topicId, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetReputerScoreEma({ topicId, reputer });
        });
    }
    getInferenceScoresUntilBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetInferenceScoresUntilBlock({
                topicId,
                blockHeight,
            });
        });
    }
    getPreviousTopicQuantileForecasterScoreEma(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousTopicQuantileForecasterScoreEma({
                topicId,
            });
        });
    }
    getPreviousTopicQuantileInfererScoreEma(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousTopicQuantileInfererScoreEma({
                topicId,
            });
        });
    }
    getPreviousTopicQuantileReputerScoreEma(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousTopicQuantileReputerScoreEma({
                topicId,
            });
        });
    }
    getWorkerInferenceScoresAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetWorkerInferenceScoresAtBlock({
                topicId,
                blockHeight,
            });
        });
    }
    getCurrentLowestInfererScore(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetCurrentLowestInfererScore({ topicId });
        });
    }
    getForecastScoresUntilBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetForecastScoresUntilBlock({
                topicId,
                blockHeight,
            });
        });
    }
    getWorkerForecastScoresAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetWorkerForecastScoresAtBlock({
                topicId,
                blockHeight,
            });
        });
    }
    getCurrentLowestForecasterScore(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetCurrentLowestForecasterScore({ topicId });
        });
    }
    getReputersScoresAtBlock(topicId, blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetReputersScoresAtBlock({ topicId, blockHeight });
        });
    }
    getCurrentLowestReputerScore(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetCurrentLowestReputerScore({ topicId });
        });
    }
    getListeningCoefficient(topicId, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetListeningCoefficient({ topicId, reputer });
        });
    }
    getPreviousReputerRewardFraction(topicId, reputer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousReputerRewardFraction({
                topicId,
                reputer,
            });
        });
    }
    getPreviousInferenceRewardFraction(topicId, worker) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousInferenceRewardFraction({
                topicId,
                worker,
            });
        });
    }
    getPreviousForecastRewardFraction(topicId, worker) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousForecastRewardFraction({
                topicId,
                worker,
            });
        });
    }
    getPreviousPercentageRewardToStakedReputers(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetPreviousPercentageRewardToStakedReputers({
                topicId,
            });
        });
    }
    getTotalRewardToDistribute(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTotalRewardToDistribute({ topicId });
        });
    }
    getNaiveInfererNetworkRegret(topicId, inferer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetNaiveInfererNetworkRegret({ topicId, inferer });
        });
    }
    getOneOutInfererInfererNetworkRegret(topicId, oneOutInferer, inferer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetOneOutInfererInfererNetworkRegret({
                topicId,
                oneOutInferer,
                inferer,
            });
        });
    }
    getOneOutInfererForecasterNetworkRegret(topicId, oneOutInferer, forecaster) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetOneOutInfererForecasterNetworkRegret({
                topicId,
                oneOutInferer,
                forecaster,
            });
        });
    }
    getOneOutForecasterInfererNetworkRegret(topicId, oneOutForecaster, inferer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetOneOutForecasterInfererNetworkRegret({
                topicId,
                oneOutForecaster,
                inferer,
            });
        });
    }
    getOneOutForecasterForecasterNetworkRegret(topicId, oneOutForecaster, forecaster) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetOneOutForecasterForecasterNetworkRegret({
                topicId,
                oneOutForecaster,
                forecaster,
            });
        });
    }
    getActiveTopicsAtBlock(blockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetActiveTopicsAtBlock({ blockHeight });
        });
    }
    getNextChurningBlockByTopicId(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetNextChurningBlockByTopicId({ topicId });
        });
    }
    getCountInfererInclusionsInTopic(topicId, inferer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetCountInfererInclusionsInTopic({
                topicId,
                inferer,
            });
        });
    }
    getCountForecasterInclusionsInTopic(topicId, forecaster) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetCountForecasterInclusionsInTopic({
                topicId,
                forecaster,
            });
        });
    }
    getActiveReputersForTopic(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetActiveReputersForTopic({ topicId });
        });
    }
    getActiveForecastersForTopic(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetActiveForecastersForTopic({ topicId });
        });
    }
    getActiveInferersForTopic(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetActiveInferersForTopic({ topicId });
        });
    }
    isWhitelistedGlobalWorker(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedGlobalWorker({ address });
        });
    }
    isWhitelistedGlobalReputer(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedGlobalReputer({ address });
        });
    }
    isWhitelistedGlobalAdmin(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedGlobalAdmin({ address });
        });
    }
    isTopicWorkerWhitelistEnabled(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsTopicWorkerWhitelistEnabled({ topicId });
        });
    }
    isTopicReputerWhitelistEnabled(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsTopicReputerWhitelistEnabled({ topicId });
        });
    }
    isWhitelistedTopicCreator(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedTopicCreator({ address });
        });
    }
    isWhitelistedGlobalActor(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedGlobalActor({ address });
        });
    }
    isWhitelistedTopicWorker(address, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedTopicWorker({ address, topicId });
        });
    }
    isWhitelistedTopicReputer(address, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.IsWhitelistedTopicReputer({ address, topicId });
        });
    }
    canUpdateAllGlobalWhitelists(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanUpdateAllGlobalWhitelists({ address });
        });
    }
    canUpdateGlobalWorkerWhitelist(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanUpdateGlobalWorkerWhitelist({ address });
        });
    }
    canUpdateGlobalReputerWhitelist(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanUpdateGlobalReputerWhitelist({ address });
        });
    }
    canUpdateParams(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanUpdateParams({ address });
        });
    }
    canUpdateTopicWhitelist(address, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanUpdateTopicWhitelist({ address, topicId });
        });
    }
    canCreateTopic(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanCreateTopic({ address });
        });
    }
    canSubmitWorkerPayload(address, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanSubmitWorkerPayload({ address, topicId });
        });
    }
    canSubmitReputerPayload(address, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.CanSubmitReputerPayload({ address, topicId });
        });
    }
    getTopicInitialInfererEmaScore(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicInitialInfererEmaScore({ topicId });
        });
    }
    getTopicInitialForecasterEmaScore(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicInitialForecasterEmaScore({ topicId });
        });
    }
    getTopicInitialReputerEmaScore(topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.queryService.GetTopicInitialReputerEmaScore({ topicId });
        });
    }
    // Tx methods
    createNewTopic(topicConfig_1) {
        return __awaiter(this, arguments, void 0, function* (topicConfig, fee = "auto", memo = "") {
            const createNewTopicMsg = {
                typeUrl: "/emissions.v7.CreateNewTopicRequest",
                value: topicConfig,
            };
            return this.signingClient.signAndBroadcast(topicConfig.creator, [createNewTopicMsg], fee, memo);
        });
    }
    register(sender_1, topicId_1, owner_1, isReputer_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, owner, isReputer, fee = "auto", memo = "") {
            const registerMsg = {
                typeUrl: "/emissions.v7.RegisterRequest",
                value: tx_1.RegisterRequest.fromPartial({
                    sender,
                    topicId,
                    owner,
                    isReputer,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [registerMsg], fee, memo);
        });
    }
    removeRegistration(sender_1, topicId_1, isReputer_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, isReputer, fee = "auto", memo = "") {
            const removeRegistrationMsg = {
                typeUrl: "/emissions.v7.RemoveRegistrationRequest",
                value: tx_1.RemoveRegistrationRequest.fromPartial({
                    sender,
                    topicId,
                    isReputer,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeRegistrationMsg], fee, memo);
        });
    }
    addStake(sender_1, topicId_1, amount_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, amount, fee = "auto", memo = "") {
            const addStakeMsg = {
                typeUrl: "/emissions.v7.AddStakeRequest",
                value: tx_1.AddStakeRequest.fromPartial({
                    sender,
                    topicId,
                    amount,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addStakeMsg], fee, memo);
        });
    }
    removeStake(sender_1, topicId_1, amount_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, amount, fee = "auto", memo = "") {
            const removeStakeMsg = {
                typeUrl: "/emissions.v7.RemoveStakeRequest",
                value: tx_1.RemoveStakeRequest.fromPartial({
                    sender,
                    topicId,
                    amount,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeStakeMsg], fee, memo);
        });
    }
    cancelRemoveStake(sender_1, topicId_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, fee = "auto", memo = "") {
            const cancelRemoveStakeMsg = {
                typeUrl: "/emissions.v7.CancelRemoveStakeRequest",
                value: tx_1.CancelRemoveStakeRequest.fromPartial({
                    sender,
                    topicId,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [cancelRemoveStakeMsg], fee, memo);
        });
    }
    delegateStakeToReputer(sender_1, topicId_1, reputer_1, amount_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, reputer, amount, fee = "auto", memo = "") {
            const delegateStakeMsg = {
                typeUrl: "/emissions.v7.DelegateStakeRequest",
                value: tx_1.DelegateStakeRequest.fromPartial({
                    sender,
                    topicId,
                    reputer,
                    amount,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [delegateStakeMsg], fee, memo);
        });
    }
    withdrawReputerDelegationRewards(sender_1, topicId_1, reputer_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, reputer, fee = "auto", memo = "") {
            const withdrawReputerDelegationRewardsMsg = {
                typeUrl: "/emissions.v7.RewardDelegateStakeRequest",
                value: tx_1.RewardDelegateStakeRequest.fromPartial({
                    sender,
                    topicId,
                    reputer,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [withdrawReputerDelegationRewardsMsg], fee, memo);
        });
    }
    removeStakeFromReputer(sender_1, topicId_1, reputer_1, amount_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, reputer, amount, fee = "auto", memo = "") {
            const removeDelegateStakeMsg = {
                typeUrl: "/emissions.v7.RemoveDelegateStakeRequest",
                value: tx_1.RemoveDelegateStakeRequest.fromPartial({
                    sender,
                    topicId,
                    reputer,
                    amount,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeDelegateStakeMsg], fee, memo);
        });
    }
    cancelRemoveStakeFromReputer(sender_1, topicId_1, delegator_1, reputer_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, delegator, reputer, fee = "auto", memo = "") {
            const cancelRemoveStakeFromReputerMsg = {
                typeUrl: "/emissions.v7.CancelRemoveDelegateStakeRequest",
                value: tx_1.CancelRemoveDelegateStakeRequest.fromPartial({
                    sender,
                    topicId,
                    delegator,
                    reputer,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [cancelRemoveStakeFromReputerMsg], fee, memo);
        });
    }
    fundTopic(sender_1, topicId_1, amount_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, amount, fee = "auto", memo = "") {
            const fundTopicMsg = {
                typeUrl: "/emissions.v7.FundTopicRequest",
                value: tx_1.FundTopicRequest.fromPartial({
                    sender,
                    topicId,
                    amount,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [fundTopicMsg], fee, memo);
        });
    }
    addToWhitelistAdmin(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const addToWhitelistAdminMsg = {
                typeUrl: "/emissions.v7.AddToWhitelistAdminRequest",
                value: tx_1.AddToWhitelistAdminRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToWhitelistAdminMsg], fee, memo);
        });
    }
    removeFromWhitelistAdmin(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const removeFromWhitelistAdminMsg = {
                typeUrl: "/emissions.v7.RemoveFromWhitelistAdminRequest",
                value: tx_1.RemoveFromWhitelistAdminRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromWhitelistAdminMsg], fee, memo);
        });
    }
    insertWorkerPayload(sender_1, workerDataBundle_1) {
        return __awaiter(this, arguments, void 0, function* (sender, workerDataBundle, fee = "auto", memo = "") {
            const insertWorkerPayloadMsg = {
                typeUrl: "/emissions.v7.InsertWorkerPayloadRequest",
                value: tx_1.InsertWorkerPayloadRequest.fromPartial({
                    sender,
                    workerDataBundle,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [insertWorkerPayloadMsg], fee, memo);
        });
    }
    insertReputerPayload(sender_1, reputerDataBundle_1) {
        return __awaiter(this, arguments, void 0, function* (sender, reputerDataBundle, fee = "auto", memo = "") {
            const insertReputerPayloadMsg = {
                typeUrl: "/emissions.v7.InsertReputerPayloadRequest",
                value: tx_1.InsertReputerPayloadRequest.fromPartial({
                    sender,
                    reputerValueBundle: reputerDataBundle,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [insertReputerPayloadMsg], fee, memo);
        });
    }
    addToGlobalWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const addToGlobalWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToGlobalWhitelistRequest",
                value: tx_1.AddToGlobalWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToGlobalWhitelistMsg], fee, memo);
        });
    }
    removeFromGlobalWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const removeFromGlobalWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromGlobalWhitelistRequest",
                value: tx_1.RemoveFromGlobalWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromGlobalWhitelistMsg], fee, memo);
        });
    }
    addToGlobalWorkerWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const addToGlobalWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToGlobalWorkerWhitelistRequest",
                value: tx_1.AddToGlobalWorkerWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToGlobalWorkerWhitelistMsg], fee, memo);
        });
    }
    removeFromGlobalWorkerWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const removeFromGlobalWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromGlobalWorkerWhitelistRequest",
                value: tx_1.RemoveFromGlobalWorkerWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromGlobalWorkerWhitelistMsg], fee, memo);
        });
    }
    addToGlobalReputerWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const addToGlobalReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToGlobalReputerWhitelistRequest",
                value: tx_1.AddToGlobalReputerWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToGlobalReputerWhitelistMsg], fee, memo);
        });
    }
    removeFromGlobalReputerWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const removeFromGlobalReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromGlobalReputerWhitelistRequest",
                value: tx_1.RemoveFromGlobalReputerWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromGlobalReputerWhitelistMsg], fee, memo);
        });
    }
    addToGlobalAdminWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const addToGlobalAdminWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToGlobalAdminWhitelistRequest",
                value: tx_1.AddToGlobalAdminWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToGlobalAdminWhitelistMsg], fee, memo);
        });
    }
    removeFromGlobalAdminWhitelist(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const removeFromGlobalAdminWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromGlobalAdminWhitelistRequest",
                value: tx_1.RemoveFromGlobalAdminWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromGlobalAdminWhitelistMsg], fee, memo);
        });
    }
    bulkAddToGlobalWorkerWhitelist(sender_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, addresses, fee = "auto", memo = "") {
            const bulkAddToGlobalWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkAddToGlobalWorkerWhitelistRequest",
                value: tx_1.BulkAddToGlobalWorkerWhitelistRequest.fromPartial({
                    sender,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkAddToGlobalWorkerWhitelistMsg], fee, memo);
        });
    }
    bulkRemoveFromGlobalWorkerWhitelist(sender_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, addresses, fee = "auto", memo = "") {
            const bulkRemoveFromGlobalWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkRemoveFromGlobalWorkerWhitelistRequest",
                value: tx_1.BulkRemoveFromGlobalWorkerWhitelistRequest.fromPartial({
                    sender,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkRemoveFromGlobalWorkerWhitelistMsg], fee, memo);
        });
    }
    bulkAddToGlobalReputerWhitelist(sender_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, addresses, fee = "auto", memo = "") {
            const bulkAddToGlobalReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkAddToGlobalReputerWhitelistRequest",
                value: tx_1.BulkAddToGlobalReputerWhitelistRequest.fromPartial({
                    sender,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkAddToGlobalReputerWhitelistMsg], fee, memo);
        });
    }
    bulkRemoveFromGlobalReputerWhitelist(sender_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, addresses, fee = "auto", memo = "") {
            const bulkRemoveFromGlobalReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkRemoveFromGlobalReputerWhitelistRequest",
                value: tx_1.BulkRemoveFromGlobalReputerWhitelistRequest.fromPartial({
                    sender,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkRemoveFromGlobalReputerWhitelistMsg], fee, memo);
        });
    }
    bulkAddToTopicWorkerWhitelist(sender_1, topicId_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, addresses, fee = "auto", memo = "") {
            const bulkAddToTopicWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkAddToTopicWorkerWhitelistRequest",
                value: tx_1.BulkAddToTopicWorkerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkAddToTopicWorkerWhitelistMsg], fee, memo);
        });
    }
    bulkRemoveFromTopicWorkerWhitelist(sender_1, topicId_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, addresses, fee = "auto", memo = "") {
            const bulkRemoveFromTopicWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkRemoveFromTopicWorkerWhitelistRequest",
                value: tx_1.BulkRemoveFromTopicWorkerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkRemoveFromTopicWorkerWhitelistMsg], fee, memo);
        });
    }
    bulkAddToTopicReputerWhitelist(sender_1, topicId_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, addresses, fee = "auto", memo = "") {
            const bulkAddToTopicReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkAddToTopicReputerWhitelistRequest",
                value: tx_1.BulkAddToTopicReputerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkAddToTopicReputerWhitelistMsg], fee, memo);
        });
    }
    bulkRemoveFromTopicReputerWhitelist(sender_1, topicId_1, addresses_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, addresses, fee = "auto", memo = "") {
            const bulkRemoveFromTopicReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.BulkRemoveFromTopicReputerWhitelistRequest",
                value: tx_1.BulkRemoveFromTopicReputerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    addresses,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [bulkRemoveFromTopicReputerWhitelistMsg], fee, memo);
        });
    }
    enableTopicWorkerWhitelistRequest(sender_1, topicId_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, fee = "auto", memo = "") {
            const enableTopicWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.EnableTopicWorkerWhitelistRequest",
                value: tx_1.EnableTopicWorkerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [enableTopicWorkerWhitelistMsg], fee, memo);
        });
    }
    disableTopicWorkerWhitelistRequest(sender_1, topicId_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, fee = "auto", memo = "") {
            const disableTopicWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.DisableTopicWorkerWhitelistRequest",
                value: tx_1.DisableTopicWorkerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [disableTopicWorkerWhitelistMsg], fee, memo);
        });
    }
    enableTopicReputerWhitelistRequest(sender_1, topicId_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, fee = "auto", memo = "") {
            const enableTopicReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.EnableTopicReputerWhitelistRequest",
                value: tx_1.EnableTopicReputerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [enableTopicReputerWhitelistMsg], fee, memo);
        });
    }
    disableTopicReputerWhitelistRequest(sender_1, topicId_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, fee = "auto", memo = "") {
            const disableTopicReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.DisableTopicReputerWhitelistRequest",
                value: tx_1.DisableTopicReputerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [disableTopicReputerWhitelistMsg], fee, memo);
        });
    }
    addToTopicCreatorWhitelistRequest(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const addToTopicCreatorWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToTopicCreatorWhitelistRequest",
                value: tx_1.AddToTopicCreatorWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToTopicCreatorWhitelistMsg], fee, memo);
        });
    }
    removeFromTopicCreatorWhitelistRequest(sender_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, address, fee = "auto", memo = "") {
            const removeFromTopicCreatorWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromTopicCreatorWhitelistRequest",
                value: tx_1.RemoveFromTopicCreatorWhitelistRequest.fromPartial({
                    sender,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromTopicCreatorWhitelistMsg], fee, memo);
        });
    }
    addToTopicWorkerWhitelistRequest(sender_1, topicId_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, address, fee = "auto", memo = "") {
            const addToTopicWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToTopicWorkerWhitelistRequest",
                value: tx_1.AddToTopicWorkerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToTopicWorkerWhitelistMsg], fee, memo);
        });
    }
    removeFromTopicWorkerWhitelistRequest(sender_1, topicId_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, address, fee = "auto", memo = "") {
            const removeFromTopicWorkerWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromTopicWorkerWhitelistRequest",
                value: tx_1.RemoveFromTopicWorkerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromTopicWorkerWhitelistMsg], fee, memo);
        });
    }
    addToTopicReputerWhitelistRequest(sender_1, topicId_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, address, fee = "auto", memo = "") {
            const addToTopicReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.AddToTopicReputerWhitelistRequest",
                value: tx_1.AddToTopicReputerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [addToTopicReputerWhitelistMsg], fee, memo);
        });
    }
    removeFromTopicReputerWhitelistRequest(sender_1, topicId_1, address_1) {
        return __awaiter(this, arguments, void 0, function* (sender, topicId, address, fee = "auto", memo = "") {
            const removeFromTopicReputerWhitelistMsg = {
                typeUrl: "/emissions.v7.RemoveFromTopicReputerWhitelistRequest",
                value: tx_1.RemoveFromTopicReputerWhitelistRequest.fromPartial({
                    sender,
                    topicId,
                    address,
                }),
            };
            return this.signingClient.signAndBroadcast(sender, [removeFromTopicReputerWhitelistMsg], fee, memo);
        });
    }
}
exports.EmissionsModule = EmissionsModule;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlloraChainClient = void 0;
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const bank_1 = require("./modules/bank");
const emissions_1 = require("./modules/emissions");
class AlloraChainClient {
    static init(endpoint_1, signer_1) {
        return __awaiter(this, arguments, void 0, function* (endpoint, signer, signingClientOptions = {}) {
            const tmClient = yield tendermint_rpc_1.Tendermint34Client.connect(endpoint);
            if (signer) {
                const signingClient = yield stargate_1.SigningStargateClient.connectWithSigner(endpoint, signer, signingClientOptions);
                return new AlloraChainClient(tmClient, endpoint, signingClient);
            }
            return new AlloraChainClient(tmClient, endpoint);
        });
    }
    constructor(tmClient, endpoint, signingClient) {
        this.endpoint = endpoint;
        this.queryClient = new stargate_1.QueryClient(tmClient);
        this.signingClient = signingClient;
        // Initialize modules
        this.bank = new bank_1.BankModule(this.queryClient, this.signingClient);
        this.emissions = new emissions_1.EmissionsModule(this.queryClient, this.signingClient);
    }
    connect(newSigner_1) {
        return __awaiter(this, arguments, void 0, function* (newSigner, signingClientOptions = {}) {
            this.signingClient = yield stargate_1.SigningStargateClient.connectWithSigner(this.endpoint, newSigner, signingClientOptions);
            this.bank = new bank_1.BankModule(this.queryClient, this.signingClient);
            this.emissions = new emissions_1.EmissionsModule(this.queryClient, this.signingClient);
            return this;
        });
    }
}
exports.AlloraChainClient = AlloraChainClient;
exports.default = AlloraChainClient;
